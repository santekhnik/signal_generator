
GL_DISCO_GEN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077f0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  080078b0  080078b0  000088b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b10  08007b10  00009014  2**0
                  CONTENTS
  4 .ARM          00000000  08007b10  08007b10  00009014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b10  08007b10  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b10  08007b10  00008b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b14  08007b14  00008b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007b18  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000014  08007b2c  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08007b2c  00009230  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f18d  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b6  00000000  00000000  000181c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  0001a580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad5  00000000  00000000  0001b358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012e93  00000000  00000000  0001be2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d20  00000000  00000000  0002ecc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007310a  00000000  00000000  0003f9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2aea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003588  00000000  00000000  000b2b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000b60b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007898 	.word	0x08007898

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08007898 	.word	0x08007898

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	0010      	movs	r0, r2
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	0019      	movs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f000 ff87 	bl	8001328 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fec7 	bl	80011b8 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 ff79 	bl	8001328 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ff6f 	bl	8001328 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fef1 	bl	8001240 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fee7 	bl	8001240 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_d2uiz>:
 8000480:	b570      	push	{r4, r5, r6, lr}
 8000482:	2200      	movs	r2, #0
 8000484:	4b0c      	ldr	r3, [pc, #48]	@ (80004b8 <__aeabi_d2uiz+0x38>)
 8000486:	0004      	movs	r4, r0
 8000488:	000d      	movs	r5, r1
 800048a:	f7ff ffef 	bl	800046c <__aeabi_dcmpge>
 800048e:	2800      	cmp	r0, #0
 8000490:	d104      	bne.n	800049c <__aeabi_d2uiz+0x1c>
 8000492:	0020      	movs	r0, r4
 8000494:	0029      	movs	r1, r5
 8000496:	f001 fe1d 	bl	80020d4 <__aeabi_d2iz>
 800049a:	bd70      	pop	{r4, r5, r6, pc}
 800049c:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <__aeabi_d2uiz+0x38>)
 800049e:	2200      	movs	r2, #0
 80004a0:	0020      	movs	r0, r4
 80004a2:	0029      	movs	r1, r5
 80004a4:	f001 fa7a 	bl	800199c <__aeabi_dsub>
 80004a8:	f001 fe14 	bl	80020d4 <__aeabi_d2iz>
 80004ac:	2380      	movs	r3, #128	@ 0x80
 80004ae:	061b      	lsls	r3, r3, #24
 80004b0:	469c      	mov	ip, r3
 80004b2:	4460      	add	r0, ip
 80004b4:	e7f1      	b.n	800049a <__aeabi_d2uiz+0x1a>
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	41e00000 	.word	0x41e00000

080004bc <__aeabi_dadd>:
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	4657      	mov	r7, sl
 80004c0:	464e      	mov	r6, r9
 80004c2:	4645      	mov	r5, r8
 80004c4:	46de      	mov	lr, fp
 80004c6:	b5e0      	push	{r5, r6, r7, lr}
 80004c8:	b083      	sub	sp, #12
 80004ca:	9000      	str	r0, [sp, #0]
 80004cc:	9101      	str	r1, [sp, #4]
 80004ce:	030c      	lsls	r4, r1, #12
 80004d0:	004f      	lsls	r7, r1, #1
 80004d2:	0fce      	lsrs	r6, r1, #31
 80004d4:	0a61      	lsrs	r1, r4, #9
 80004d6:	9c00      	ldr	r4, [sp, #0]
 80004d8:	031d      	lsls	r5, r3, #12
 80004da:	0f64      	lsrs	r4, r4, #29
 80004dc:	430c      	orrs	r4, r1
 80004de:	9900      	ldr	r1, [sp, #0]
 80004e0:	9200      	str	r2, [sp, #0]
 80004e2:	9301      	str	r3, [sp, #4]
 80004e4:	00c8      	lsls	r0, r1, #3
 80004e6:	0059      	lsls	r1, r3, #1
 80004e8:	0d4b      	lsrs	r3, r1, #21
 80004ea:	4699      	mov	r9, r3
 80004ec:	9a00      	ldr	r2, [sp, #0]
 80004ee:	9b01      	ldr	r3, [sp, #4]
 80004f0:	0a6d      	lsrs	r5, r5, #9
 80004f2:	0fd9      	lsrs	r1, r3, #31
 80004f4:	0f53      	lsrs	r3, r2, #29
 80004f6:	432b      	orrs	r3, r5
 80004f8:	469a      	mov	sl, r3
 80004fa:	9b00      	ldr	r3, [sp, #0]
 80004fc:	0d7f      	lsrs	r7, r7, #21
 80004fe:	00da      	lsls	r2, r3, #3
 8000500:	4694      	mov	ip, r2
 8000502:	464a      	mov	r2, r9
 8000504:	46b0      	mov	r8, r6
 8000506:	1aba      	subs	r2, r7, r2
 8000508:	428e      	cmp	r6, r1
 800050a:	d100      	bne.n	800050e <__aeabi_dadd+0x52>
 800050c:	e0b0      	b.n	8000670 <__aeabi_dadd+0x1b4>
 800050e:	2a00      	cmp	r2, #0
 8000510:	dc00      	bgt.n	8000514 <__aeabi_dadd+0x58>
 8000512:	e078      	b.n	8000606 <__aeabi_dadd+0x14a>
 8000514:	4649      	mov	r1, r9
 8000516:	2900      	cmp	r1, #0
 8000518:	d100      	bne.n	800051c <__aeabi_dadd+0x60>
 800051a:	e0e9      	b.n	80006f0 <__aeabi_dadd+0x234>
 800051c:	49c9      	ldr	r1, [pc, #804]	@ (8000844 <__aeabi_dadd+0x388>)
 800051e:	428f      	cmp	r7, r1
 8000520:	d100      	bne.n	8000524 <__aeabi_dadd+0x68>
 8000522:	e195      	b.n	8000850 <__aeabi_dadd+0x394>
 8000524:	2501      	movs	r5, #1
 8000526:	2a38      	cmp	r2, #56	@ 0x38
 8000528:	dc16      	bgt.n	8000558 <__aeabi_dadd+0x9c>
 800052a:	2180      	movs	r1, #128	@ 0x80
 800052c:	4653      	mov	r3, sl
 800052e:	0409      	lsls	r1, r1, #16
 8000530:	430b      	orrs	r3, r1
 8000532:	469a      	mov	sl, r3
 8000534:	2a1f      	cmp	r2, #31
 8000536:	dd00      	ble.n	800053a <__aeabi_dadd+0x7e>
 8000538:	e1e7      	b.n	800090a <__aeabi_dadd+0x44e>
 800053a:	2120      	movs	r1, #32
 800053c:	4655      	mov	r5, sl
 800053e:	1a8b      	subs	r3, r1, r2
 8000540:	4661      	mov	r1, ip
 8000542:	409d      	lsls	r5, r3
 8000544:	40d1      	lsrs	r1, r2
 8000546:	430d      	orrs	r5, r1
 8000548:	4661      	mov	r1, ip
 800054a:	4099      	lsls	r1, r3
 800054c:	1e4b      	subs	r3, r1, #1
 800054e:	4199      	sbcs	r1, r3
 8000550:	4653      	mov	r3, sl
 8000552:	40d3      	lsrs	r3, r2
 8000554:	430d      	orrs	r5, r1
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	1b45      	subs	r5, r0, r5
 800055a:	42a8      	cmp	r0, r5
 800055c:	4180      	sbcs	r0, r0
 800055e:	4240      	negs	r0, r0
 8000560:	1a24      	subs	r4, r4, r0
 8000562:	0223      	lsls	r3, r4, #8
 8000564:	d400      	bmi.n	8000568 <__aeabi_dadd+0xac>
 8000566:	e10f      	b.n	8000788 <__aeabi_dadd+0x2cc>
 8000568:	0264      	lsls	r4, r4, #9
 800056a:	0a64      	lsrs	r4, r4, #9
 800056c:	2c00      	cmp	r4, #0
 800056e:	d100      	bne.n	8000572 <__aeabi_dadd+0xb6>
 8000570:	e139      	b.n	80007e6 <__aeabi_dadd+0x32a>
 8000572:	0020      	movs	r0, r4
 8000574:	f001 fe3c 	bl	80021f0 <__clzsi2>
 8000578:	0003      	movs	r3, r0
 800057a:	3b08      	subs	r3, #8
 800057c:	2120      	movs	r1, #32
 800057e:	0028      	movs	r0, r5
 8000580:	1aca      	subs	r2, r1, r3
 8000582:	40d0      	lsrs	r0, r2
 8000584:	409c      	lsls	r4, r3
 8000586:	0002      	movs	r2, r0
 8000588:	409d      	lsls	r5, r3
 800058a:	4322      	orrs	r2, r4
 800058c:	429f      	cmp	r7, r3
 800058e:	dd00      	ble.n	8000592 <__aeabi_dadd+0xd6>
 8000590:	e173      	b.n	800087a <__aeabi_dadd+0x3be>
 8000592:	1bd8      	subs	r0, r3, r7
 8000594:	3001      	adds	r0, #1
 8000596:	1a09      	subs	r1, r1, r0
 8000598:	002c      	movs	r4, r5
 800059a:	408d      	lsls	r5, r1
 800059c:	40c4      	lsrs	r4, r0
 800059e:	1e6b      	subs	r3, r5, #1
 80005a0:	419d      	sbcs	r5, r3
 80005a2:	0013      	movs	r3, r2
 80005a4:	40c2      	lsrs	r2, r0
 80005a6:	408b      	lsls	r3, r1
 80005a8:	4325      	orrs	r5, r4
 80005aa:	2700      	movs	r7, #0
 80005ac:	0014      	movs	r4, r2
 80005ae:	431d      	orrs	r5, r3
 80005b0:	076b      	lsls	r3, r5, #29
 80005b2:	d009      	beq.n	80005c8 <__aeabi_dadd+0x10c>
 80005b4:	230f      	movs	r3, #15
 80005b6:	402b      	ands	r3, r5
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d005      	beq.n	80005c8 <__aeabi_dadd+0x10c>
 80005bc:	1d2b      	adds	r3, r5, #4
 80005be:	42ab      	cmp	r3, r5
 80005c0:	41ad      	sbcs	r5, r5
 80005c2:	426d      	negs	r5, r5
 80005c4:	1964      	adds	r4, r4, r5
 80005c6:	001d      	movs	r5, r3
 80005c8:	0223      	lsls	r3, r4, #8
 80005ca:	d400      	bmi.n	80005ce <__aeabi_dadd+0x112>
 80005cc:	e12d      	b.n	800082a <__aeabi_dadd+0x36e>
 80005ce:	4a9d      	ldr	r2, [pc, #628]	@ (8000844 <__aeabi_dadd+0x388>)
 80005d0:	3701      	adds	r7, #1
 80005d2:	4297      	cmp	r7, r2
 80005d4:	d100      	bne.n	80005d8 <__aeabi_dadd+0x11c>
 80005d6:	e0d3      	b.n	8000780 <__aeabi_dadd+0x2c4>
 80005d8:	4646      	mov	r6, r8
 80005da:	499b      	ldr	r1, [pc, #620]	@ (8000848 <__aeabi_dadd+0x38c>)
 80005dc:	08ed      	lsrs	r5, r5, #3
 80005de:	4021      	ands	r1, r4
 80005e0:	074a      	lsls	r2, r1, #29
 80005e2:	432a      	orrs	r2, r5
 80005e4:	057c      	lsls	r4, r7, #21
 80005e6:	024d      	lsls	r5, r1, #9
 80005e8:	0b2d      	lsrs	r5, r5, #12
 80005ea:	0d64      	lsrs	r4, r4, #21
 80005ec:	0524      	lsls	r4, r4, #20
 80005ee:	432c      	orrs	r4, r5
 80005f0:	07f6      	lsls	r6, r6, #31
 80005f2:	4334      	orrs	r4, r6
 80005f4:	0010      	movs	r0, r2
 80005f6:	0021      	movs	r1, r4
 80005f8:	b003      	add	sp, #12
 80005fa:	bcf0      	pop	{r4, r5, r6, r7}
 80005fc:	46bb      	mov	fp, r7
 80005fe:	46b2      	mov	sl, r6
 8000600:	46a9      	mov	r9, r5
 8000602:	46a0      	mov	r8, r4
 8000604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000606:	2a00      	cmp	r2, #0
 8000608:	d100      	bne.n	800060c <__aeabi_dadd+0x150>
 800060a:	e084      	b.n	8000716 <__aeabi_dadd+0x25a>
 800060c:	464a      	mov	r2, r9
 800060e:	1bd2      	subs	r2, r2, r7
 8000610:	2f00      	cmp	r7, #0
 8000612:	d000      	beq.n	8000616 <__aeabi_dadd+0x15a>
 8000614:	e16d      	b.n	80008f2 <__aeabi_dadd+0x436>
 8000616:	0025      	movs	r5, r4
 8000618:	4305      	orrs	r5, r0
 800061a:	d100      	bne.n	800061e <__aeabi_dadd+0x162>
 800061c:	e127      	b.n	800086e <__aeabi_dadd+0x3b2>
 800061e:	1e56      	subs	r6, r2, #1
 8000620:	2a01      	cmp	r2, #1
 8000622:	d100      	bne.n	8000626 <__aeabi_dadd+0x16a>
 8000624:	e23b      	b.n	8000a9e <__aeabi_dadd+0x5e2>
 8000626:	4d87      	ldr	r5, [pc, #540]	@ (8000844 <__aeabi_dadd+0x388>)
 8000628:	42aa      	cmp	r2, r5
 800062a:	d100      	bne.n	800062e <__aeabi_dadd+0x172>
 800062c:	e26a      	b.n	8000b04 <__aeabi_dadd+0x648>
 800062e:	2501      	movs	r5, #1
 8000630:	2e38      	cmp	r6, #56	@ 0x38
 8000632:	dc12      	bgt.n	800065a <__aeabi_dadd+0x19e>
 8000634:	0032      	movs	r2, r6
 8000636:	2a1f      	cmp	r2, #31
 8000638:	dd00      	ble.n	800063c <__aeabi_dadd+0x180>
 800063a:	e1f8      	b.n	8000a2e <__aeabi_dadd+0x572>
 800063c:	2620      	movs	r6, #32
 800063e:	0025      	movs	r5, r4
 8000640:	1ab6      	subs	r6, r6, r2
 8000642:	0007      	movs	r7, r0
 8000644:	4653      	mov	r3, sl
 8000646:	40b0      	lsls	r0, r6
 8000648:	40d4      	lsrs	r4, r2
 800064a:	40b5      	lsls	r5, r6
 800064c:	40d7      	lsrs	r7, r2
 800064e:	1e46      	subs	r6, r0, #1
 8000650:	41b0      	sbcs	r0, r6
 8000652:	1b1b      	subs	r3, r3, r4
 8000654:	469a      	mov	sl, r3
 8000656:	433d      	orrs	r5, r7
 8000658:	4305      	orrs	r5, r0
 800065a:	4662      	mov	r2, ip
 800065c:	1b55      	subs	r5, r2, r5
 800065e:	45ac      	cmp	ip, r5
 8000660:	4192      	sbcs	r2, r2
 8000662:	4653      	mov	r3, sl
 8000664:	4252      	negs	r2, r2
 8000666:	000e      	movs	r6, r1
 8000668:	464f      	mov	r7, r9
 800066a:	4688      	mov	r8, r1
 800066c:	1a9c      	subs	r4, r3, r2
 800066e:	e778      	b.n	8000562 <__aeabi_dadd+0xa6>
 8000670:	2a00      	cmp	r2, #0
 8000672:	dc00      	bgt.n	8000676 <__aeabi_dadd+0x1ba>
 8000674:	e08e      	b.n	8000794 <__aeabi_dadd+0x2d8>
 8000676:	4649      	mov	r1, r9
 8000678:	2900      	cmp	r1, #0
 800067a:	d175      	bne.n	8000768 <__aeabi_dadd+0x2ac>
 800067c:	4661      	mov	r1, ip
 800067e:	4653      	mov	r3, sl
 8000680:	4319      	orrs	r1, r3
 8000682:	d100      	bne.n	8000686 <__aeabi_dadd+0x1ca>
 8000684:	e0f6      	b.n	8000874 <__aeabi_dadd+0x3b8>
 8000686:	1e51      	subs	r1, r2, #1
 8000688:	2a01      	cmp	r2, #1
 800068a:	d100      	bne.n	800068e <__aeabi_dadd+0x1d2>
 800068c:	e191      	b.n	80009b2 <__aeabi_dadd+0x4f6>
 800068e:	4d6d      	ldr	r5, [pc, #436]	@ (8000844 <__aeabi_dadd+0x388>)
 8000690:	42aa      	cmp	r2, r5
 8000692:	d100      	bne.n	8000696 <__aeabi_dadd+0x1da>
 8000694:	e0dc      	b.n	8000850 <__aeabi_dadd+0x394>
 8000696:	2501      	movs	r5, #1
 8000698:	2938      	cmp	r1, #56	@ 0x38
 800069a:	dc14      	bgt.n	80006c6 <__aeabi_dadd+0x20a>
 800069c:	000a      	movs	r2, r1
 800069e:	2a1f      	cmp	r2, #31
 80006a0:	dd00      	ble.n	80006a4 <__aeabi_dadd+0x1e8>
 80006a2:	e1a2      	b.n	80009ea <__aeabi_dadd+0x52e>
 80006a4:	2120      	movs	r1, #32
 80006a6:	4653      	mov	r3, sl
 80006a8:	1a89      	subs	r1, r1, r2
 80006aa:	408b      	lsls	r3, r1
 80006ac:	001d      	movs	r5, r3
 80006ae:	4663      	mov	r3, ip
 80006b0:	40d3      	lsrs	r3, r2
 80006b2:	431d      	orrs	r5, r3
 80006b4:	4663      	mov	r3, ip
 80006b6:	408b      	lsls	r3, r1
 80006b8:	0019      	movs	r1, r3
 80006ba:	1e4b      	subs	r3, r1, #1
 80006bc:	4199      	sbcs	r1, r3
 80006be:	4653      	mov	r3, sl
 80006c0:	40d3      	lsrs	r3, r2
 80006c2:	430d      	orrs	r5, r1
 80006c4:	18e4      	adds	r4, r4, r3
 80006c6:	182d      	adds	r5, r5, r0
 80006c8:	4285      	cmp	r5, r0
 80006ca:	4180      	sbcs	r0, r0
 80006cc:	4240      	negs	r0, r0
 80006ce:	1824      	adds	r4, r4, r0
 80006d0:	0223      	lsls	r3, r4, #8
 80006d2:	d559      	bpl.n	8000788 <__aeabi_dadd+0x2cc>
 80006d4:	4b5b      	ldr	r3, [pc, #364]	@ (8000844 <__aeabi_dadd+0x388>)
 80006d6:	3701      	adds	r7, #1
 80006d8:	429f      	cmp	r7, r3
 80006da:	d051      	beq.n	8000780 <__aeabi_dadd+0x2c4>
 80006dc:	2101      	movs	r1, #1
 80006de:	4b5a      	ldr	r3, [pc, #360]	@ (8000848 <__aeabi_dadd+0x38c>)
 80006e0:	086a      	lsrs	r2, r5, #1
 80006e2:	401c      	ands	r4, r3
 80006e4:	4029      	ands	r1, r5
 80006e6:	430a      	orrs	r2, r1
 80006e8:	07e5      	lsls	r5, r4, #31
 80006ea:	4315      	orrs	r5, r2
 80006ec:	0864      	lsrs	r4, r4, #1
 80006ee:	e75f      	b.n	80005b0 <__aeabi_dadd+0xf4>
 80006f0:	4661      	mov	r1, ip
 80006f2:	4653      	mov	r3, sl
 80006f4:	4319      	orrs	r1, r3
 80006f6:	d100      	bne.n	80006fa <__aeabi_dadd+0x23e>
 80006f8:	e0bc      	b.n	8000874 <__aeabi_dadd+0x3b8>
 80006fa:	1e51      	subs	r1, r2, #1
 80006fc:	2a01      	cmp	r2, #1
 80006fe:	d100      	bne.n	8000702 <__aeabi_dadd+0x246>
 8000700:	e164      	b.n	80009cc <__aeabi_dadd+0x510>
 8000702:	4d50      	ldr	r5, [pc, #320]	@ (8000844 <__aeabi_dadd+0x388>)
 8000704:	42aa      	cmp	r2, r5
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x24e>
 8000708:	e16a      	b.n	80009e0 <__aeabi_dadd+0x524>
 800070a:	2501      	movs	r5, #1
 800070c:	2938      	cmp	r1, #56	@ 0x38
 800070e:	dd00      	ble.n	8000712 <__aeabi_dadd+0x256>
 8000710:	e722      	b.n	8000558 <__aeabi_dadd+0x9c>
 8000712:	000a      	movs	r2, r1
 8000714:	e70e      	b.n	8000534 <__aeabi_dadd+0x78>
 8000716:	4a4d      	ldr	r2, [pc, #308]	@ (800084c <__aeabi_dadd+0x390>)
 8000718:	1c7d      	adds	r5, r7, #1
 800071a:	4215      	tst	r5, r2
 800071c:	d000      	beq.n	8000720 <__aeabi_dadd+0x264>
 800071e:	e0d0      	b.n	80008c2 <__aeabi_dadd+0x406>
 8000720:	0025      	movs	r5, r4
 8000722:	4662      	mov	r2, ip
 8000724:	4653      	mov	r3, sl
 8000726:	4305      	orrs	r5, r0
 8000728:	431a      	orrs	r2, r3
 800072a:	2f00      	cmp	r7, #0
 800072c:	d000      	beq.n	8000730 <__aeabi_dadd+0x274>
 800072e:	e137      	b.n	80009a0 <__aeabi_dadd+0x4e4>
 8000730:	2d00      	cmp	r5, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_dadd+0x27a>
 8000734:	e1a8      	b.n	8000a88 <__aeabi_dadd+0x5cc>
 8000736:	2a00      	cmp	r2, #0
 8000738:	d100      	bne.n	800073c <__aeabi_dadd+0x280>
 800073a:	e16a      	b.n	8000a12 <__aeabi_dadd+0x556>
 800073c:	4663      	mov	r3, ip
 800073e:	1ac5      	subs	r5, r0, r3
 8000740:	4653      	mov	r3, sl
 8000742:	1ae2      	subs	r2, r4, r3
 8000744:	42a8      	cmp	r0, r5
 8000746:	419b      	sbcs	r3, r3
 8000748:	425b      	negs	r3, r3
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	021a      	lsls	r2, r3, #8
 800074e:	d400      	bmi.n	8000752 <__aeabi_dadd+0x296>
 8000750:	e203      	b.n	8000b5a <__aeabi_dadd+0x69e>
 8000752:	4663      	mov	r3, ip
 8000754:	1a1d      	subs	r5, r3, r0
 8000756:	45ac      	cmp	ip, r5
 8000758:	4192      	sbcs	r2, r2
 800075a:	4653      	mov	r3, sl
 800075c:	4252      	negs	r2, r2
 800075e:	1b1c      	subs	r4, r3, r4
 8000760:	000e      	movs	r6, r1
 8000762:	4688      	mov	r8, r1
 8000764:	1aa4      	subs	r4, r4, r2
 8000766:	e723      	b.n	80005b0 <__aeabi_dadd+0xf4>
 8000768:	4936      	ldr	r1, [pc, #216]	@ (8000844 <__aeabi_dadd+0x388>)
 800076a:	428f      	cmp	r7, r1
 800076c:	d070      	beq.n	8000850 <__aeabi_dadd+0x394>
 800076e:	2501      	movs	r5, #1
 8000770:	2a38      	cmp	r2, #56	@ 0x38
 8000772:	dca8      	bgt.n	80006c6 <__aeabi_dadd+0x20a>
 8000774:	2180      	movs	r1, #128	@ 0x80
 8000776:	4653      	mov	r3, sl
 8000778:	0409      	lsls	r1, r1, #16
 800077a:	430b      	orrs	r3, r1
 800077c:	469a      	mov	sl, r3
 800077e:	e78e      	b.n	800069e <__aeabi_dadd+0x1e2>
 8000780:	003c      	movs	r4, r7
 8000782:	2500      	movs	r5, #0
 8000784:	2200      	movs	r2, #0
 8000786:	e731      	b.n	80005ec <__aeabi_dadd+0x130>
 8000788:	2307      	movs	r3, #7
 800078a:	402b      	ands	r3, r5
 800078c:	2b00      	cmp	r3, #0
 800078e:	d000      	beq.n	8000792 <__aeabi_dadd+0x2d6>
 8000790:	e710      	b.n	80005b4 <__aeabi_dadd+0xf8>
 8000792:	e093      	b.n	80008bc <__aeabi_dadd+0x400>
 8000794:	2a00      	cmp	r2, #0
 8000796:	d074      	beq.n	8000882 <__aeabi_dadd+0x3c6>
 8000798:	464a      	mov	r2, r9
 800079a:	1bd2      	subs	r2, r2, r7
 800079c:	2f00      	cmp	r7, #0
 800079e:	d100      	bne.n	80007a2 <__aeabi_dadd+0x2e6>
 80007a0:	e0c7      	b.n	8000932 <__aeabi_dadd+0x476>
 80007a2:	4928      	ldr	r1, [pc, #160]	@ (8000844 <__aeabi_dadd+0x388>)
 80007a4:	4589      	cmp	r9, r1
 80007a6:	d100      	bne.n	80007aa <__aeabi_dadd+0x2ee>
 80007a8:	e185      	b.n	8000ab6 <__aeabi_dadd+0x5fa>
 80007aa:	2501      	movs	r5, #1
 80007ac:	2a38      	cmp	r2, #56	@ 0x38
 80007ae:	dc12      	bgt.n	80007d6 <__aeabi_dadd+0x31a>
 80007b0:	2180      	movs	r1, #128	@ 0x80
 80007b2:	0409      	lsls	r1, r1, #16
 80007b4:	430c      	orrs	r4, r1
 80007b6:	2a1f      	cmp	r2, #31
 80007b8:	dd00      	ble.n	80007bc <__aeabi_dadd+0x300>
 80007ba:	e1ab      	b.n	8000b14 <__aeabi_dadd+0x658>
 80007bc:	2120      	movs	r1, #32
 80007be:	0025      	movs	r5, r4
 80007c0:	1a89      	subs	r1, r1, r2
 80007c2:	0007      	movs	r7, r0
 80007c4:	4088      	lsls	r0, r1
 80007c6:	408d      	lsls	r5, r1
 80007c8:	40d7      	lsrs	r7, r2
 80007ca:	1e41      	subs	r1, r0, #1
 80007cc:	4188      	sbcs	r0, r1
 80007ce:	40d4      	lsrs	r4, r2
 80007d0:	433d      	orrs	r5, r7
 80007d2:	4305      	orrs	r5, r0
 80007d4:	44a2      	add	sl, r4
 80007d6:	4465      	add	r5, ip
 80007d8:	4565      	cmp	r5, ip
 80007da:	4192      	sbcs	r2, r2
 80007dc:	4252      	negs	r2, r2
 80007de:	4452      	add	r2, sl
 80007e0:	0014      	movs	r4, r2
 80007e2:	464f      	mov	r7, r9
 80007e4:	e774      	b.n	80006d0 <__aeabi_dadd+0x214>
 80007e6:	0028      	movs	r0, r5
 80007e8:	f001 fd02 	bl	80021f0 <__clzsi2>
 80007ec:	0003      	movs	r3, r0
 80007ee:	3318      	adds	r3, #24
 80007f0:	2b1f      	cmp	r3, #31
 80007f2:	dc00      	bgt.n	80007f6 <__aeabi_dadd+0x33a>
 80007f4:	e6c2      	b.n	800057c <__aeabi_dadd+0xc0>
 80007f6:	002a      	movs	r2, r5
 80007f8:	3808      	subs	r0, #8
 80007fa:	4082      	lsls	r2, r0
 80007fc:	429f      	cmp	r7, r3
 80007fe:	dd00      	ble.n	8000802 <__aeabi_dadd+0x346>
 8000800:	e0a9      	b.n	8000956 <__aeabi_dadd+0x49a>
 8000802:	1bdb      	subs	r3, r3, r7
 8000804:	1c58      	adds	r0, r3, #1
 8000806:	281f      	cmp	r0, #31
 8000808:	dc00      	bgt.n	800080c <__aeabi_dadd+0x350>
 800080a:	e1ac      	b.n	8000b66 <__aeabi_dadd+0x6aa>
 800080c:	0015      	movs	r5, r2
 800080e:	3b1f      	subs	r3, #31
 8000810:	40dd      	lsrs	r5, r3
 8000812:	2820      	cmp	r0, #32
 8000814:	d005      	beq.n	8000822 <__aeabi_dadd+0x366>
 8000816:	2340      	movs	r3, #64	@ 0x40
 8000818:	1a1b      	subs	r3, r3, r0
 800081a:	409a      	lsls	r2, r3
 800081c:	1e53      	subs	r3, r2, #1
 800081e:	419a      	sbcs	r2, r3
 8000820:	4315      	orrs	r5, r2
 8000822:	2307      	movs	r3, #7
 8000824:	2700      	movs	r7, #0
 8000826:	402b      	ands	r3, r5
 8000828:	e7b0      	b.n	800078c <__aeabi_dadd+0x2d0>
 800082a:	08ed      	lsrs	r5, r5, #3
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <__aeabi_dadd+0x388>)
 800082e:	0762      	lsls	r2, r4, #29
 8000830:	432a      	orrs	r2, r5
 8000832:	08e4      	lsrs	r4, r4, #3
 8000834:	429f      	cmp	r7, r3
 8000836:	d00f      	beq.n	8000858 <__aeabi_dadd+0x39c>
 8000838:	0324      	lsls	r4, r4, #12
 800083a:	0b25      	lsrs	r5, r4, #12
 800083c:	057c      	lsls	r4, r7, #21
 800083e:	0d64      	lsrs	r4, r4, #21
 8000840:	e6d4      	b.n	80005ec <__aeabi_dadd+0x130>
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	000007ff 	.word	0x000007ff
 8000848:	ff7fffff 	.word	0xff7fffff
 800084c:	000007fe 	.word	0x000007fe
 8000850:	08c0      	lsrs	r0, r0, #3
 8000852:	0762      	lsls	r2, r4, #29
 8000854:	4302      	orrs	r2, r0
 8000856:	08e4      	lsrs	r4, r4, #3
 8000858:	0013      	movs	r3, r2
 800085a:	4323      	orrs	r3, r4
 800085c:	d100      	bne.n	8000860 <__aeabi_dadd+0x3a4>
 800085e:	e186      	b.n	8000b6e <__aeabi_dadd+0x6b2>
 8000860:	2580      	movs	r5, #128	@ 0x80
 8000862:	032d      	lsls	r5, r5, #12
 8000864:	4325      	orrs	r5, r4
 8000866:	032d      	lsls	r5, r5, #12
 8000868:	4cc3      	ldr	r4, [pc, #780]	@ (8000b78 <__aeabi_dadd+0x6bc>)
 800086a:	0b2d      	lsrs	r5, r5, #12
 800086c:	e6be      	b.n	80005ec <__aeabi_dadd+0x130>
 800086e:	4660      	mov	r0, ip
 8000870:	4654      	mov	r4, sl
 8000872:	000e      	movs	r6, r1
 8000874:	0017      	movs	r7, r2
 8000876:	08c5      	lsrs	r5, r0, #3
 8000878:	e7d8      	b.n	800082c <__aeabi_dadd+0x370>
 800087a:	4cc0      	ldr	r4, [pc, #768]	@ (8000b7c <__aeabi_dadd+0x6c0>)
 800087c:	1aff      	subs	r7, r7, r3
 800087e:	4014      	ands	r4, r2
 8000880:	e696      	b.n	80005b0 <__aeabi_dadd+0xf4>
 8000882:	4abf      	ldr	r2, [pc, #764]	@ (8000b80 <__aeabi_dadd+0x6c4>)
 8000884:	1c79      	adds	r1, r7, #1
 8000886:	4211      	tst	r1, r2
 8000888:	d16b      	bne.n	8000962 <__aeabi_dadd+0x4a6>
 800088a:	0022      	movs	r2, r4
 800088c:	4302      	orrs	r2, r0
 800088e:	2f00      	cmp	r7, #0
 8000890:	d000      	beq.n	8000894 <__aeabi_dadd+0x3d8>
 8000892:	e0db      	b.n	8000a4c <__aeabi_dadd+0x590>
 8000894:	2a00      	cmp	r2, #0
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x3de>
 8000898:	e12d      	b.n	8000af6 <__aeabi_dadd+0x63a>
 800089a:	4662      	mov	r2, ip
 800089c:	4653      	mov	r3, sl
 800089e:	431a      	orrs	r2, r3
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x3e8>
 80008a2:	e0b6      	b.n	8000a12 <__aeabi_dadd+0x556>
 80008a4:	4663      	mov	r3, ip
 80008a6:	18c5      	adds	r5, r0, r3
 80008a8:	4285      	cmp	r5, r0
 80008aa:	4180      	sbcs	r0, r0
 80008ac:	4454      	add	r4, sl
 80008ae:	4240      	negs	r0, r0
 80008b0:	1824      	adds	r4, r4, r0
 80008b2:	0223      	lsls	r3, r4, #8
 80008b4:	d502      	bpl.n	80008bc <__aeabi_dadd+0x400>
 80008b6:	000f      	movs	r7, r1
 80008b8:	4bb0      	ldr	r3, [pc, #704]	@ (8000b7c <__aeabi_dadd+0x6c0>)
 80008ba:	401c      	ands	r4, r3
 80008bc:	003a      	movs	r2, r7
 80008be:	0028      	movs	r0, r5
 80008c0:	e7d8      	b.n	8000874 <__aeabi_dadd+0x3b8>
 80008c2:	4662      	mov	r2, ip
 80008c4:	1a85      	subs	r5, r0, r2
 80008c6:	42a8      	cmp	r0, r5
 80008c8:	4192      	sbcs	r2, r2
 80008ca:	4653      	mov	r3, sl
 80008cc:	4252      	negs	r2, r2
 80008ce:	4691      	mov	r9, r2
 80008d0:	1ae3      	subs	r3, r4, r3
 80008d2:	001a      	movs	r2, r3
 80008d4:	464b      	mov	r3, r9
 80008d6:	1ad2      	subs	r2, r2, r3
 80008d8:	0013      	movs	r3, r2
 80008da:	4691      	mov	r9, r2
 80008dc:	021a      	lsls	r2, r3, #8
 80008de:	d454      	bmi.n	800098a <__aeabi_dadd+0x4ce>
 80008e0:	464a      	mov	r2, r9
 80008e2:	464c      	mov	r4, r9
 80008e4:	432a      	orrs	r2, r5
 80008e6:	d000      	beq.n	80008ea <__aeabi_dadd+0x42e>
 80008e8:	e640      	b.n	800056c <__aeabi_dadd+0xb0>
 80008ea:	2600      	movs	r6, #0
 80008ec:	2400      	movs	r4, #0
 80008ee:	2500      	movs	r5, #0
 80008f0:	e67c      	b.n	80005ec <__aeabi_dadd+0x130>
 80008f2:	4da1      	ldr	r5, [pc, #644]	@ (8000b78 <__aeabi_dadd+0x6bc>)
 80008f4:	45a9      	cmp	r9, r5
 80008f6:	d100      	bne.n	80008fa <__aeabi_dadd+0x43e>
 80008f8:	e090      	b.n	8000a1c <__aeabi_dadd+0x560>
 80008fa:	2501      	movs	r5, #1
 80008fc:	2a38      	cmp	r2, #56	@ 0x38
 80008fe:	dd00      	ble.n	8000902 <__aeabi_dadd+0x446>
 8000900:	e6ab      	b.n	800065a <__aeabi_dadd+0x19e>
 8000902:	2580      	movs	r5, #128	@ 0x80
 8000904:	042d      	lsls	r5, r5, #16
 8000906:	432c      	orrs	r4, r5
 8000908:	e695      	b.n	8000636 <__aeabi_dadd+0x17a>
 800090a:	0011      	movs	r1, r2
 800090c:	4655      	mov	r5, sl
 800090e:	3920      	subs	r1, #32
 8000910:	40cd      	lsrs	r5, r1
 8000912:	46a9      	mov	r9, r5
 8000914:	2a20      	cmp	r2, #32
 8000916:	d006      	beq.n	8000926 <__aeabi_dadd+0x46a>
 8000918:	2140      	movs	r1, #64	@ 0x40
 800091a:	4653      	mov	r3, sl
 800091c:	1a8a      	subs	r2, r1, r2
 800091e:	4093      	lsls	r3, r2
 8000920:	4662      	mov	r2, ip
 8000922:	431a      	orrs	r2, r3
 8000924:	4694      	mov	ip, r2
 8000926:	4665      	mov	r5, ip
 8000928:	1e6b      	subs	r3, r5, #1
 800092a:	419d      	sbcs	r5, r3
 800092c:	464b      	mov	r3, r9
 800092e:	431d      	orrs	r5, r3
 8000930:	e612      	b.n	8000558 <__aeabi_dadd+0x9c>
 8000932:	0021      	movs	r1, r4
 8000934:	4301      	orrs	r1, r0
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x47e>
 8000938:	e0c4      	b.n	8000ac4 <__aeabi_dadd+0x608>
 800093a:	1e51      	subs	r1, r2, #1
 800093c:	2a01      	cmp	r2, #1
 800093e:	d100      	bne.n	8000942 <__aeabi_dadd+0x486>
 8000940:	e0fb      	b.n	8000b3a <__aeabi_dadd+0x67e>
 8000942:	4d8d      	ldr	r5, [pc, #564]	@ (8000b78 <__aeabi_dadd+0x6bc>)
 8000944:	42aa      	cmp	r2, r5
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x48e>
 8000948:	e0b5      	b.n	8000ab6 <__aeabi_dadd+0x5fa>
 800094a:	2501      	movs	r5, #1
 800094c:	2938      	cmp	r1, #56	@ 0x38
 800094e:	dd00      	ble.n	8000952 <__aeabi_dadd+0x496>
 8000950:	e741      	b.n	80007d6 <__aeabi_dadd+0x31a>
 8000952:	000a      	movs	r2, r1
 8000954:	e72f      	b.n	80007b6 <__aeabi_dadd+0x2fa>
 8000956:	4c89      	ldr	r4, [pc, #548]	@ (8000b7c <__aeabi_dadd+0x6c0>)
 8000958:	1aff      	subs	r7, r7, r3
 800095a:	4014      	ands	r4, r2
 800095c:	0762      	lsls	r2, r4, #29
 800095e:	08e4      	lsrs	r4, r4, #3
 8000960:	e76a      	b.n	8000838 <__aeabi_dadd+0x37c>
 8000962:	4a85      	ldr	r2, [pc, #532]	@ (8000b78 <__aeabi_dadd+0x6bc>)
 8000964:	4291      	cmp	r1, r2
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x4ae>
 8000968:	e0e3      	b.n	8000b32 <__aeabi_dadd+0x676>
 800096a:	4663      	mov	r3, ip
 800096c:	18c2      	adds	r2, r0, r3
 800096e:	4282      	cmp	r2, r0
 8000970:	4180      	sbcs	r0, r0
 8000972:	0023      	movs	r3, r4
 8000974:	4240      	negs	r0, r0
 8000976:	4453      	add	r3, sl
 8000978:	181b      	adds	r3, r3, r0
 800097a:	07dd      	lsls	r5, r3, #31
 800097c:	085c      	lsrs	r4, r3, #1
 800097e:	2307      	movs	r3, #7
 8000980:	0852      	lsrs	r2, r2, #1
 8000982:	4315      	orrs	r5, r2
 8000984:	000f      	movs	r7, r1
 8000986:	402b      	ands	r3, r5
 8000988:	e700      	b.n	800078c <__aeabi_dadd+0x2d0>
 800098a:	4663      	mov	r3, ip
 800098c:	1a1d      	subs	r5, r3, r0
 800098e:	45ac      	cmp	ip, r5
 8000990:	4192      	sbcs	r2, r2
 8000992:	4653      	mov	r3, sl
 8000994:	4252      	negs	r2, r2
 8000996:	1b1c      	subs	r4, r3, r4
 8000998:	000e      	movs	r6, r1
 800099a:	4688      	mov	r8, r1
 800099c:	1aa4      	subs	r4, r4, r2
 800099e:	e5e5      	b.n	800056c <__aeabi_dadd+0xb0>
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x4ea>
 80009a4:	e091      	b.n	8000aca <__aeabi_dadd+0x60e>
 80009a6:	2a00      	cmp	r2, #0
 80009a8:	d138      	bne.n	8000a1c <__aeabi_dadd+0x560>
 80009aa:	2480      	movs	r4, #128	@ 0x80
 80009ac:	2600      	movs	r6, #0
 80009ae:	0324      	lsls	r4, r4, #12
 80009b0:	e756      	b.n	8000860 <__aeabi_dadd+0x3a4>
 80009b2:	4663      	mov	r3, ip
 80009b4:	18c5      	adds	r5, r0, r3
 80009b6:	4285      	cmp	r5, r0
 80009b8:	4180      	sbcs	r0, r0
 80009ba:	4454      	add	r4, sl
 80009bc:	4240      	negs	r0, r0
 80009be:	1824      	adds	r4, r4, r0
 80009c0:	2701      	movs	r7, #1
 80009c2:	0223      	lsls	r3, r4, #8
 80009c4:	d400      	bmi.n	80009c8 <__aeabi_dadd+0x50c>
 80009c6:	e6df      	b.n	8000788 <__aeabi_dadd+0x2cc>
 80009c8:	2702      	movs	r7, #2
 80009ca:	e687      	b.n	80006dc <__aeabi_dadd+0x220>
 80009cc:	4663      	mov	r3, ip
 80009ce:	1ac5      	subs	r5, r0, r3
 80009d0:	42a8      	cmp	r0, r5
 80009d2:	4180      	sbcs	r0, r0
 80009d4:	4653      	mov	r3, sl
 80009d6:	4240      	negs	r0, r0
 80009d8:	1ae4      	subs	r4, r4, r3
 80009da:	2701      	movs	r7, #1
 80009dc:	1a24      	subs	r4, r4, r0
 80009de:	e5c0      	b.n	8000562 <__aeabi_dadd+0xa6>
 80009e0:	0762      	lsls	r2, r4, #29
 80009e2:	08c0      	lsrs	r0, r0, #3
 80009e4:	4302      	orrs	r2, r0
 80009e6:	08e4      	lsrs	r4, r4, #3
 80009e8:	e736      	b.n	8000858 <__aeabi_dadd+0x39c>
 80009ea:	0011      	movs	r1, r2
 80009ec:	4653      	mov	r3, sl
 80009ee:	3920      	subs	r1, #32
 80009f0:	40cb      	lsrs	r3, r1
 80009f2:	4699      	mov	r9, r3
 80009f4:	2a20      	cmp	r2, #32
 80009f6:	d006      	beq.n	8000a06 <__aeabi_dadd+0x54a>
 80009f8:	2140      	movs	r1, #64	@ 0x40
 80009fa:	4653      	mov	r3, sl
 80009fc:	1a8a      	subs	r2, r1, r2
 80009fe:	4093      	lsls	r3, r2
 8000a00:	4662      	mov	r2, ip
 8000a02:	431a      	orrs	r2, r3
 8000a04:	4694      	mov	ip, r2
 8000a06:	4665      	mov	r5, ip
 8000a08:	1e6b      	subs	r3, r5, #1
 8000a0a:	419d      	sbcs	r5, r3
 8000a0c:	464b      	mov	r3, r9
 8000a0e:	431d      	orrs	r5, r3
 8000a10:	e659      	b.n	80006c6 <__aeabi_dadd+0x20a>
 8000a12:	0762      	lsls	r2, r4, #29
 8000a14:	08c0      	lsrs	r0, r0, #3
 8000a16:	4302      	orrs	r2, r0
 8000a18:	08e4      	lsrs	r4, r4, #3
 8000a1a:	e70d      	b.n	8000838 <__aeabi_dadd+0x37c>
 8000a1c:	4653      	mov	r3, sl
 8000a1e:	075a      	lsls	r2, r3, #29
 8000a20:	4663      	mov	r3, ip
 8000a22:	08d8      	lsrs	r0, r3, #3
 8000a24:	4653      	mov	r3, sl
 8000a26:	000e      	movs	r6, r1
 8000a28:	4302      	orrs	r2, r0
 8000a2a:	08dc      	lsrs	r4, r3, #3
 8000a2c:	e714      	b.n	8000858 <__aeabi_dadd+0x39c>
 8000a2e:	0015      	movs	r5, r2
 8000a30:	0026      	movs	r6, r4
 8000a32:	3d20      	subs	r5, #32
 8000a34:	40ee      	lsrs	r6, r5
 8000a36:	2a20      	cmp	r2, #32
 8000a38:	d003      	beq.n	8000a42 <__aeabi_dadd+0x586>
 8000a3a:	2540      	movs	r5, #64	@ 0x40
 8000a3c:	1aaa      	subs	r2, r5, r2
 8000a3e:	4094      	lsls	r4, r2
 8000a40:	4320      	orrs	r0, r4
 8000a42:	1e42      	subs	r2, r0, #1
 8000a44:	4190      	sbcs	r0, r2
 8000a46:	0005      	movs	r5, r0
 8000a48:	4335      	orrs	r5, r6
 8000a4a:	e606      	b.n	800065a <__aeabi_dadd+0x19e>
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	d07c      	beq.n	8000b4a <__aeabi_dadd+0x68e>
 8000a50:	4662      	mov	r2, ip
 8000a52:	4653      	mov	r3, sl
 8000a54:	08c0      	lsrs	r0, r0, #3
 8000a56:	431a      	orrs	r2, r3
 8000a58:	d100      	bne.n	8000a5c <__aeabi_dadd+0x5a0>
 8000a5a:	e6fa      	b.n	8000852 <__aeabi_dadd+0x396>
 8000a5c:	0762      	lsls	r2, r4, #29
 8000a5e:	4310      	orrs	r0, r2
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	08e4      	lsrs	r4, r4, #3
 8000a64:	0312      	lsls	r2, r2, #12
 8000a66:	4214      	tst	r4, r2
 8000a68:	d008      	beq.n	8000a7c <__aeabi_dadd+0x5c0>
 8000a6a:	08d9      	lsrs	r1, r3, #3
 8000a6c:	4211      	tst	r1, r2
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_dadd+0x5c0>
 8000a70:	4663      	mov	r3, ip
 8000a72:	08d8      	lsrs	r0, r3, #3
 8000a74:	4653      	mov	r3, sl
 8000a76:	000c      	movs	r4, r1
 8000a78:	075b      	lsls	r3, r3, #29
 8000a7a:	4318      	orrs	r0, r3
 8000a7c:	0f42      	lsrs	r2, r0, #29
 8000a7e:	00c0      	lsls	r0, r0, #3
 8000a80:	08c0      	lsrs	r0, r0, #3
 8000a82:	0752      	lsls	r2, r2, #29
 8000a84:	4302      	orrs	r2, r0
 8000a86:	e6e7      	b.n	8000858 <__aeabi_dadd+0x39c>
 8000a88:	2a00      	cmp	r2, #0
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_dadd+0x5d2>
 8000a8c:	e72d      	b.n	80008ea <__aeabi_dadd+0x42e>
 8000a8e:	4663      	mov	r3, ip
 8000a90:	08d8      	lsrs	r0, r3, #3
 8000a92:	4653      	mov	r3, sl
 8000a94:	075a      	lsls	r2, r3, #29
 8000a96:	000e      	movs	r6, r1
 8000a98:	4302      	orrs	r2, r0
 8000a9a:	08dc      	lsrs	r4, r3, #3
 8000a9c:	e6cc      	b.n	8000838 <__aeabi_dadd+0x37c>
 8000a9e:	4663      	mov	r3, ip
 8000aa0:	1a1d      	subs	r5, r3, r0
 8000aa2:	45ac      	cmp	ip, r5
 8000aa4:	4192      	sbcs	r2, r2
 8000aa6:	4653      	mov	r3, sl
 8000aa8:	4252      	negs	r2, r2
 8000aaa:	1b1c      	subs	r4, r3, r4
 8000aac:	000e      	movs	r6, r1
 8000aae:	4688      	mov	r8, r1
 8000ab0:	1aa4      	subs	r4, r4, r2
 8000ab2:	3701      	adds	r7, #1
 8000ab4:	e555      	b.n	8000562 <__aeabi_dadd+0xa6>
 8000ab6:	4663      	mov	r3, ip
 8000ab8:	08d9      	lsrs	r1, r3, #3
 8000aba:	4653      	mov	r3, sl
 8000abc:	075a      	lsls	r2, r3, #29
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	08dc      	lsrs	r4, r3, #3
 8000ac2:	e6c9      	b.n	8000858 <__aeabi_dadd+0x39c>
 8000ac4:	4660      	mov	r0, ip
 8000ac6:	4654      	mov	r4, sl
 8000ac8:	e6d4      	b.n	8000874 <__aeabi_dadd+0x3b8>
 8000aca:	08c0      	lsrs	r0, r0, #3
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_dadd+0x616>
 8000ad0:	e6bf      	b.n	8000852 <__aeabi_dadd+0x396>
 8000ad2:	0762      	lsls	r2, r4, #29
 8000ad4:	4310      	orrs	r0, r2
 8000ad6:	2280      	movs	r2, #128	@ 0x80
 8000ad8:	08e4      	lsrs	r4, r4, #3
 8000ada:	0312      	lsls	r2, r2, #12
 8000adc:	4214      	tst	r4, r2
 8000ade:	d0cd      	beq.n	8000a7c <__aeabi_dadd+0x5c0>
 8000ae0:	08dd      	lsrs	r5, r3, #3
 8000ae2:	4215      	tst	r5, r2
 8000ae4:	d1ca      	bne.n	8000a7c <__aeabi_dadd+0x5c0>
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	08d8      	lsrs	r0, r3, #3
 8000aea:	4653      	mov	r3, sl
 8000aec:	075b      	lsls	r3, r3, #29
 8000aee:	000e      	movs	r6, r1
 8000af0:	002c      	movs	r4, r5
 8000af2:	4318      	orrs	r0, r3
 8000af4:	e7c2      	b.n	8000a7c <__aeabi_dadd+0x5c0>
 8000af6:	4663      	mov	r3, ip
 8000af8:	08d9      	lsrs	r1, r3, #3
 8000afa:	4653      	mov	r3, sl
 8000afc:	075a      	lsls	r2, r3, #29
 8000afe:	430a      	orrs	r2, r1
 8000b00:	08dc      	lsrs	r4, r3, #3
 8000b02:	e699      	b.n	8000838 <__aeabi_dadd+0x37c>
 8000b04:	4663      	mov	r3, ip
 8000b06:	08d8      	lsrs	r0, r3, #3
 8000b08:	4653      	mov	r3, sl
 8000b0a:	075a      	lsls	r2, r3, #29
 8000b0c:	000e      	movs	r6, r1
 8000b0e:	4302      	orrs	r2, r0
 8000b10:	08dc      	lsrs	r4, r3, #3
 8000b12:	e6a1      	b.n	8000858 <__aeabi_dadd+0x39c>
 8000b14:	0011      	movs	r1, r2
 8000b16:	0027      	movs	r7, r4
 8000b18:	3920      	subs	r1, #32
 8000b1a:	40cf      	lsrs	r7, r1
 8000b1c:	2a20      	cmp	r2, #32
 8000b1e:	d003      	beq.n	8000b28 <__aeabi_dadd+0x66c>
 8000b20:	2140      	movs	r1, #64	@ 0x40
 8000b22:	1a8a      	subs	r2, r1, r2
 8000b24:	4094      	lsls	r4, r2
 8000b26:	4320      	orrs	r0, r4
 8000b28:	1e42      	subs	r2, r0, #1
 8000b2a:	4190      	sbcs	r0, r2
 8000b2c:	0005      	movs	r5, r0
 8000b2e:	433d      	orrs	r5, r7
 8000b30:	e651      	b.n	80007d6 <__aeabi_dadd+0x31a>
 8000b32:	000c      	movs	r4, r1
 8000b34:	2500      	movs	r5, #0
 8000b36:	2200      	movs	r2, #0
 8000b38:	e558      	b.n	80005ec <__aeabi_dadd+0x130>
 8000b3a:	4460      	add	r0, ip
 8000b3c:	4560      	cmp	r0, ip
 8000b3e:	4192      	sbcs	r2, r2
 8000b40:	4454      	add	r4, sl
 8000b42:	4252      	negs	r2, r2
 8000b44:	0005      	movs	r5, r0
 8000b46:	18a4      	adds	r4, r4, r2
 8000b48:	e73a      	b.n	80009c0 <__aeabi_dadd+0x504>
 8000b4a:	4653      	mov	r3, sl
 8000b4c:	075a      	lsls	r2, r3, #29
 8000b4e:	4663      	mov	r3, ip
 8000b50:	08d9      	lsrs	r1, r3, #3
 8000b52:	4653      	mov	r3, sl
 8000b54:	430a      	orrs	r2, r1
 8000b56:	08dc      	lsrs	r4, r3, #3
 8000b58:	e67e      	b.n	8000858 <__aeabi_dadd+0x39c>
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	001c      	movs	r4, r3
 8000b5e:	432a      	orrs	r2, r5
 8000b60:	d000      	beq.n	8000b64 <__aeabi_dadd+0x6a8>
 8000b62:	e6ab      	b.n	80008bc <__aeabi_dadd+0x400>
 8000b64:	e6c1      	b.n	80008ea <__aeabi_dadd+0x42e>
 8000b66:	2120      	movs	r1, #32
 8000b68:	2500      	movs	r5, #0
 8000b6a:	1a09      	subs	r1, r1, r0
 8000b6c:	e519      	b.n	80005a2 <__aeabi_dadd+0xe6>
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2500      	movs	r5, #0
 8000b72:	4c01      	ldr	r4, [pc, #4]	@ (8000b78 <__aeabi_dadd+0x6bc>)
 8000b74:	e53a      	b.n	80005ec <__aeabi_dadd+0x130>
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	000007ff 	.word	0x000007ff
 8000b7c:	ff7fffff 	.word	0xff7fffff
 8000b80:	000007fe 	.word	0x000007fe

08000b84 <__aeabi_ddiv>:
 8000b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b86:	46de      	mov	lr, fp
 8000b88:	4645      	mov	r5, r8
 8000b8a:	4657      	mov	r7, sl
 8000b8c:	464e      	mov	r6, r9
 8000b8e:	b5e0      	push	{r5, r6, r7, lr}
 8000b90:	b087      	sub	sp, #28
 8000b92:	9200      	str	r2, [sp, #0]
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	030b      	lsls	r3, r1, #12
 8000b98:	0b1b      	lsrs	r3, r3, #12
 8000b9a:	469b      	mov	fp, r3
 8000b9c:	0fca      	lsrs	r2, r1, #31
 8000b9e:	004b      	lsls	r3, r1, #1
 8000ba0:	0004      	movs	r4, r0
 8000ba2:	4680      	mov	r8, r0
 8000ba4:	0d5b      	lsrs	r3, r3, #21
 8000ba6:	9202      	str	r2, [sp, #8]
 8000ba8:	d100      	bne.n	8000bac <__aeabi_ddiv+0x28>
 8000baa:	e16a      	b.n	8000e82 <__aeabi_ddiv+0x2fe>
 8000bac:	4ad4      	ldr	r2, [pc, #848]	@ (8000f00 <__aeabi_ddiv+0x37c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_ddiv+0x30>
 8000bb2:	e18c      	b.n	8000ece <__aeabi_ddiv+0x34a>
 8000bb4:	4659      	mov	r1, fp
 8000bb6:	0f42      	lsrs	r2, r0, #29
 8000bb8:	00c9      	lsls	r1, r1, #3
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	2180      	movs	r1, #128	@ 0x80
 8000bbe:	0409      	lsls	r1, r1, #16
 8000bc0:	4311      	orrs	r1, r2
 8000bc2:	00c2      	lsls	r2, r0, #3
 8000bc4:	4690      	mov	r8, r2
 8000bc6:	4acf      	ldr	r2, [pc, #828]	@ (8000f04 <__aeabi_ddiv+0x380>)
 8000bc8:	4689      	mov	r9, r1
 8000bca:	4692      	mov	sl, r2
 8000bcc:	449a      	add	sl, r3
 8000bce:	2300      	movs	r3, #0
 8000bd0:	2400      	movs	r4, #0
 8000bd2:	9303      	str	r3, [sp, #12]
 8000bd4:	9e00      	ldr	r6, [sp, #0]
 8000bd6:	9f01      	ldr	r7, [sp, #4]
 8000bd8:	033b      	lsls	r3, r7, #12
 8000bda:	0b1b      	lsrs	r3, r3, #12
 8000bdc:	469b      	mov	fp, r3
 8000bde:	007b      	lsls	r3, r7, #1
 8000be0:	0030      	movs	r0, r6
 8000be2:	0d5b      	lsrs	r3, r3, #21
 8000be4:	0ffd      	lsrs	r5, r7, #31
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_ddiv+0x68>
 8000bea:	e128      	b.n	8000e3e <__aeabi_ddiv+0x2ba>
 8000bec:	4ac4      	ldr	r2, [pc, #784]	@ (8000f00 <__aeabi_ddiv+0x37c>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_ddiv+0x70>
 8000bf2:	e177      	b.n	8000ee4 <__aeabi_ddiv+0x360>
 8000bf4:	4659      	mov	r1, fp
 8000bf6:	0f72      	lsrs	r2, r6, #29
 8000bf8:	00c9      	lsls	r1, r1, #3
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	2180      	movs	r1, #128	@ 0x80
 8000bfe:	0409      	lsls	r1, r1, #16
 8000c00:	4311      	orrs	r1, r2
 8000c02:	468b      	mov	fp, r1
 8000c04:	49bf      	ldr	r1, [pc, #764]	@ (8000f04 <__aeabi_ddiv+0x380>)
 8000c06:	00f2      	lsls	r2, r6, #3
 8000c08:	468c      	mov	ip, r1
 8000c0a:	4651      	mov	r1, sl
 8000c0c:	4463      	add	r3, ip
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	2300      	movs	r3, #0
 8000c14:	9e02      	ldr	r6, [sp, #8]
 8000c16:	406e      	eors	r6, r5
 8000c18:	2c0f      	cmp	r4, #15
 8000c1a:	d827      	bhi.n	8000c6c <__aeabi_ddiv+0xe8>
 8000c1c:	49ba      	ldr	r1, [pc, #744]	@ (8000f08 <__aeabi_ddiv+0x384>)
 8000c1e:	00a4      	lsls	r4, r4, #2
 8000c20:	5909      	ldr	r1, [r1, r4]
 8000c22:	468f      	mov	pc, r1
 8000c24:	46cb      	mov	fp, r9
 8000c26:	4642      	mov	r2, r8
 8000c28:	9e02      	ldr	r6, [sp, #8]
 8000c2a:	9b03      	ldr	r3, [sp, #12]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d016      	beq.n	8000c5e <__aeabi_ddiv+0xda>
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d100      	bne.n	8000c36 <__aeabi_ddiv+0xb2>
 8000c34:	e2a6      	b.n	8001184 <__aeabi_ddiv+0x600>
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d000      	beq.n	8000c3c <__aeabi_ddiv+0xb8>
 8000c3a:	e0df      	b.n	8000dfc <__aeabi_ddiv+0x278>
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2300      	movs	r3, #0
 8000c40:	2400      	movs	r4, #0
 8000c42:	4690      	mov	r8, r2
 8000c44:	051b      	lsls	r3, r3, #20
 8000c46:	4323      	orrs	r3, r4
 8000c48:	07f6      	lsls	r6, r6, #31
 8000c4a:	4333      	orrs	r3, r6
 8000c4c:	4640      	mov	r0, r8
 8000c4e:	0019      	movs	r1, r3
 8000c50:	b007      	add	sp, #28
 8000c52:	bcf0      	pop	{r4, r5, r6, r7}
 8000c54:	46bb      	mov	fp, r7
 8000c56:	46b2      	mov	sl, r6
 8000c58:	46a9      	mov	r9, r5
 8000c5a:	46a0      	mov	r8, r4
 8000c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2400      	movs	r4, #0
 8000c62:	4690      	mov	r8, r2
 8000c64:	4ba6      	ldr	r3, [pc, #664]	@ (8000f00 <__aeabi_ddiv+0x37c>)
 8000c66:	e7ed      	b.n	8000c44 <__aeabi_ddiv+0xc0>
 8000c68:	002e      	movs	r6, r5
 8000c6a:	e7df      	b.n	8000c2c <__aeabi_ddiv+0xa8>
 8000c6c:	45cb      	cmp	fp, r9
 8000c6e:	d200      	bcs.n	8000c72 <__aeabi_ddiv+0xee>
 8000c70:	e1d4      	b.n	800101c <__aeabi_ddiv+0x498>
 8000c72:	d100      	bne.n	8000c76 <__aeabi_ddiv+0xf2>
 8000c74:	e1cf      	b.n	8001016 <__aeabi_ddiv+0x492>
 8000c76:	2301      	movs	r3, #1
 8000c78:	425b      	negs	r3, r3
 8000c7a:	469c      	mov	ip, r3
 8000c7c:	4644      	mov	r4, r8
 8000c7e:	4648      	mov	r0, r9
 8000c80:	2700      	movs	r7, #0
 8000c82:	44e2      	add	sl, ip
 8000c84:	465b      	mov	r3, fp
 8000c86:	0e15      	lsrs	r5, r2, #24
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	431d      	orrs	r5, r3
 8000c8c:	0c19      	lsrs	r1, r3, #16
 8000c8e:	042b      	lsls	r3, r5, #16
 8000c90:	0212      	lsls	r2, r2, #8
 8000c92:	9500      	str	r5, [sp, #0]
 8000c94:	0c1d      	lsrs	r5, r3, #16
 8000c96:	4691      	mov	r9, r2
 8000c98:	9102      	str	r1, [sp, #8]
 8000c9a:	9503      	str	r5, [sp, #12]
 8000c9c:	f7ff fac2 	bl	8000224 <__aeabi_uidivmod>
 8000ca0:	0002      	movs	r2, r0
 8000ca2:	436a      	muls	r2, r5
 8000ca4:	040b      	lsls	r3, r1, #16
 8000ca6:	0c21      	lsrs	r1, r4, #16
 8000ca8:	4680      	mov	r8, r0
 8000caa:	4319      	orrs	r1, r3
 8000cac:	428a      	cmp	r2, r1
 8000cae:	d909      	bls.n	8000cc4 <__aeabi_ddiv+0x140>
 8000cb0:	9d00      	ldr	r5, [sp, #0]
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	425b      	negs	r3, r3
 8000cb8:	4461      	add	r1, ip
 8000cba:	469c      	mov	ip, r3
 8000cbc:	44e0      	add	r8, ip
 8000cbe:	428d      	cmp	r5, r1
 8000cc0:	d800      	bhi.n	8000cc4 <__aeabi_ddiv+0x140>
 8000cc2:	e1fb      	b.n	80010bc <__aeabi_ddiv+0x538>
 8000cc4:	1a88      	subs	r0, r1, r2
 8000cc6:	9902      	ldr	r1, [sp, #8]
 8000cc8:	f7ff faac 	bl	8000224 <__aeabi_uidivmod>
 8000ccc:	9a03      	ldr	r2, [sp, #12]
 8000cce:	0424      	lsls	r4, r4, #16
 8000cd0:	4342      	muls	r2, r0
 8000cd2:	0409      	lsls	r1, r1, #16
 8000cd4:	0c24      	lsrs	r4, r4, #16
 8000cd6:	0003      	movs	r3, r0
 8000cd8:	430c      	orrs	r4, r1
 8000cda:	42a2      	cmp	r2, r4
 8000cdc:	d906      	bls.n	8000cec <__aeabi_ddiv+0x168>
 8000cde:	9900      	ldr	r1, [sp, #0]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	468c      	mov	ip, r1
 8000ce4:	4464      	add	r4, ip
 8000ce6:	42a1      	cmp	r1, r4
 8000ce8:	d800      	bhi.n	8000cec <__aeabi_ddiv+0x168>
 8000cea:	e1e1      	b.n	80010b0 <__aeabi_ddiv+0x52c>
 8000cec:	1aa0      	subs	r0, r4, r2
 8000cee:	4642      	mov	r2, r8
 8000cf0:	0412      	lsls	r2, r2, #16
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	4693      	mov	fp, r2
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	4659      	mov	r1, fp
 8000cfa:	0c1b      	lsrs	r3, r3, #16
 8000cfc:	001d      	movs	r5, r3
 8000cfe:	9304      	str	r3, [sp, #16]
 8000d00:	040b      	lsls	r3, r1, #16
 8000d02:	4649      	mov	r1, r9
 8000d04:	0409      	lsls	r1, r1, #16
 8000d06:	0c09      	lsrs	r1, r1, #16
 8000d08:	000c      	movs	r4, r1
 8000d0a:	0c1b      	lsrs	r3, r3, #16
 8000d0c:	435c      	muls	r4, r3
 8000d0e:	0c12      	lsrs	r2, r2, #16
 8000d10:	436b      	muls	r3, r5
 8000d12:	4688      	mov	r8, r1
 8000d14:	4351      	muls	r1, r2
 8000d16:	436a      	muls	r2, r5
 8000d18:	0c25      	lsrs	r5, r4, #16
 8000d1a:	46ac      	mov	ip, r5
 8000d1c:	185b      	adds	r3, r3, r1
 8000d1e:	4463      	add	r3, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d903      	bls.n	8000d2c <__aeabi_ddiv+0x1a8>
 8000d24:	2180      	movs	r1, #128	@ 0x80
 8000d26:	0249      	lsls	r1, r1, #9
 8000d28:	468c      	mov	ip, r1
 8000d2a:	4462      	add	r2, ip
 8000d2c:	0c19      	lsrs	r1, r3, #16
 8000d2e:	0424      	lsls	r4, r4, #16
 8000d30:	041b      	lsls	r3, r3, #16
 8000d32:	0c24      	lsrs	r4, r4, #16
 8000d34:	188a      	adds	r2, r1, r2
 8000d36:	191c      	adds	r4, r3, r4
 8000d38:	4290      	cmp	r0, r2
 8000d3a:	d302      	bcc.n	8000d42 <__aeabi_ddiv+0x1be>
 8000d3c:	d116      	bne.n	8000d6c <__aeabi_ddiv+0x1e8>
 8000d3e:	42a7      	cmp	r7, r4
 8000d40:	d214      	bcs.n	8000d6c <__aeabi_ddiv+0x1e8>
 8000d42:	465b      	mov	r3, fp
 8000d44:	9d00      	ldr	r5, [sp, #0]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	444f      	add	r7, r9
 8000d4a:	9305      	str	r3, [sp, #20]
 8000d4c:	454f      	cmp	r7, r9
 8000d4e:	419b      	sbcs	r3, r3
 8000d50:	46ac      	mov	ip, r5
 8000d52:	425b      	negs	r3, r3
 8000d54:	4463      	add	r3, ip
 8000d56:	18c0      	adds	r0, r0, r3
 8000d58:	4285      	cmp	r5, r0
 8000d5a:	d300      	bcc.n	8000d5e <__aeabi_ddiv+0x1da>
 8000d5c:	e1a1      	b.n	80010a2 <__aeabi_ddiv+0x51e>
 8000d5e:	4282      	cmp	r2, r0
 8000d60:	d900      	bls.n	8000d64 <__aeabi_ddiv+0x1e0>
 8000d62:	e1f6      	b.n	8001152 <__aeabi_ddiv+0x5ce>
 8000d64:	d100      	bne.n	8000d68 <__aeabi_ddiv+0x1e4>
 8000d66:	e1f1      	b.n	800114c <__aeabi_ddiv+0x5c8>
 8000d68:	9b05      	ldr	r3, [sp, #20]
 8000d6a:	469b      	mov	fp, r3
 8000d6c:	1b3c      	subs	r4, r7, r4
 8000d6e:	42a7      	cmp	r7, r4
 8000d70:	41bf      	sbcs	r7, r7
 8000d72:	9d00      	ldr	r5, [sp, #0]
 8000d74:	1a80      	subs	r0, r0, r2
 8000d76:	427f      	negs	r7, r7
 8000d78:	1bc0      	subs	r0, r0, r7
 8000d7a:	4285      	cmp	r5, r0
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_ddiv+0x1fc>
 8000d7e:	e1d0      	b.n	8001122 <__aeabi_ddiv+0x59e>
 8000d80:	9902      	ldr	r1, [sp, #8]
 8000d82:	f7ff fa4f 	bl	8000224 <__aeabi_uidivmod>
 8000d86:	9a03      	ldr	r2, [sp, #12]
 8000d88:	040b      	lsls	r3, r1, #16
 8000d8a:	4342      	muls	r2, r0
 8000d8c:	0c21      	lsrs	r1, r4, #16
 8000d8e:	0007      	movs	r7, r0
 8000d90:	4319      	orrs	r1, r3
 8000d92:	428a      	cmp	r2, r1
 8000d94:	d900      	bls.n	8000d98 <__aeabi_ddiv+0x214>
 8000d96:	e178      	b.n	800108a <__aeabi_ddiv+0x506>
 8000d98:	1a88      	subs	r0, r1, r2
 8000d9a:	9902      	ldr	r1, [sp, #8]
 8000d9c:	f7ff fa42 	bl	8000224 <__aeabi_uidivmod>
 8000da0:	9a03      	ldr	r2, [sp, #12]
 8000da2:	0424      	lsls	r4, r4, #16
 8000da4:	4342      	muls	r2, r0
 8000da6:	0409      	lsls	r1, r1, #16
 8000da8:	0c24      	lsrs	r4, r4, #16
 8000daa:	0003      	movs	r3, r0
 8000dac:	430c      	orrs	r4, r1
 8000dae:	42a2      	cmp	r2, r4
 8000db0:	d900      	bls.n	8000db4 <__aeabi_ddiv+0x230>
 8000db2:	e15d      	b.n	8001070 <__aeabi_ddiv+0x4ec>
 8000db4:	4641      	mov	r1, r8
 8000db6:	1aa4      	subs	r4, r4, r2
 8000db8:	043a      	lsls	r2, r7, #16
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	9d04      	ldr	r5, [sp, #16]
 8000dbe:	0413      	lsls	r3, r2, #16
 8000dc0:	0c1b      	lsrs	r3, r3, #16
 8000dc2:	4359      	muls	r1, r3
 8000dc4:	4647      	mov	r7, r8
 8000dc6:	436b      	muls	r3, r5
 8000dc8:	469c      	mov	ip, r3
 8000dca:	0c10      	lsrs	r0, r2, #16
 8000dcc:	4347      	muls	r7, r0
 8000dce:	0c0b      	lsrs	r3, r1, #16
 8000dd0:	44bc      	add	ip, r7
 8000dd2:	4463      	add	r3, ip
 8000dd4:	4368      	muls	r0, r5
 8000dd6:	429f      	cmp	r7, r3
 8000dd8:	d903      	bls.n	8000de2 <__aeabi_ddiv+0x25e>
 8000dda:	2580      	movs	r5, #128	@ 0x80
 8000ddc:	026d      	lsls	r5, r5, #9
 8000dde:	46ac      	mov	ip, r5
 8000de0:	4460      	add	r0, ip
 8000de2:	0c1f      	lsrs	r7, r3, #16
 8000de4:	0409      	lsls	r1, r1, #16
 8000de6:	041b      	lsls	r3, r3, #16
 8000de8:	0c09      	lsrs	r1, r1, #16
 8000dea:	183f      	adds	r7, r7, r0
 8000dec:	185b      	adds	r3, r3, r1
 8000dee:	42bc      	cmp	r4, r7
 8000df0:	d200      	bcs.n	8000df4 <__aeabi_ddiv+0x270>
 8000df2:	e102      	b.n	8000ffa <__aeabi_ddiv+0x476>
 8000df4:	d100      	bne.n	8000df8 <__aeabi_ddiv+0x274>
 8000df6:	e0fd      	b.n	8000ff4 <__aeabi_ddiv+0x470>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	4b43      	ldr	r3, [pc, #268]	@ (8000f0c <__aeabi_ddiv+0x388>)
 8000dfe:	4453      	add	r3, sl
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	dc00      	bgt.n	8000e06 <__aeabi_ddiv+0x282>
 8000e04:	e0ae      	b.n	8000f64 <__aeabi_ddiv+0x3e0>
 8000e06:	0751      	lsls	r1, r2, #29
 8000e08:	d000      	beq.n	8000e0c <__aeabi_ddiv+0x288>
 8000e0a:	e198      	b.n	800113e <__aeabi_ddiv+0x5ba>
 8000e0c:	4659      	mov	r1, fp
 8000e0e:	01c9      	lsls	r1, r1, #7
 8000e10:	d506      	bpl.n	8000e20 <__aeabi_ddiv+0x29c>
 8000e12:	4659      	mov	r1, fp
 8000e14:	4b3e      	ldr	r3, [pc, #248]	@ (8000f10 <__aeabi_ddiv+0x38c>)
 8000e16:	4019      	ands	r1, r3
 8000e18:	2380      	movs	r3, #128	@ 0x80
 8000e1a:	468b      	mov	fp, r1
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	4453      	add	r3, sl
 8000e20:	493c      	ldr	r1, [pc, #240]	@ (8000f14 <__aeabi_ddiv+0x390>)
 8000e22:	428b      	cmp	r3, r1
 8000e24:	dd00      	ble.n	8000e28 <__aeabi_ddiv+0x2a4>
 8000e26:	e71a      	b.n	8000c5e <__aeabi_ddiv+0xda>
 8000e28:	4659      	mov	r1, fp
 8000e2a:	08d2      	lsrs	r2, r2, #3
 8000e2c:	0749      	lsls	r1, r1, #29
 8000e2e:	4311      	orrs	r1, r2
 8000e30:	465a      	mov	r2, fp
 8000e32:	055b      	lsls	r3, r3, #21
 8000e34:	0254      	lsls	r4, r2, #9
 8000e36:	4688      	mov	r8, r1
 8000e38:	0b24      	lsrs	r4, r4, #12
 8000e3a:	0d5b      	lsrs	r3, r3, #21
 8000e3c:	e702      	b.n	8000c44 <__aeabi_ddiv+0xc0>
 8000e3e:	465a      	mov	r2, fp
 8000e40:	9b00      	ldr	r3, [sp, #0]
 8000e42:	431a      	orrs	r2, r3
 8000e44:	d100      	bne.n	8000e48 <__aeabi_ddiv+0x2c4>
 8000e46:	e07e      	b.n	8000f46 <__aeabi_ddiv+0x3c2>
 8000e48:	465b      	mov	r3, fp
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_ddiv+0x2cc>
 8000e4e:	e100      	b.n	8001052 <__aeabi_ddiv+0x4ce>
 8000e50:	4658      	mov	r0, fp
 8000e52:	f001 f9cd 	bl	80021f0 <__clzsi2>
 8000e56:	0002      	movs	r2, r0
 8000e58:	0003      	movs	r3, r0
 8000e5a:	3a0b      	subs	r2, #11
 8000e5c:	271d      	movs	r7, #29
 8000e5e:	9e00      	ldr	r6, [sp, #0]
 8000e60:	1aba      	subs	r2, r7, r2
 8000e62:	0019      	movs	r1, r3
 8000e64:	4658      	mov	r0, fp
 8000e66:	40d6      	lsrs	r6, r2
 8000e68:	3908      	subs	r1, #8
 8000e6a:	4088      	lsls	r0, r1
 8000e6c:	0032      	movs	r2, r6
 8000e6e:	4302      	orrs	r2, r0
 8000e70:	4693      	mov	fp, r2
 8000e72:	9a00      	ldr	r2, [sp, #0]
 8000e74:	408a      	lsls	r2, r1
 8000e76:	4928      	ldr	r1, [pc, #160]	@ (8000f18 <__aeabi_ddiv+0x394>)
 8000e78:	4453      	add	r3, sl
 8000e7a:	468a      	mov	sl, r1
 8000e7c:	449a      	add	sl, r3
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e6c8      	b.n	8000c14 <__aeabi_ddiv+0x90>
 8000e82:	465b      	mov	r3, fp
 8000e84:	4303      	orrs	r3, r0
 8000e86:	4699      	mov	r9, r3
 8000e88:	d056      	beq.n	8000f38 <__aeabi_ddiv+0x3b4>
 8000e8a:	465b      	mov	r3, fp
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d100      	bne.n	8000e92 <__aeabi_ddiv+0x30e>
 8000e90:	e0cd      	b.n	800102e <__aeabi_ddiv+0x4aa>
 8000e92:	4658      	mov	r0, fp
 8000e94:	f001 f9ac 	bl	80021f0 <__clzsi2>
 8000e98:	230b      	movs	r3, #11
 8000e9a:	425b      	negs	r3, r3
 8000e9c:	469c      	mov	ip, r3
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	4484      	add	ip, r0
 8000ea2:	4666      	mov	r6, ip
 8000ea4:	231d      	movs	r3, #29
 8000ea6:	1b9b      	subs	r3, r3, r6
 8000ea8:	0026      	movs	r6, r4
 8000eaa:	0011      	movs	r1, r2
 8000eac:	4658      	mov	r0, fp
 8000eae:	40de      	lsrs	r6, r3
 8000eb0:	3908      	subs	r1, #8
 8000eb2:	4088      	lsls	r0, r1
 8000eb4:	0033      	movs	r3, r6
 8000eb6:	4303      	orrs	r3, r0
 8000eb8:	4699      	mov	r9, r3
 8000eba:	0023      	movs	r3, r4
 8000ebc:	408b      	lsls	r3, r1
 8000ebe:	4698      	mov	r8, r3
 8000ec0:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <__aeabi_ddiv+0x398>)
 8000ec2:	2400      	movs	r4, #0
 8000ec4:	1a9b      	subs	r3, r3, r2
 8000ec6:	469a      	mov	sl, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	9303      	str	r3, [sp, #12]
 8000ecc:	e682      	b.n	8000bd4 <__aeabi_ddiv+0x50>
 8000ece:	465a      	mov	r2, fp
 8000ed0:	4302      	orrs	r2, r0
 8000ed2:	4691      	mov	r9, r2
 8000ed4:	d12a      	bne.n	8000f2c <__aeabi_ddiv+0x3a8>
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	469a      	mov	sl, r3
 8000eda:	2302      	movs	r3, #2
 8000edc:	4690      	mov	r8, r2
 8000ede:	2408      	movs	r4, #8
 8000ee0:	9303      	str	r3, [sp, #12]
 8000ee2:	e677      	b.n	8000bd4 <__aeabi_ddiv+0x50>
 8000ee4:	465a      	mov	r2, fp
 8000ee6:	9b00      	ldr	r3, [sp, #0]
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <__aeabi_ddiv+0x39c>)
 8000eec:	469c      	mov	ip, r3
 8000eee:	44e2      	add	sl, ip
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	d117      	bne.n	8000f24 <__aeabi_ddiv+0x3a0>
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	431c      	orrs	r4, r3
 8000ef8:	2300      	movs	r3, #0
 8000efa:	469b      	mov	fp, r3
 8000efc:	3302      	adds	r3, #2
 8000efe:	e689      	b.n	8000c14 <__aeabi_ddiv+0x90>
 8000f00:	000007ff 	.word	0x000007ff
 8000f04:	fffffc01 	.word	0xfffffc01
 8000f08:	080078c0 	.word	0x080078c0
 8000f0c:	000003ff 	.word	0x000003ff
 8000f10:	feffffff 	.word	0xfeffffff
 8000f14:	000007fe 	.word	0x000007fe
 8000f18:	000003f3 	.word	0x000003f3
 8000f1c:	fffffc0d 	.word	0xfffffc0d
 8000f20:	fffff801 	.word	0xfffff801
 8000f24:	2303      	movs	r3, #3
 8000f26:	0032      	movs	r2, r6
 8000f28:	431c      	orrs	r4, r3
 8000f2a:	e673      	b.n	8000c14 <__aeabi_ddiv+0x90>
 8000f2c:	469a      	mov	sl, r3
 8000f2e:	2303      	movs	r3, #3
 8000f30:	46d9      	mov	r9, fp
 8000f32:	240c      	movs	r4, #12
 8000f34:	9303      	str	r3, [sp, #12]
 8000f36:	e64d      	b.n	8000bd4 <__aeabi_ddiv+0x50>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	4698      	mov	r8, r3
 8000f3c:	469a      	mov	sl, r3
 8000f3e:	3301      	adds	r3, #1
 8000f40:	2404      	movs	r4, #4
 8000f42:	9303      	str	r3, [sp, #12]
 8000f44:	e646      	b.n	8000bd4 <__aeabi_ddiv+0x50>
 8000f46:	2301      	movs	r3, #1
 8000f48:	431c      	orrs	r4, r3
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	469b      	mov	fp, r3
 8000f4e:	3301      	adds	r3, #1
 8000f50:	e660      	b.n	8000c14 <__aeabi_ddiv+0x90>
 8000f52:	2300      	movs	r3, #0
 8000f54:	2480      	movs	r4, #128	@ 0x80
 8000f56:	4698      	mov	r8, r3
 8000f58:	2600      	movs	r6, #0
 8000f5a:	4b92      	ldr	r3, [pc, #584]	@ (80011a4 <__aeabi_ddiv+0x620>)
 8000f5c:	0324      	lsls	r4, r4, #12
 8000f5e:	e671      	b.n	8000c44 <__aeabi_ddiv+0xc0>
 8000f60:	2201      	movs	r2, #1
 8000f62:	4252      	negs	r2, r2
 8000f64:	2101      	movs	r1, #1
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	2938      	cmp	r1, #56	@ 0x38
 8000f6a:	dd00      	ble.n	8000f6e <__aeabi_ddiv+0x3ea>
 8000f6c:	e666      	b.n	8000c3c <__aeabi_ddiv+0xb8>
 8000f6e:	291f      	cmp	r1, #31
 8000f70:	dc00      	bgt.n	8000f74 <__aeabi_ddiv+0x3f0>
 8000f72:	e0ab      	b.n	80010cc <__aeabi_ddiv+0x548>
 8000f74:	201f      	movs	r0, #31
 8000f76:	4240      	negs	r0, r0
 8000f78:	1ac3      	subs	r3, r0, r3
 8000f7a:	4658      	mov	r0, fp
 8000f7c:	40d8      	lsrs	r0, r3
 8000f7e:	0003      	movs	r3, r0
 8000f80:	2920      	cmp	r1, #32
 8000f82:	d004      	beq.n	8000f8e <__aeabi_ddiv+0x40a>
 8000f84:	4658      	mov	r0, fp
 8000f86:	4988      	ldr	r1, [pc, #544]	@ (80011a8 <__aeabi_ddiv+0x624>)
 8000f88:	4451      	add	r1, sl
 8000f8a:	4088      	lsls	r0, r1
 8000f8c:	4302      	orrs	r2, r0
 8000f8e:	1e51      	subs	r1, r2, #1
 8000f90:	418a      	sbcs	r2, r1
 8000f92:	431a      	orrs	r2, r3
 8000f94:	2307      	movs	r3, #7
 8000f96:	0019      	movs	r1, r3
 8000f98:	2400      	movs	r4, #0
 8000f9a:	4011      	ands	r1, r2
 8000f9c:	4213      	tst	r3, r2
 8000f9e:	d00c      	beq.n	8000fba <__aeabi_ddiv+0x436>
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d100      	bne.n	8000faa <__aeabi_ddiv+0x426>
 8000fa8:	e0f9      	b.n	800119e <__aeabi_ddiv+0x61a>
 8000faa:	1d11      	adds	r1, r2, #4
 8000fac:	4291      	cmp	r1, r2
 8000fae:	419b      	sbcs	r3, r3
 8000fb0:	000a      	movs	r2, r1
 8000fb2:	425b      	negs	r3, r3
 8000fb4:	0759      	lsls	r1, r3, #29
 8000fb6:	025b      	lsls	r3, r3, #9
 8000fb8:	0b1c      	lsrs	r4, r3, #12
 8000fba:	08d2      	lsrs	r2, r2, #3
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	4690      	mov	r8, r2
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e63f      	b.n	8000c44 <__aeabi_ddiv+0xc0>
 8000fc4:	2480      	movs	r4, #128	@ 0x80
 8000fc6:	464b      	mov	r3, r9
 8000fc8:	0324      	lsls	r4, r4, #12
 8000fca:	4223      	tst	r3, r4
 8000fcc:	d009      	beq.n	8000fe2 <__aeabi_ddiv+0x45e>
 8000fce:	465b      	mov	r3, fp
 8000fd0:	4223      	tst	r3, r4
 8000fd2:	d106      	bne.n	8000fe2 <__aeabi_ddiv+0x45e>
 8000fd4:	431c      	orrs	r4, r3
 8000fd6:	0324      	lsls	r4, r4, #12
 8000fd8:	002e      	movs	r6, r5
 8000fda:	4690      	mov	r8, r2
 8000fdc:	4b71      	ldr	r3, [pc, #452]	@ (80011a4 <__aeabi_ddiv+0x620>)
 8000fde:	0b24      	lsrs	r4, r4, #12
 8000fe0:	e630      	b.n	8000c44 <__aeabi_ddiv+0xc0>
 8000fe2:	2480      	movs	r4, #128	@ 0x80
 8000fe4:	464b      	mov	r3, r9
 8000fe6:	0324      	lsls	r4, r4, #12
 8000fe8:	431c      	orrs	r4, r3
 8000fea:	0324      	lsls	r4, r4, #12
 8000fec:	9e02      	ldr	r6, [sp, #8]
 8000fee:	4b6d      	ldr	r3, [pc, #436]	@ (80011a4 <__aeabi_ddiv+0x620>)
 8000ff0:	0b24      	lsrs	r4, r4, #12
 8000ff2:	e627      	b.n	8000c44 <__aeabi_ddiv+0xc0>
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0x476>
 8000ff8:	e700      	b.n	8000dfc <__aeabi_ddiv+0x278>
 8000ffa:	9800      	ldr	r0, [sp, #0]
 8000ffc:	1e51      	subs	r1, r2, #1
 8000ffe:	4684      	mov	ip, r0
 8001000:	4464      	add	r4, ip
 8001002:	4284      	cmp	r4, r0
 8001004:	d200      	bcs.n	8001008 <__aeabi_ddiv+0x484>
 8001006:	e084      	b.n	8001112 <__aeabi_ddiv+0x58e>
 8001008:	42bc      	cmp	r4, r7
 800100a:	d200      	bcs.n	800100e <__aeabi_ddiv+0x48a>
 800100c:	e0ae      	b.n	800116c <__aeabi_ddiv+0x5e8>
 800100e:	d100      	bne.n	8001012 <__aeabi_ddiv+0x48e>
 8001010:	e0c1      	b.n	8001196 <__aeabi_ddiv+0x612>
 8001012:	000a      	movs	r2, r1
 8001014:	e6f0      	b.n	8000df8 <__aeabi_ddiv+0x274>
 8001016:	4542      	cmp	r2, r8
 8001018:	d900      	bls.n	800101c <__aeabi_ddiv+0x498>
 800101a:	e62c      	b.n	8000c76 <__aeabi_ddiv+0xf2>
 800101c:	464b      	mov	r3, r9
 800101e:	07dc      	lsls	r4, r3, #31
 8001020:	0858      	lsrs	r0, r3, #1
 8001022:	4643      	mov	r3, r8
 8001024:	085b      	lsrs	r3, r3, #1
 8001026:	431c      	orrs	r4, r3
 8001028:	4643      	mov	r3, r8
 800102a:	07df      	lsls	r7, r3, #31
 800102c:	e62a      	b.n	8000c84 <__aeabi_ddiv+0x100>
 800102e:	f001 f8df 	bl	80021f0 <__clzsi2>
 8001032:	2315      	movs	r3, #21
 8001034:	469c      	mov	ip, r3
 8001036:	4484      	add	ip, r0
 8001038:	0002      	movs	r2, r0
 800103a:	4663      	mov	r3, ip
 800103c:	3220      	adds	r2, #32
 800103e:	2b1c      	cmp	r3, #28
 8001040:	dc00      	bgt.n	8001044 <__aeabi_ddiv+0x4c0>
 8001042:	e72e      	b.n	8000ea2 <__aeabi_ddiv+0x31e>
 8001044:	0023      	movs	r3, r4
 8001046:	3808      	subs	r0, #8
 8001048:	4083      	lsls	r3, r0
 800104a:	4699      	mov	r9, r3
 800104c:	2300      	movs	r3, #0
 800104e:	4698      	mov	r8, r3
 8001050:	e736      	b.n	8000ec0 <__aeabi_ddiv+0x33c>
 8001052:	f001 f8cd 	bl	80021f0 <__clzsi2>
 8001056:	0002      	movs	r2, r0
 8001058:	0003      	movs	r3, r0
 800105a:	3215      	adds	r2, #21
 800105c:	3320      	adds	r3, #32
 800105e:	2a1c      	cmp	r2, #28
 8001060:	dc00      	bgt.n	8001064 <__aeabi_ddiv+0x4e0>
 8001062:	e6fb      	b.n	8000e5c <__aeabi_ddiv+0x2d8>
 8001064:	9900      	ldr	r1, [sp, #0]
 8001066:	3808      	subs	r0, #8
 8001068:	4081      	lsls	r1, r0
 800106a:	2200      	movs	r2, #0
 800106c:	468b      	mov	fp, r1
 800106e:	e702      	b.n	8000e76 <__aeabi_ddiv+0x2f2>
 8001070:	9900      	ldr	r1, [sp, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	468c      	mov	ip, r1
 8001076:	4464      	add	r4, ip
 8001078:	42a1      	cmp	r1, r4
 800107a:	d900      	bls.n	800107e <__aeabi_ddiv+0x4fa>
 800107c:	e69a      	b.n	8000db4 <__aeabi_ddiv+0x230>
 800107e:	42a2      	cmp	r2, r4
 8001080:	d800      	bhi.n	8001084 <__aeabi_ddiv+0x500>
 8001082:	e697      	b.n	8000db4 <__aeabi_ddiv+0x230>
 8001084:	1e83      	subs	r3, r0, #2
 8001086:	4464      	add	r4, ip
 8001088:	e694      	b.n	8000db4 <__aeabi_ddiv+0x230>
 800108a:	46ac      	mov	ip, r5
 800108c:	4461      	add	r1, ip
 800108e:	3f01      	subs	r7, #1
 8001090:	428d      	cmp	r5, r1
 8001092:	d900      	bls.n	8001096 <__aeabi_ddiv+0x512>
 8001094:	e680      	b.n	8000d98 <__aeabi_ddiv+0x214>
 8001096:	428a      	cmp	r2, r1
 8001098:	d800      	bhi.n	800109c <__aeabi_ddiv+0x518>
 800109a:	e67d      	b.n	8000d98 <__aeabi_ddiv+0x214>
 800109c:	1e87      	subs	r7, r0, #2
 800109e:	4461      	add	r1, ip
 80010a0:	e67a      	b.n	8000d98 <__aeabi_ddiv+0x214>
 80010a2:	4285      	cmp	r5, r0
 80010a4:	d000      	beq.n	80010a8 <__aeabi_ddiv+0x524>
 80010a6:	e65f      	b.n	8000d68 <__aeabi_ddiv+0x1e4>
 80010a8:	45b9      	cmp	r9, r7
 80010aa:	d900      	bls.n	80010ae <__aeabi_ddiv+0x52a>
 80010ac:	e65c      	b.n	8000d68 <__aeabi_ddiv+0x1e4>
 80010ae:	e656      	b.n	8000d5e <__aeabi_ddiv+0x1da>
 80010b0:	42a2      	cmp	r2, r4
 80010b2:	d800      	bhi.n	80010b6 <__aeabi_ddiv+0x532>
 80010b4:	e61a      	b.n	8000cec <__aeabi_ddiv+0x168>
 80010b6:	1e83      	subs	r3, r0, #2
 80010b8:	4464      	add	r4, ip
 80010ba:	e617      	b.n	8000cec <__aeabi_ddiv+0x168>
 80010bc:	428a      	cmp	r2, r1
 80010be:	d800      	bhi.n	80010c2 <__aeabi_ddiv+0x53e>
 80010c0:	e600      	b.n	8000cc4 <__aeabi_ddiv+0x140>
 80010c2:	46ac      	mov	ip, r5
 80010c4:	1e83      	subs	r3, r0, #2
 80010c6:	4698      	mov	r8, r3
 80010c8:	4461      	add	r1, ip
 80010ca:	e5fb      	b.n	8000cc4 <__aeabi_ddiv+0x140>
 80010cc:	4837      	ldr	r0, [pc, #220]	@ (80011ac <__aeabi_ddiv+0x628>)
 80010ce:	0014      	movs	r4, r2
 80010d0:	4450      	add	r0, sl
 80010d2:	4082      	lsls	r2, r0
 80010d4:	465b      	mov	r3, fp
 80010d6:	0017      	movs	r7, r2
 80010d8:	4083      	lsls	r3, r0
 80010da:	40cc      	lsrs	r4, r1
 80010dc:	1e7a      	subs	r2, r7, #1
 80010de:	4197      	sbcs	r7, r2
 80010e0:	4323      	orrs	r3, r4
 80010e2:	433b      	orrs	r3, r7
 80010e4:	001a      	movs	r2, r3
 80010e6:	465b      	mov	r3, fp
 80010e8:	40cb      	lsrs	r3, r1
 80010ea:	0751      	lsls	r1, r2, #29
 80010ec:	d009      	beq.n	8001102 <__aeabi_ddiv+0x57e>
 80010ee:	210f      	movs	r1, #15
 80010f0:	4011      	ands	r1, r2
 80010f2:	2904      	cmp	r1, #4
 80010f4:	d005      	beq.n	8001102 <__aeabi_ddiv+0x57e>
 80010f6:	1d11      	adds	r1, r2, #4
 80010f8:	4291      	cmp	r1, r2
 80010fa:	4192      	sbcs	r2, r2
 80010fc:	4252      	negs	r2, r2
 80010fe:	189b      	adds	r3, r3, r2
 8001100:	000a      	movs	r2, r1
 8001102:	0219      	lsls	r1, r3, #8
 8001104:	d400      	bmi.n	8001108 <__aeabi_ddiv+0x584>
 8001106:	e755      	b.n	8000fb4 <__aeabi_ddiv+0x430>
 8001108:	2200      	movs	r2, #0
 800110a:	2301      	movs	r3, #1
 800110c:	2400      	movs	r4, #0
 800110e:	4690      	mov	r8, r2
 8001110:	e598      	b.n	8000c44 <__aeabi_ddiv+0xc0>
 8001112:	000a      	movs	r2, r1
 8001114:	42bc      	cmp	r4, r7
 8001116:	d000      	beq.n	800111a <__aeabi_ddiv+0x596>
 8001118:	e66e      	b.n	8000df8 <__aeabi_ddiv+0x274>
 800111a:	454b      	cmp	r3, r9
 800111c:	d000      	beq.n	8001120 <__aeabi_ddiv+0x59c>
 800111e:	e66b      	b.n	8000df8 <__aeabi_ddiv+0x274>
 8001120:	e66c      	b.n	8000dfc <__aeabi_ddiv+0x278>
 8001122:	4b23      	ldr	r3, [pc, #140]	@ (80011b0 <__aeabi_ddiv+0x62c>)
 8001124:	4a23      	ldr	r2, [pc, #140]	@ (80011b4 <__aeabi_ddiv+0x630>)
 8001126:	4453      	add	r3, sl
 8001128:	4592      	cmp	sl, r2
 800112a:	da00      	bge.n	800112e <__aeabi_ddiv+0x5aa>
 800112c:	e718      	b.n	8000f60 <__aeabi_ddiv+0x3dc>
 800112e:	2101      	movs	r1, #1
 8001130:	4249      	negs	r1, r1
 8001132:	1d0a      	adds	r2, r1, #4
 8001134:	428a      	cmp	r2, r1
 8001136:	4189      	sbcs	r1, r1
 8001138:	4249      	negs	r1, r1
 800113a:	448b      	add	fp, r1
 800113c:	e666      	b.n	8000e0c <__aeabi_ddiv+0x288>
 800113e:	210f      	movs	r1, #15
 8001140:	4011      	ands	r1, r2
 8001142:	2904      	cmp	r1, #4
 8001144:	d100      	bne.n	8001148 <__aeabi_ddiv+0x5c4>
 8001146:	e661      	b.n	8000e0c <__aeabi_ddiv+0x288>
 8001148:	0011      	movs	r1, r2
 800114a:	e7f2      	b.n	8001132 <__aeabi_ddiv+0x5ae>
 800114c:	42bc      	cmp	r4, r7
 800114e:	d800      	bhi.n	8001152 <__aeabi_ddiv+0x5ce>
 8001150:	e60a      	b.n	8000d68 <__aeabi_ddiv+0x1e4>
 8001152:	2302      	movs	r3, #2
 8001154:	425b      	negs	r3, r3
 8001156:	469c      	mov	ip, r3
 8001158:	9900      	ldr	r1, [sp, #0]
 800115a:	444f      	add	r7, r9
 800115c:	454f      	cmp	r7, r9
 800115e:	419b      	sbcs	r3, r3
 8001160:	44e3      	add	fp, ip
 8001162:	468c      	mov	ip, r1
 8001164:	425b      	negs	r3, r3
 8001166:	4463      	add	r3, ip
 8001168:	18c0      	adds	r0, r0, r3
 800116a:	e5ff      	b.n	8000d6c <__aeabi_ddiv+0x1e8>
 800116c:	4649      	mov	r1, r9
 800116e:	9d00      	ldr	r5, [sp, #0]
 8001170:	0048      	lsls	r0, r1, #1
 8001172:	4548      	cmp	r0, r9
 8001174:	4189      	sbcs	r1, r1
 8001176:	46ac      	mov	ip, r5
 8001178:	4249      	negs	r1, r1
 800117a:	4461      	add	r1, ip
 800117c:	4681      	mov	r9, r0
 800117e:	3a02      	subs	r2, #2
 8001180:	1864      	adds	r4, r4, r1
 8001182:	e7c7      	b.n	8001114 <__aeabi_ddiv+0x590>
 8001184:	2480      	movs	r4, #128	@ 0x80
 8001186:	465b      	mov	r3, fp
 8001188:	0324      	lsls	r4, r4, #12
 800118a:	431c      	orrs	r4, r3
 800118c:	0324      	lsls	r4, r4, #12
 800118e:	4690      	mov	r8, r2
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <__aeabi_ddiv+0x620>)
 8001192:	0b24      	lsrs	r4, r4, #12
 8001194:	e556      	b.n	8000c44 <__aeabi_ddiv+0xc0>
 8001196:	4599      	cmp	r9, r3
 8001198:	d3e8      	bcc.n	800116c <__aeabi_ddiv+0x5e8>
 800119a:	000a      	movs	r2, r1
 800119c:	e7bd      	b.n	800111a <__aeabi_ddiv+0x596>
 800119e:	2300      	movs	r3, #0
 80011a0:	e708      	b.n	8000fb4 <__aeabi_ddiv+0x430>
 80011a2:	46c0      	nop			@ (mov r8, r8)
 80011a4:	000007ff 	.word	0x000007ff
 80011a8:	0000043e 	.word	0x0000043e
 80011ac:	0000041e 	.word	0x0000041e
 80011b0:	000003ff 	.word	0x000003ff
 80011b4:	fffffc02 	.word	0xfffffc02

080011b8 <__eqdf2>:
 80011b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ba:	4657      	mov	r7, sl
 80011bc:	46de      	mov	lr, fp
 80011be:	464e      	mov	r6, r9
 80011c0:	4645      	mov	r5, r8
 80011c2:	b5e0      	push	{r5, r6, r7, lr}
 80011c4:	000d      	movs	r5, r1
 80011c6:	0004      	movs	r4, r0
 80011c8:	0fe8      	lsrs	r0, r5, #31
 80011ca:	4683      	mov	fp, r0
 80011cc:	0309      	lsls	r1, r1, #12
 80011ce:	0fd8      	lsrs	r0, r3, #31
 80011d0:	0b09      	lsrs	r1, r1, #12
 80011d2:	4682      	mov	sl, r0
 80011d4:	4819      	ldr	r0, [pc, #100]	@ (800123c <__eqdf2+0x84>)
 80011d6:	468c      	mov	ip, r1
 80011d8:	031f      	lsls	r7, r3, #12
 80011da:	0069      	lsls	r1, r5, #1
 80011dc:	005e      	lsls	r6, r3, #1
 80011de:	0d49      	lsrs	r1, r1, #21
 80011e0:	0b3f      	lsrs	r7, r7, #12
 80011e2:	0d76      	lsrs	r6, r6, #21
 80011e4:	4281      	cmp	r1, r0
 80011e6:	d018      	beq.n	800121a <__eqdf2+0x62>
 80011e8:	4286      	cmp	r6, r0
 80011ea:	d00f      	beq.n	800120c <__eqdf2+0x54>
 80011ec:	2001      	movs	r0, #1
 80011ee:	42b1      	cmp	r1, r6
 80011f0:	d10d      	bne.n	800120e <__eqdf2+0x56>
 80011f2:	45bc      	cmp	ip, r7
 80011f4:	d10b      	bne.n	800120e <__eqdf2+0x56>
 80011f6:	4294      	cmp	r4, r2
 80011f8:	d109      	bne.n	800120e <__eqdf2+0x56>
 80011fa:	45d3      	cmp	fp, sl
 80011fc:	d01c      	beq.n	8001238 <__eqdf2+0x80>
 80011fe:	2900      	cmp	r1, #0
 8001200:	d105      	bne.n	800120e <__eqdf2+0x56>
 8001202:	4660      	mov	r0, ip
 8001204:	4320      	orrs	r0, r4
 8001206:	1e43      	subs	r3, r0, #1
 8001208:	4198      	sbcs	r0, r3
 800120a:	e000      	b.n	800120e <__eqdf2+0x56>
 800120c:	2001      	movs	r0, #1
 800120e:	bcf0      	pop	{r4, r5, r6, r7}
 8001210:	46bb      	mov	fp, r7
 8001212:	46b2      	mov	sl, r6
 8001214:	46a9      	mov	r9, r5
 8001216:	46a0      	mov	r8, r4
 8001218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800121a:	2001      	movs	r0, #1
 800121c:	428e      	cmp	r6, r1
 800121e:	d1f6      	bne.n	800120e <__eqdf2+0x56>
 8001220:	4661      	mov	r1, ip
 8001222:	4339      	orrs	r1, r7
 8001224:	000f      	movs	r7, r1
 8001226:	4317      	orrs	r7, r2
 8001228:	4327      	orrs	r7, r4
 800122a:	d1f0      	bne.n	800120e <__eqdf2+0x56>
 800122c:	465b      	mov	r3, fp
 800122e:	4652      	mov	r2, sl
 8001230:	1a98      	subs	r0, r3, r2
 8001232:	1e43      	subs	r3, r0, #1
 8001234:	4198      	sbcs	r0, r3
 8001236:	e7ea      	b.n	800120e <__eqdf2+0x56>
 8001238:	2000      	movs	r0, #0
 800123a:	e7e8      	b.n	800120e <__eqdf2+0x56>
 800123c:	000007ff 	.word	0x000007ff

08001240 <__gedf2>:
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	4657      	mov	r7, sl
 8001244:	464e      	mov	r6, r9
 8001246:	4645      	mov	r5, r8
 8001248:	46de      	mov	lr, fp
 800124a:	b5e0      	push	{r5, r6, r7, lr}
 800124c:	000d      	movs	r5, r1
 800124e:	030f      	lsls	r7, r1, #12
 8001250:	0b39      	lsrs	r1, r7, #12
 8001252:	b083      	sub	sp, #12
 8001254:	0004      	movs	r4, r0
 8001256:	4680      	mov	r8, r0
 8001258:	9101      	str	r1, [sp, #4]
 800125a:	0058      	lsls	r0, r3, #1
 800125c:	0fe9      	lsrs	r1, r5, #31
 800125e:	4f31      	ldr	r7, [pc, #196]	@ (8001324 <__gedf2+0xe4>)
 8001260:	0d40      	lsrs	r0, r0, #21
 8001262:	468c      	mov	ip, r1
 8001264:	006e      	lsls	r6, r5, #1
 8001266:	0319      	lsls	r1, r3, #12
 8001268:	4682      	mov	sl, r0
 800126a:	4691      	mov	r9, r2
 800126c:	0d76      	lsrs	r6, r6, #21
 800126e:	0b09      	lsrs	r1, r1, #12
 8001270:	0fd8      	lsrs	r0, r3, #31
 8001272:	42be      	cmp	r6, r7
 8001274:	d01f      	beq.n	80012b6 <__gedf2+0x76>
 8001276:	45ba      	cmp	sl, r7
 8001278:	d00f      	beq.n	800129a <__gedf2+0x5a>
 800127a:	2e00      	cmp	r6, #0
 800127c:	d12f      	bne.n	80012de <__gedf2+0x9e>
 800127e:	4655      	mov	r5, sl
 8001280:	9e01      	ldr	r6, [sp, #4]
 8001282:	4334      	orrs	r4, r6
 8001284:	2d00      	cmp	r5, #0
 8001286:	d127      	bne.n	80012d8 <__gedf2+0x98>
 8001288:	430a      	orrs	r2, r1
 800128a:	d03a      	beq.n	8001302 <__gedf2+0xc2>
 800128c:	2c00      	cmp	r4, #0
 800128e:	d145      	bne.n	800131c <__gedf2+0xdc>
 8001290:	2800      	cmp	r0, #0
 8001292:	d11a      	bne.n	80012ca <__gedf2+0x8a>
 8001294:	2001      	movs	r0, #1
 8001296:	4240      	negs	r0, r0
 8001298:	e017      	b.n	80012ca <__gedf2+0x8a>
 800129a:	4311      	orrs	r1, r2
 800129c:	d13b      	bne.n	8001316 <__gedf2+0xd6>
 800129e:	2e00      	cmp	r6, #0
 80012a0:	d102      	bne.n	80012a8 <__gedf2+0x68>
 80012a2:	9f01      	ldr	r7, [sp, #4]
 80012a4:	4327      	orrs	r7, r4
 80012a6:	d0f3      	beq.n	8001290 <__gedf2+0x50>
 80012a8:	4584      	cmp	ip, r0
 80012aa:	d109      	bne.n	80012c0 <__gedf2+0x80>
 80012ac:	4663      	mov	r3, ip
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <__gedf2+0x54>
 80012b2:	4660      	mov	r0, ip
 80012b4:	e009      	b.n	80012ca <__gedf2+0x8a>
 80012b6:	9f01      	ldr	r7, [sp, #4]
 80012b8:	4327      	orrs	r7, r4
 80012ba:	d12c      	bne.n	8001316 <__gedf2+0xd6>
 80012bc:	45b2      	cmp	sl, r6
 80012be:	d024      	beq.n	800130a <__gedf2+0xca>
 80012c0:	4663      	mov	r3, ip
 80012c2:	2002      	movs	r0, #2
 80012c4:	3b01      	subs	r3, #1
 80012c6:	4018      	ands	r0, r3
 80012c8:	3801      	subs	r0, #1
 80012ca:	b003      	add	sp, #12
 80012cc:	bcf0      	pop	{r4, r5, r6, r7}
 80012ce:	46bb      	mov	fp, r7
 80012d0:	46b2      	mov	sl, r6
 80012d2:	46a9      	mov	r9, r5
 80012d4:	46a0      	mov	r8, r4
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d8:	2c00      	cmp	r4, #0
 80012da:	d0d9      	beq.n	8001290 <__gedf2+0x50>
 80012dc:	e7e4      	b.n	80012a8 <__gedf2+0x68>
 80012de:	4654      	mov	r4, sl
 80012e0:	2c00      	cmp	r4, #0
 80012e2:	d0ed      	beq.n	80012c0 <__gedf2+0x80>
 80012e4:	4584      	cmp	ip, r0
 80012e6:	d1eb      	bne.n	80012c0 <__gedf2+0x80>
 80012e8:	4556      	cmp	r6, sl
 80012ea:	dce9      	bgt.n	80012c0 <__gedf2+0x80>
 80012ec:	dbde      	blt.n	80012ac <__gedf2+0x6c>
 80012ee:	9b01      	ldr	r3, [sp, #4]
 80012f0:	428b      	cmp	r3, r1
 80012f2:	d8e5      	bhi.n	80012c0 <__gedf2+0x80>
 80012f4:	d1da      	bne.n	80012ac <__gedf2+0x6c>
 80012f6:	45c8      	cmp	r8, r9
 80012f8:	d8e2      	bhi.n	80012c0 <__gedf2+0x80>
 80012fa:	2000      	movs	r0, #0
 80012fc:	45c8      	cmp	r8, r9
 80012fe:	d2e4      	bcs.n	80012ca <__gedf2+0x8a>
 8001300:	e7d4      	b.n	80012ac <__gedf2+0x6c>
 8001302:	2000      	movs	r0, #0
 8001304:	2c00      	cmp	r4, #0
 8001306:	d0e0      	beq.n	80012ca <__gedf2+0x8a>
 8001308:	e7da      	b.n	80012c0 <__gedf2+0x80>
 800130a:	4311      	orrs	r1, r2
 800130c:	d103      	bne.n	8001316 <__gedf2+0xd6>
 800130e:	4584      	cmp	ip, r0
 8001310:	d1d6      	bne.n	80012c0 <__gedf2+0x80>
 8001312:	2000      	movs	r0, #0
 8001314:	e7d9      	b.n	80012ca <__gedf2+0x8a>
 8001316:	2002      	movs	r0, #2
 8001318:	4240      	negs	r0, r0
 800131a:	e7d6      	b.n	80012ca <__gedf2+0x8a>
 800131c:	4584      	cmp	ip, r0
 800131e:	d0e6      	beq.n	80012ee <__gedf2+0xae>
 8001320:	e7ce      	b.n	80012c0 <__gedf2+0x80>
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	000007ff 	.word	0x000007ff

08001328 <__ledf2>:
 8001328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132a:	4657      	mov	r7, sl
 800132c:	464e      	mov	r6, r9
 800132e:	4645      	mov	r5, r8
 8001330:	46de      	mov	lr, fp
 8001332:	b5e0      	push	{r5, r6, r7, lr}
 8001334:	000d      	movs	r5, r1
 8001336:	030f      	lsls	r7, r1, #12
 8001338:	0004      	movs	r4, r0
 800133a:	4680      	mov	r8, r0
 800133c:	0fe8      	lsrs	r0, r5, #31
 800133e:	0b39      	lsrs	r1, r7, #12
 8001340:	4684      	mov	ip, r0
 8001342:	b083      	sub	sp, #12
 8001344:	0058      	lsls	r0, r3, #1
 8001346:	4f30      	ldr	r7, [pc, #192]	@ (8001408 <__ledf2+0xe0>)
 8001348:	0d40      	lsrs	r0, r0, #21
 800134a:	9101      	str	r1, [sp, #4]
 800134c:	031e      	lsls	r6, r3, #12
 800134e:	0069      	lsls	r1, r5, #1
 8001350:	4682      	mov	sl, r0
 8001352:	4691      	mov	r9, r2
 8001354:	0d49      	lsrs	r1, r1, #21
 8001356:	0b36      	lsrs	r6, r6, #12
 8001358:	0fd8      	lsrs	r0, r3, #31
 800135a:	42b9      	cmp	r1, r7
 800135c:	d020      	beq.n	80013a0 <__ledf2+0x78>
 800135e:	45ba      	cmp	sl, r7
 8001360:	d00f      	beq.n	8001382 <__ledf2+0x5a>
 8001362:	2900      	cmp	r1, #0
 8001364:	d12b      	bne.n	80013be <__ledf2+0x96>
 8001366:	9901      	ldr	r1, [sp, #4]
 8001368:	430c      	orrs	r4, r1
 800136a:	4651      	mov	r1, sl
 800136c:	2900      	cmp	r1, #0
 800136e:	d137      	bne.n	80013e0 <__ledf2+0xb8>
 8001370:	4332      	orrs	r2, r6
 8001372:	d038      	beq.n	80013e6 <__ledf2+0xbe>
 8001374:	2c00      	cmp	r4, #0
 8001376:	d144      	bne.n	8001402 <__ledf2+0xda>
 8001378:	2800      	cmp	r0, #0
 800137a:	d119      	bne.n	80013b0 <__ledf2+0x88>
 800137c:	2001      	movs	r0, #1
 800137e:	4240      	negs	r0, r0
 8001380:	e016      	b.n	80013b0 <__ledf2+0x88>
 8001382:	4316      	orrs	r6, r2
 8001384:	d113      	bne.n	80013ae <__ledf2+0x86>
 8001386:	2900      	cmp	r1, #0
 8001388:	d102      	bne.n	8001390 <__ledf2+0x68>
 800138a:	9f01      	ldr	r7, [sp, #4]
 800138c:	4327      	orrs	r7, r4
 800138e:	d0f3      	beq.n	8001378 <__ledf2+0x50>
 8001390:	4584      	cmp	ip, r0
 8001392:	d020      	beq.n	80013d6 <__ledf2+0xae>
 8001394:	4663      	mov	r3, ip
 8001396:	2002      	movs	r0, #2
 8001398:	3b01      	subs	r3, #1
 800139a:	4018      	ands	r0, r3
 800139c:	3801      	subs	r0, #1
 800139e:	e007      	b.n	80013b0 <__ledf2+0x88>
 80013a0:	9f01      	ldr	r7, [sp, #4]
 80013a2:	4327      	orrs	r7, r4
 80013a4:	d103      	bne.n	80013ae <__ledf2+0x86>
 80013a6:	458a      	cmp	sl, r1
 80013a8:	d1f4      	bne.n	8001394 <__ledf2+0x6c>
 80013aa:	4316      	orrs	r6, r2
 80013ac:	d01f      	beq.n	80013ee <__ledf2+0xc6>
 80013ae:	2002      	movs	r0, #2
 80013b0:	b003      	add	sp, #12
 80013b2:	bcf0      	pop	{r4, r5, r6, r7}
 80013b4:	46bb      	mov	fp, r7
 80013b6:	46b2      	mov	sl, r6
 80013b8:	46a9      	mov	r9, r5
 80013ba:	46a0      	mov	r8, r4
 80013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013be:	4654      	mov	r4, sl
 80013c0:	2c00      	cmp	r4, #0
 80013c2:	d0e7      	beq.n	8001394 <__ledf2+0x6c>
 80013c4:	4584      	cmp	ip, r0
 80013c6:	d1e5      	bne.n	8001394 <__ledf2+0x6c>
 80013c8:	4551      	cmp	r1, sl
 80013ca:	dce3      	bgt.n	8001394 <__ledf2+0x6c>
 80013cc:	db03      	blt.n	80013d6 <__ledf2+0xae>
 80013ce:	9b01      	ldr	r3, [sp, #4]
 80013d0:	42b3      	cmp	r3, r6
 80013d2:	d8df      	bhi.n	8001394 <__ledf2+0x6c>
 80013d4:	d00f      	beq.n	80013f6 <__ledf2+0xce>
 80013d6:	4663      	mov	r3, ip
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0cf      	beq.n	800137c <__ledf2+0x54>
 80013dc:	4660      	mov	r0, ip
 80013de:	e7e7      	b.n	80013b0 <__ledf2+0x88>
 80013e0:	2c00      	cmp	r4, #0
 80013e2:	d0c9      	beq.n	8001378 <__ledf2+0x50>
 80013e4:	e7d4      	b.n	8001390 <__ledf2+0x68>
 80013e6:	2000      	movs	r0, #0
 80013e8:	2c00      	cmp	r4, #0
 80013ea:	d0e1      	beq.n	80013b0 <__ledf2+0x88>
 80013ec:	e7d2      	b.n	8001394 <__ledf2+0x6c>
 80013ee:	4584      	cmp	ip, r0
 80013f0:	d1d0      	bne.n	8001394 <__ledf2+0x6c>
 80013f2:	2000      	movs	r0, #0
 80013f4:	e7dc      	b.n	80013b0 <__ledf2+0x88>
 80013f6:	45c8      	cmp	r8, r9
 80013f8:	d8cc      	bhi.n	8001394 <__ledf2+0x6c>
 80013fa:	2000      	movs	r0, #0
 80013fc:	45c8      	cmp	r8, r9
 80013fe:	d2d7      	bcs.n	80013b0 <__ledf2+0x88>
 8001400:	e7e9      	b.n	80013d6 <__ledf2+0xae>
 8001402:	4584      	cmp	ip, r0
 8001404:	d0e3      	beq.n	80013ce <__ledf2+0xa6>
 8001406:	e7c5      	b.n	8001394 <__ledf2+0x6c>
 8001408:	000007ff 	.word	0x000007ff

0800140c <__aeabi_dmul>:
 800140c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140e:	4657      	mov	r7, sl
 8001410:	46de      	mov	lr, fp
 8001412:	464e      	mov	r6, r9
 8001414:	4645      	mov	r5, r8
 8001416:	b5e0      	push	{r5, r6, r7, lr}
 8001418:	001f      	movs	r7, r3
 800141a:	030b      	lsls	r3, r1, #12
 800141c:	0b1b      	lsrs	r3, r3, #12
 800141e:	0016      	movs	r6, r2
 8001420:	469a      	mov	sl, r3
 8001422:	0fca      	lsrs	r2, r1, #31
 8001424:	004b      	lsls	r3, r1, #1
 8001426:	0004      	movs	r4, r0
 8001428:	4693      	mov	fp, r2
 800142a:	b087      	sub	sp, #28
 800142c:	0d5b      	lsrs	r3, r3, #21
 800142e:	d100      	bne.n	8001432 <__aeabi_dmul+0x26>
 8001430:	e0d5      	b.n	80015de <__aeabi_dmul+0x1d2>
 8001432:	4abb      	ldr	r2, [pc, #748]	@ (8001720 <__aeabi_dmul+0x314>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d100      	bne.n	800143a <__aeabi_dmul+0x2e>
 8001438:	e0f8      	b.n	800162c <__aeabi_dmul+0x220>
 800143a:	4651      	mov	r1, sl
 800143c:	0f42      	lsrs	r2, r0, #29
 800143e:	00c9      	lsls	r1, r1, #3
 8001440:	430a      	orrs	r2, r1
 8001442:	2180      	movs	r1, #128	@ 0x80
 8001444:	0409      	lsls	r1, r1, #16
 8001446:	4311      	orrs	r1, r2
 8001448:	00c2      	lsls	r2, r0, #3
 800144a:	4691      	mov	r9, r2
 800144c:	4ab5      	ldr	r2, [pc, #724]	@ (8001724 <__aeabi_dmul+0x318>)
 800144e:	468a      	mov	sl, r1
 8001450:	189d      	adds	r5, r3, r2
 8001452:	2300      	movs	r3, #0
 8001454:	4698      	mov	r8, r3
 8001456:	9302      	str	r3, [sp, #8]
 8001458:	033c      	lsls	r4, r7, #12
 800145a:	007b      	lsls	r3, r7, #1
 800145c:	0ffa      	lsrs	r2, r7, #31
 800145e:	0030      	movs	r0, r6
 8001460:	0b24      	lsrs	r4, r4, #12
 8001462:	0d5b      	lsrs	r3, r3, #21
 8001464:	9200      	str	r2, [sp, #0]
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x5e>
 8001468:	e096      	b.n	8001598 <__aeabi_dmul+0x18c>
 800146a:	4aad      	ldr	r2, [pc, #692]	@ (8001720 <__aeabi_dmul+0x314>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d031      	beq.n	80014d4 <__aeabi_dmul+0xc8>
 8001470:	0f72      	lsrs	r2, r6, #29
 8001472:	00e4      	lsls	r4, r4, #3
 8001474:	4322      	orrs	r2, r4
 8001476:	2480      	movs	r4, #128	@ 0x80
 8001478:	0424      	lsls	r4, r4, #16
 800147a:	4314      	orrs	r4, r2
 800147c:	4aa9      	ldr	r2, [pc, #676]	@ (8001724 <__aeabi_dmul+0x318>)
 800147e:	00f0      	lsls	r0, r6, #3
 8001480:	4694      	mov	ip, r2
 8001482:	4463      	add	r3, ip
 8001484:	195b      	adds	r3, r3, r5
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	9201      	str	r2, [sp, #4]
 800148a:	4642      	mov	r2, r8
 800148c:	2600      	movs	r6, #0
 800148e:	2a0a      	cmp	r2, #10
 8001490:	dc42      	bgt.n	8001518 <__aeabi_dmul+0x10c>
 8001492:	465a      	mov	r2, fp
 8001494:	9900      	ldr	r1, [sp, #0]
 8001496:	404a      	eors	r2, r1
 8001498:	4693      	mov	fp, r2
 800149a:	4642      	mov	r2, r8
 800149c:	2a02      	cmp	r2, #2
 800149e:	dc32      	bgt.n	8001506 <__aeabi_dmul+0xfa>
 80014a0:	3a01      	subs	r2, #1
 80014a2:	2a01      	cmp	r2, #1
 80014a4:	d900      	bls.n	80014a8 <__aeabi_dmul+0x9c>
 80014a6:	e149      	b.n	800173c <__aeabi_dmul+0x330>
 80014a8:	2e02      	cmp	r6, #2
 80014aa:	d100      	bne.n	80014ae <__aeabi_dmul+0xa2>
 80014ac:	e0ca      	b.n	8001644 <__aeabi_dmul+0x238>
 80014ae:	2e01      	cmp	r6, #1
 80014b0:	d13d      	bne.n	800152e <__aeabi_dmul+0x122>
 80014b2:	2300      	movs	r3, #0
 80014b4:	2400      	movs	r4, #0
 80014b6:	2200      	movs	r2, #0
 80014b8:	0010      	movs	r0, r2
 80014ba:	465a      	mov	r2, fp
 80014bc:	051b      	lsls	r3, r3, #20
 80014be:	4323      	orrs	r3, r4
 80014c0:	07d2      	lsls	r2, r2, #31
 80014c2:	4313      	orrs	r3, r2
 80014c4:	0019      	movs	r1, r3
 80014c6:	b007      	add	sp, #28
 80014c8:	bcf0      	pop	{r4, r5, r6, r7}
 80014ca:	46bb      	mov	fp, r7
 80014cc:	46b2      	mov	sl, r6
 80014ce:	46a9      	mov	r9, r5
 80014d0:	46a0      	mov	r8, r4
 80014d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d4:	4b92      	ldr	r3, [pc, #584]	@ (8001720 <__aeabi_dmul+0x314>)
 80014d6:	4326      	orrs	r6, r4
 80014d8:	18eb      	adds	r3, r5, r3
 80014da:	2e00      	cmp	r6, #0
 80014dc:	d100      	bne.n	80014e0 <__aeabi_dmul+0xd4>
 80014de:	e0bb      	b.n	8001658 <__aeabi_dmul+0x24c>
 80014e0:	2203      	movs	r2, #3
 80014e2:	4641      	mov	r1, r8
 80014e4:	4311      	orrs	r1, r2
 80014e6:	465a      	mov	r2, fp
 80014e8:	4688      	mov	r8, r1
 80014ea:	9900      	ldr	r1, [sp, #0]
 80014ec:	404a      	eors	r2, r1
 80014ee:	2180      	movs	r1, #128	@ 0x80
 80014f0:	0109      	lsls	r1, r1, #4
 80014f2:	468c      	mov	ip, r1
 80014f4:	0029      	movs	r1, r5
 80014f6:	4461      	add	r1, ip
 80014f8:	9101      	str	r1, [sp, #4]
 80014fa:	4641      	mov	r1, r8
 80014fc:	290a      	cmp	r1, #10
 80014fe:	dd00      	ble.n	8001502 <__aeabi_dmul+0xf6>
 8001500:	e233      	b.n	800196a <__aeabi_dmul+0x55e>
 8001502:	4693      	mov	fp, r2
 8001504:	2603      	movs	r6, #3
 8001506:	4642      	mov	r2, r8
 8001508:	2701      	movs	r7, #1
 800150a:	4097      	lsls	r7, r2
 800150c:	21a6      	movs	r1, #166	@ 0xa6
 800150e:	003a      	movs	r2, r7
 8001510:	00c9      	lsls	r1, r1, #3
 8001512:	400a      	ands	r2, r1
 8001514:	420f      	tst	r7, r1
 8001516:	d031      	beq.n	800157c <__aeabi_dmul+0x170>
 8001518:	9e02      	ldr	r6, [sp, #8]
 800151a:	2e02      	cmp	r6, #2
 800151c:	d100      	bne.n	8001520 <__aeabi_dmul+0x114>
 800151e:	e235      	b.n	800198c <__aeabi_dmul+0x580>
 8001520:	2e03      	cmp	r6, #3
 8001522:	d100      	bne.n	8001526 <__aeabi_dmul+0x11a>
 8001524:	e1d2      	b.n	80018cc <__aeabi_dmul+0x4c0>
 8001526:	4654      	mov	r4, sl
 8001528:	4648      	mov	r0, r9
 800152a:	2e01      	cmp	r6, #1
 800152c:	d0c1      	beq.n	80014b2 <__aeabi_dmul+0xa6>
 800152e:	9a01      	ldr	r2, [sp, #4]
 8001530:	4b7d      	ldr	r3, [pc, #500]	@ (8001728 <__aeabi_dmul+0x31c>)
 8001532:	4694      	mov	ip, r2
 8001534:	4463      	add	r3, ip
 8001536:	2b00      	cmp	r3, #0
 8001538:	dc00      	bgt.n	800153c <__aeabi_dmul+0x130>
 800153a:	e0c0      	b.n	80016be <__aeabi_dmul+0x2b2>
 800153c:	0742      	lsls	r2, r0, #29
 800153e:	d009      	beq.n	8001554 <__aeabi_dmul+0x148>
 8001540:	220f      	movs	r2, #15
 8001542:	4002      	ands	r2, r0
 8001544:	2a04      	cmp	r2, #4
 8001546:	d005      	beq.n	8001554 <__aeabi_dmul+0x148>
 8001548:	1d02      	adds	r2, r0, #4
 800154a:	4282      	cmp	r2, r0
 800154c:	4180      	sbcs	r0, r0
 800154e:	4240      	negs	r0, r0
 8001550:	1824      	adds	r4, r4, r0
 8001552:	0010      	movs	r0, r2
 8001554:	01e2      	lsls	r2, r4, #7
 8001556:	d506      	bpl.n	8001566 <__aeabi_dmul+0x15a>
 8001558:	4b74      	ldr	r3, [pc, #464]	@ (800172c <__aeabi_dmul+0x320>)
 800155a:	9a01      	ldr	r2, [sp, #4]
 800155c:	401c      	ands	r4, r3
 800155e:	2380      	movs	r3, #128	@ 0x80
 8001560:	4694      	mov	ip, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4463      	add	r3, ip
 8001566:	4a72      	ldr	r2, [pc, #456]	@ (8001730 <__aeabi_dmul+0x324>)
 8001568:	4293      	cmp	r3, r2
 800156a:	dc6b      	bgt.n	8001644 <__aeabi_dmul+0x238>
 800156c:	0762      	lsls	r2, r4, #29
 800156e:	08c0      	lsrs	r0, r0, #3
 8001570:	0264      	lsls	r4, r4, #9
 8001572:	055b      	lsls	r3, r3, #21
 8001574:	4302      	orrs	r2, r0
 8001576:	0b24      	lsrs	r4, r4, #12
 8001578:	0d5b      	lsrs	r3, r3, #21
 800157a:	e79d      	b.n	80014b8 <__aeabi_dmul+0xac>
 800157c:	2190      	movs	r1, #144	@ 0x90
 800157e:	0089      	lsls	r1, r1, #2
 8001580:	420f      	tst	r7, r1
 8001582:	d163      	bne.n	800164c <__aeabi_dmul+0x240>
 8001584:	2288      	movs	r2, #136	@ 0x88
 8001586:	423a      	tst	r2, r7
 8001588:	d100      	bne.n	800158c <__aeabi_dmul+0x180>
 800158a:	e0d7      	b.n	800173c <__aeabi_dmul+0x330>
 800158c:	9b00      	ldr	r3, [sp, #0]
 800158e:	46a2      	mov	sl, r4
 8001590:	469b      	mov	fp, r3
 8001592:	4681      	mov	r9, r0
 8001594:	9602      	str	r6, [sp, #8]
 8001596:	e7bf      	b.n	8001518 <__aeabi_dmul+0x10c>
 8001598:	0023      	movs	r3, r4
 800159a:	4333      	orrs	r3, r6
 800159c:	d100      	bne.n	80015a0 <__aeabi_dmul+0x194>
 800159e:	e07f      	b.n	80016a0 <__aeabi_dmul+0x294>
 80015a0:	2c00      	cmp	r4, #0
 80015a2:	d100      	bne.n	80015a6 <__aeabi_dmul+0x19a>
 80015a4:	e1ad      	b.n	8001902 <__aeabi_dmul+0x4f6>
 80015a6:	0020      	movs	r0, r4
 80015a8:	f000 fe22 	bl	80021f0 <__clzsi2>
 80015ac:	0002      	movs	r2, r0
 80015ae:	0003      	movs	r3, r0
 80015b0:	3a0b      	subs	r2, #11
 80015b2:	201d      	movs	r0, #29
 80015b4:	0019      	movs	r1, r3
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	0030      	movs	r0, r6
 80015ba:	3908      	subs	r1, #8
 80015bc:	40d0      	lsrs	r0, r2
 80015be:	408c      	lsls	r4, r1
 80015c0:	4304      	orrs	r4, r0
 80015c2:	0030      	movs	r0, r6
 80015c4:	4088      	lsls	r0, r1
 80015c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001734 <__aeabi_dmul+0x328>)
 80015c8:	1aeb      	subs	r3, r5, r3
 80015ca:	4694      	mov	ip, r2
 80015cc:	4463      	add	r3, ip
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	9201      	str	r2, [sp, #4]
 80015d2:	4642      	mov	r2, r8
 80015d4:	2600      	movs	r6, #0
 80015d6:	2a0a      	cmp	r2, #10
 80015d8:	dc00      	bgt.n	80015dc <__aeabi_dmul+0x1d0>
 80015da:	e75a      	b.n	8001492 <__aeabi_dmul+0x86>
 80015dc:	e79c      	b.n	8001518 <__aeabi_dmul+0x10c>
 80015de:	4653      	mov	r3, sl
 80015e0:	4303      	orrs	r3, r0
 80015e2:	4699      	mov	r9, r3
 80015e4:	d054      	beq.n	8001690 <__aeabi_dmul+0x284>
 80015e6:	4653      	mov	r3, sl
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d100      	bne.n	80015ee <__aeabi_dmul+0x1e2>
 80015ec:	e177      	b.n	80018de <__aeabi_dmul+0x4d2>
 80015ee:	4650      	mov	r0, sl
 80015f0:	f000 fdfe 	bl	80021f0 <__clzsi2>
 80015f4:	230b      	movs	r3, #11
 80015f6:	425b      	negs	r3, r3
 80015f8:	469c      	mov	ip, r3
 80015fa:	0002      	movs	r2, r0
 80015fc:	4484      	add	ip, r0
 80015fe:	0011      	movs	r1, r2
 8001600:	4650      	mov	r0, sl
 8001602:	3908      	subs	r1, #8
 8001604:	4088      	lsls	r0, r1
 8001606:	231d      	movs	r3, #29
 8001608:	4680      	mov	r8, r0
 800160a:	4660      	mov	r0, ip
 800160c:	1a1b      	subs	r3, r3, r0
 800160e:	0020      	movs	r0, r4
 8001610:	40d8      	lsrs	r0, r3
 8001612:	0003      	movs	r3, r0
 8001614:	4640      	mov	r0, r8
 8001616:	4303      	orrs	r3, r0
 8001618:	469a      	mov	sl, r3
 800161a:	0023      	movs	r3, r4
 800161c:	408b      	lsls	r3, r1
 800161e:	4699      	mov	r9, r3
 8001620:	2300      	movs	r3, #0
 8001622:	4d44      	ldr	r5, [pc, #272]	@ (8001734 <__aeabi_dmul+0x328>)
 8001624:	4698      	mov	r8, r3
 8001626:	1aad      	subs	r5, r5, r2
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	e715      	b.n	8001458 <__aeabi_dmul+0x4c>
 800162c:	4652      	mov	r2, sl
 800162e:	4302      	orrs	r2, r0
 8001630:	4691      	mov	r9, r2
 8001632:	d126      	bne.n	8001682 <__aeabi_dmul+0x276>
 8001634:	2200      	movs	r2, #0
 8001636:	001d      	movs	r5, r3
 8001638:	2302      	movs	r3, #2
 800163a:	4692      	mov	sl, r2
 800163c:	3208      	adds	r2, #8
 800163e:	4690      	mov	r8, r2
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	e709      	b.n	8001458 <__aeabi_dmul+0x4c>
 8001644:	2400      	movs	r4, #0
 8001646:	2200      	movs	r2, #0
 8001648:	4b35      	ldr	r3, [pc, #212]	@ (8001720 <__aeabi_dmul+0x314>)
 800164a:	e735      	b.n	80014b8 <__aeabi_dmul+0xac>
 800164c:	2300      	movs	r3, #0
 800164e:	2480      	movs	r4, #128	@ 0x80
 8001650:	469b      	mov	fp, r3
 8001652:	0324      	lsls	r4, r4, #12
 8001654:	4b32      	ldr	r3, [pc, #200]	@ (8001720 <__aeabi_dmul+0x314>)
 8001656:	e72f      	b.n	80014b8 <__aeabi_dmul+0xac>
 8001658:	2202      	movs	r2, #2
 800165a:	4641      	mov	r1, r8
 800165c:	4311      	orrs	r1, r2
 800165e:	2280      	movs	r2, #128	@ 0x80
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	4694      	mov	ip, r2
 8001664:	002a      	movs	r2, r5
 8001666:	4462      	add	r2, ip
 8001668:	4688      	mov	r8, r1
 800166a:	9201      	str	r2, [sp, #4]
 800166c:	290a      	cmp	r1, #10
 800166e:	dd00      	ble.n	8001672 <__aeabi_dmul+0x266>
 8001670:	e752      	b.n	8001518 <__aeabi_dmul+0x10c>
 8001672:	465a      	mov	r2, fp
 8001674:	2000      	movs	r0, #0
 8001676:	9900      	ldr	r1, [sp, #0]
 8001678:	0004      	movs	r4, r0
 800167a:	404a      	eors	r2, r1
 800167c:	4693      	mov	fp, r2
 800167e:	2602      	movs	r6, #2
 8001680:	e70b      	b.n	800149a <__aeabi_dmul+0x8e>
 8001682:	220c      	movs	r2, #12
 8001684:	001d      	movs	r5, r3
 8001686:	2303      	movs	r3, #3
 8001688:	4681      	mov	r9, r0
 800168a:	4690      	mov	r8, r2
 800168c:	9302      	str	r3, [sp, #8]
 800168e:	e6e3      	b.n	8001458 <__aeabi_dmul+0x4c>
 8001690:	2300      	movs	r3, #0
 8001692:	469a      	mov	sl, r3
 8001694:	3304      	adds	r3, #4
 8001696:	4698      	mov	r8, r3
 8001698:	3b03      	subs	r3, #3
 800169a:	2500      	movs	r5, #0
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	e6db      	b.n	8001458 <__aeabi_dmul+0x4c>
 80016a0:	4642      	mov	r2, r8
 80016a2:	3301      	adds	r3, #1
 80016a4:	431a      	orrs	r2, r3
 80016a6:	002b      	movs	r3, r5
 80016a8:	4690      	mov	r8, r2
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	4642      	mov	r2, r8
 80016b0:	2400      	movs	r4, #0
 80016b2:	2000      	movs	r0, #0
 80016b4:	2601      	movs	r6, #1
 80016b6:	2a0a      	cmp	r2, #10
 80016b8:	dc00      	bgt.n	80016bc <__aeabi_dmul+0x2b0>
 80016ba:	e6ea      	b.n	8001492 <__aeabi_dmul+0x86>
 80016bc:	e72c      	b.n	8001518 <__aeabi_dmul+0x10c>
 80016be:	2201      	movs	r2, #1
 80016c0:	1ad2      	subs	r2, r2, r3
 80016c2:	2a38      	cmp	r2, #56	@ 0x38
 80016c4:	dd00      	ble.n	80016c8 <__aeabi_dmul+0x2bc>
 80016c6:	e6f4      	b.n	80014b2 <__aeabi_dmul+0xa6>
 80016c8:	2a1f      	cmp	r2, #31
 80016ca:	dc00      	bgt.n	80016ce <__aeabi_dmul+0x2c2>
 80016cc:	e12a      	b.n	8001924 <__aeabi_dmul+0x518>
 80016ce:	211f      	movs	r1, #31
 80016d0:	4249      	negs	r1, r1
 80016d2:	1acb      	subs	r3, r1, r3
 80016d4:	0021      	movs	r1, r4
 80016d6:	40d9      	lsrs	r1, r3
 80016d8:	000b      	movs	r3, r1
 80016da:	2a20      	cmp	r2, #32
 80016dc:	d005      	beq.n	80016ea <__aeabi_dmul+0x2de>
 80016de:	4a16      	ldr	r2, [pc, #88]	@ (8001738 <__aeabi_dmul+0x32c>)
 80016e0:	9d01      	ldr	r5, [sp, #4]
 80016e2:	4694      	mov	ip, r2
 80016e4:	4465      	add	r5, ip
 80016e6:	40ac      	lsls	r4, r5
 80016e8:	4320      	orrs	r0, r4
 80016ea:	1e42      	subs	r2, r0, #1
 80016ec:	4190      	sbcs	r0, r2
 80016ee:	4318      	orrs	r0, r3
 80016f0:	2307      	movs	r3, #7
 80016f2:	0019      	movs	r1, r3
 80016f4:	2400      	movs	r4, #0
 80016f6:	4001      	ands	r1, r0
 80016f8:	4203      	tst	r3, r0
 80016fa:	d00c      	beq.n	8001716 <__aeabi_dmul+0x30a>
 80016fc:	230f      	movs	r3, #15
 80016fe:	4003      	ands	r3, r0
 8001700:	2b04      	cmp	r3, #4
 8001702:	d100      	bne.n	8001706 <__aeabi_dmul+0x2fa>
 8001704:	e140      	b.n	8001988 <__aeabi_dmul+0x57c>
 8001706:	1d03      	adds	r3, r0, #4
 8001708:	4283      	cmp	r3, r0
 800170a:	41a4      	sbcs	r4, r4
 800170c:	0018      	movs	r0, r3
 800170e:	4264      	negs	r4, r4
 8001710:	0761      	lsls	r1, r4, #29
 8001712:	0264      	lsls	r4, r4, #9
 8001714:	0b24      	lsrs	r4, r4, #12
 8001716:	08c2      	lsrs	r2, r0, #3
 8001718:	2300      	movs	r3, #0
 800171a:	430a      	orrs	r2, r1
 800171c:	e6cc      	b.n	80014b8 <__aeabi_dmul+0xac>
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	000007ff 	.word	0x000007ff
 8001724:	fffffc01 	.word	0xfffffc01
 8001728:	000003ff 	.word	0x000003ff
 800172c:	feffffff 	.word	0xfeffffff
 8001730:	000007fe 	.word	0x000007fe
 8001734:	fffffc0d 	.word	0xfffffc0d
 8001738:	0000043e 	.word	0x0000043e
 800173c:	4649      	mov	r1, r9
 800173e:	464a      	mov	r2, r9
 8001740:	0409      	lsls	r1, r1, #16
 8001742:	0c09      	lsrs	r1, r1, #16
 8001744:	000d      	movs	r5, r1
 8001746:	0c16      	lsrs	r6, r2, #16
 8001748:	0c02      	lsrs	r2, r0, #16
 800174a:	0400      	lsls	r0, r0, #16
 800174c:	0c00      	lsrs	r0, r0, #16
 800174e:	4345      	muls	r5, r0
 8001750:	46ac      	mov	ip, r5
 8001752:	0005      	movs	r5, r0
 8001754:	4375      	muls	r5, r6
 8001756:	46a8      	mov	r8, r5
 8001758:	0015      	movs	r5, r2
 800175a:	000f      	movs	r7, r1
 800175c:	4375      	muls	r5, r6
 800175e:	9200      	str	r2, [sp, #0]
 8001760:	9502      	str	r5, [sp, #8]
 8001762:	002a      	movs	r2, r5
 8001764:	9d00      	ldr	r5, [sp, #0]
 8001766:	436f      	muls	r7, r5
 8001768:	4665      	mov	r5, ip
 800176a:	0c2d      	lsrs	r5, r5, #16
 800176c:	46a9      	mov	r9, r5
 800176e:	4447      	add	r7, r8
 8001770:	444f      	add	r7, r9
 8001772:	45b8      	cmp	r8, r7
 8001774:	d905      	bls.n	8001782 <__aeabi_dmul+0x376>
 8001776:	0015      	movs	r5, r2
 8001778:	2280      	movs	r2, #128	@ 0x80
 800177a:	0252      	lsls	r2, r2, #9
 800177c:	4690      	mov	r8, r2
 800177e:	4445      	add	r5, r8
 8001780:	9502      	str	r5, [sp, #8]
 8001782:	0c3d      	lsrs	r5, r7, #16
 8001784:	9503      	str	r5, [sp, #12]
 8001786:	4665      	mov	r5, ip
 8001788:	042d      	lsls	r5, r5, #16
 800178a:	043f      	lsls	r7, r7, #16
 800178c:	0c2d      	lsrs	r5, r5, #16
 800178e:	46ac      	mov	ip, r5
 8001790:	003d      	movs	r5, r7
 8001792:	4465      	add	r5, ip
 8001794:	9504      	str	r5, [sp, #16]
 8001796:	0c25      	lsrs	r5, r4, #16
 8001798:	0424      	lsls	r4, r4, #16
 800179a:	0c24      	lsrs	r4, r4, #16
 800179c:	46ac      	mov	ip, r5
 800179e:	0025      	movs	r5, r4
 80017a0:	4375      	muls	r5, r6
 80017a2:	46a8      	mov	r8, r5
 80017a4:	4665      	mov	r5, ip
 80017a6:	000f      	movs	r7, r1
 80017a8:	4369      	muls	r1, r5
 80017aa:	4441      	add	r1, r8
 80017ac:	4689      	mov	r9, r1
 80017ae:	4367      	muls	r7, r4
 80017b0:	0c39      	lsrs	r1, r7, #16
 80017b2:	4449      	add	r1, r9
 80017b4:	436e      	muls	r6, r5
 80017b6:	4588      	cmp	r8, r1
 80017b8:	d903      	bls.n	80017c2 <__aeabi_dmul+0x3b6>
 80017ba:	2280      	movs	r2, #128	@ 0x80
 80017bc:	0252      	lsls	r2, r2, #9
 80017be:	4690      	mov	r8, r2
 80017c0:	4446      	add	r6, r8
 80017c2:	0c0d      	lsrs	r5, r1, #16
 80017c4:	46a8      	mov	r8, r5
 80017c6:	0035      	movs	r5, r6
 80017c8:	4445      	add	r5, r8
 80017ca:	9505      	str	r5, [sp, #20]
 80017cc:	9d03      	ldr	r5, [sp, #12]
 80017ce:	043f      	lsls	r7, r7, #16
 80017d0:	46a8      	mov	r8, r5
 80017d2:	0c3f      	lsrs	r7, r7, #16
 80017d4:	0409      	lsls	r1, r1, #16
 80017d6:	19c9      	adds	r1, r1, r7
 80017d8:	4488      	add	r8, r1
 80017da:	4645      	mov	r5, r8
 80017dc:	9503      	str	r5, [sp, #12]
 80017de:	4655      	mov	r5, sl
 80017e0:	042e      	lsls	r6, r5, #16
 80017e2:	0c36      	lsrs	r6, r6, #16
 80017e4:	0c2f      	lsrs	r7, r5, #16
 80017e6:	0035      	movs	r5, r6
 80017e8:	4345      	muls	r5, r0
 80017ea:	4378      	muls	r0, r7
 80017ec:	4681      	mov	r9, r0
 80017ee:	0038      	movs	r0, r7
 80017f0:	46a8      	mov	r8, r5
 80017f2:	0c2d      	lsrs	r5, r5, #16
 80017f4:	46aa      	mov	sl, r5
 80017f6:	9a00      	ldr	r2, [sp, #0]
 80017f8:	4350      	muls	r0, r2
 80017fa:	4372      	muls	r2, r6
 80017fc:	444a      	add	r2, r9
 80017fe:	4452      	add	r2, sl
 8001800:	4591      	cmp	r9, r2
 8001802:	d903      	bls.n	800180c <__aeabi_dmul+0x400>
 8001804:	2580      	movs	r5, #128	@ 0x80
 8001806:	026d      	lsls	r5, r5, #9
 8001808:	46a9      	mov	r9, r5
 800180a:	4448      	add	r0, r9
 800180c:	0c15      	lsrs	r5, r2, #16
 800180e:	46a9      	mov	r9, r5
 8001810:	4645      	mov	r5, r8
 8001812:	042d      	lsls	r5, r5, #16
 8001814:	0c2d      	lsrs	r5, r5, #16
 8001816:	46a8      	mov	r8, r5
 8001818:	4665      	mov	r5, ip
 800181a:	437d      	muls	r5, r7
 800181c:	0412      	lsls	r2, r2, #16
 800181e:	4448      	add	r0, r9
 8001820:	4490      	add	r8, r2
 8001822:	46a9      	mov	r9, r5
 8001824:	0032      	movs	r2, r6
 8001826:	4665      	mov	r5, ip
 8001828:	4362      	muls	r2, r4
 800182a:	436e      	muls	r6, r5
 800182c:	437c      	muls	r4, r7
 800182e:	0c17      	lsrs	r7, r2, #16
 8001830:	1936      	adds	r6, r6, r4
 8001832:	19bf      	adds	r7, r7, r6
 8001834:	42bc      	cmp	r4, r7
 8001836:	d903      	bls.n	8001840 <__aeabi_dmul+0x434>
 8001838:	2480      	movs	r4, #128	@ 0x80
 800183a:	0264      	lsls	r4, r4, #9
 800183c:	46a4      	mov	ip, r4
 800183e:	44e1      	add	r9, ip
 8001840:	9c02      	ldr	r4, [sp, #8]
 8001842:	9e03      	ldr	r6, [sp, #12]
 8001844:	46a4      	mov	ip, r4
 8001846:	9d05      	ldr	r5, [sp, #20]
 8001848:	4466      	add	r6, ip
 800184a:	428e      	cmp	r6, r1
 800184c:	4189      	sbcs	r1, r1
 800184e:	46ac      	mov	ip, r5
 8001850:	0412      	lsls	r2, r2, #16
 8001852:	043c      	lsls	r4, r7, #16
 8001854:	0c12      	lsrs	r2, r2, #16
 8001856:	18a2      	adds	r2, r4, r2
 8001858:	4462      	add	r2, ip
 800185a:	4249      	negs	r1, r1
 800185c:	1854      	adds	r4, r2, r1
 800185e:	4446      	add	r6, r8
 8001860:	46a4      	mov	ip, r4
 8001862:	4546      	cmp	r6, r8
 8001864:	41a4      	sbcs	r4, r4
 8001866:	4682      	mov	sl, r0
 8001868:	4264      	negs	r4, r4
 800186a:	46a0      	mov	r8, r4
 800186c:	42aa      	cmp	r2, r5
 800186e:	4192      	sbcs	r2, r2
 8001870:	458c      	cmp	ip, r1
 8001872:	4189      	sbcs	r1, r1
 8001874:	44e2      	add	sl, ip
 8001876:	44d0      	add	r8, sl
 8001878:	4249      	negs	r1, r1
 800187a:	4252      	negs	r2, r2
 800187c:	430a      	orrs	r2, r1
 800187e:	45a0      	cmp	r8, r4
 8001880:	41a4      	sbcs	r4, r4
 8001882:	4582      	cmp	sl, r0
 8001884:	4189      	sbcs	r1, r1
 8001886:	4264      	negs	r4, r4
 8001888:	4249      	negs	r1, r1
 800188a:	430c      	orrs	r4, r1
 800188c:	4641      	mov	r1, r8
 800188e:	0c3f      	lsrs	r7, r7, #16
 8001890:	19d2      	adds	r2, r2, r7
 8001892:	1912      	adds	r2, r2, r4
 8001894:	0dcc      	lsrs	r4, r1, #23
 8001896:	9904      	ldr	r1, [sp, #16]
 8001898:	0270      	lsls	r0, r6, #9
 800189a:	4308      	orrs	r0, r1
 800189c:	1e41      	subs	r1, r0, #1
 800189e:	4188      	sbcs	r0, r1
 80018a0:	4641      	mov	r1, r8
 80018a2:	444a      	add	r2, r9
 80018a4:	0df6      	lsrs	r6, r6, #23
 80018a6:	0252      	lsls	r2, r2, #9
 80018a8:	4330      	orrs	r0, r6
 80018aa:	0249      	lsls	r1, r1, #9
 80018ac:	4314      	orrs	r4, r2
 80018ae:	4308      	orrs	r0, r1
 80018b0:	01d2      	lsls	r2, r2, #7
 80018b2:	d535      	bpl.n	8001920 <__aeabi_dmul+0x514>
 80018b4:	2201      	movs	r2, #1
 80018b6:	0843      	lsrs	r3, r0, #1
 80018b8:	4002      	ands	r2, r0
 80018ba:	4313      	orrs	r3, r2
 80018bc:	07e0      	lsls	r0, r4, #31
 80018be:	4318      	orrs	r0, r3
 80018c0:	0864      	lsrs	r4, r4, #1
 80018c2:	e634      	b.n	800152e <__aeabi_dmul+0x122>
 80018c4:	9b00      	ldr	r3, [sp, #0]
 80018c6:	46a2      	mov	sl, r4
 80018c8:	469b      	mov	fp, r3
 80018ca:	4681      	mov	r9, r0
 80018cc:	2480      	movs	r4, #128	@ 0x80
 80018ce:	4653      	mov	r3, sl
 80018d0:	0324      	lsls	r4, r4, #12
 80018d2:	431c      	orrs	r4, r3
 80018d4:	0324      	lsls	r4, r4, #12
 80018d6:	464a      	mov	r2, r9
 80018d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001994 <__aeabi_dmul+0x588>)
 80018da:	0b24      	lsrs	r4, r4, #12
 80018dc:	e5ec      	b.n	80014b8 <__aeabi_dmul+0xac>
 80018de:	f000 fc87 	bl	80021f0 <__clzsi2>
 80018e2:	2315      	movs	r3, #21
 80018e4:	469c      	mov	ip, r3
 80018e6:	4484      	add	ip, r0
 80018e8:	0002      	movs	r2, r0
 80018ea:	4663      	mov	r3, ip
 80018ec:	3220      	adds	r2, #32
 80018ee:	2b1c      	cmp	r3, #28
 80018f0:	dc00      	bgt.n	80018f4 <__aeabi_dmul+0x4e8>
 80018f2:	e684      	b.n	80015fe <__aeabi_dmul+0x1f2>
 80018f4:	2300      	movs	r3, #0
 80018f6:	4699      	mov	r9, r3
 80018f8:	0023      	movs	r3, r4
 80018fa:	3808      	subs	r0, #8
 80018fc:	4083      	lsls	r3, r0
 80018fe:	469a      	mov	sl, r3
 8001900:	e68e      	b.n	8001620 <__aeabi_dmul+0x214>
 8001902:	f000 fc75 	bl	80021f0 <__clzsi2>
 8001906:	0002      	movs	r2, r0
 8001908:	0003      	movs	r3, r0
 800190a:	3215      	adds	r2, #21
 800190c:	3320      	adds	r3, #32
 800190e:	2a1c      	cmp	r2, #28
 8001910:	dc00      	bgt.n	8001914 <__aeabi_dmul+0x508>
 8001912:	e64e      	b.n	80015b2 <__aeabi_dmul+0x1a6>
 8001914:	0002      	movs	r2, r0
 8001916:	0034      	movs	r4, r6
 8001918:	3a08      	subs	r2, #8
 800191a:	2000      	movs	r0, #0
 800191c:	4094      	lsls	r4, r2
 800191e:	e652      	b.n	80015c6 <__aeabi_dmul+0x1ba>
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	e604      	b.n	800152e <__aeabi_dmul+0x122>
 8001924:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <__aeabi_dmul+0x58c>)
 8001926:	0021      	movs	r1, r4
 8001928:	469c      	mov	ip, r3
 800192a:	0003      	movs	r3, r0
 800192c:	9d01      	ldr	r5, [sp, #4]
 800192e:	40d3      	lsrs	r3, r2
 8001930:	4465      	add	r5, ip
 8001932:	40a9      	lsls	r1, r5
 8001934:	4319      	orrs	r1, r3
 8001936:	0003      	movs	r3, r0
 8001938:	40ab      	lsls	r3, r5
 800193a:	1e58      	subs	r0, r3, #1
 800193c:	4183      	sbcs	r3, r0
 800193e:	4319      	orrs	r1, r3
 8001940:	0008      	movs	r0, r1
 8001942:	40d4      	lsrs	r4, r2
 8001944:	074b      	lsls	r3, r1, #29
 8001946:	d009      	beq.n	800195c <__aeabi_dmul+0x550>
 8001948:	230f      	movs	r3, #15
 800194a:	400b      	ands	r3, r1
 800194c:	2b04      	cmp	r3, #4
 800194e:	d005      	beq.n	800195c <__aeabi_dmul+0x550>
 8001950:	1d0b      	adds	r3, r1, #4
 8001952:	428b      	cmp	r3, r1
 8001954:	4180      	sbcs	r0, r0
 8001956:	4240      	negs	r0, r0
 8001958:	1824      	adds	r4, r4, r0
 800195a:	0018      	movs	r0, r3
 800195c:	0223      	lsls	r3, r4, #8
 800195e:	d400      	bmi.n	8001962 <__aeabi_dmul+0x556>
 8001960:	e6d6      	b.n	8001710 <__aeabi_dmul+0x304>
 8001962:	2301      	movs	r3, #1
 8001964:	2400      	movs	r4, #0
 8001966:	2200      	movs	r2, #0
 8001968:	e5a6      	b.n	80014b8 <__aeabi_dmul+0xac>
 800196a:	290f      	cmp	r1, #15
 800196c:	d1aa      	bne.n	80018c4 <__aeabi_dmul+0x4b8>
 800196e:	2380      	movs	r3, #128	@ 0x80
 8001970:	4652      	mov	r2, sl
 8001972:	031b      	lsls	r3, r3, #12
 8001974:	421a      	tst	r2, r3
 8001976:	d0a9      	beq.n	80018cc <__aeabi_dmul+0x4c0>
 8001978:	421c      	tst	r4, r3
 800197a:	d1a7      	bne.n	80018cc <__aeabi_dmul+0x4c0>
 800197c:	431c      	orrs	r4, r3
 800197e:	9b00      	ldr	r3, [sp, #0]
 8001980:	0002      	movs	r2, r0
 8001982:	469b      	mov	fp, r3
 8001984:	4b03      	ldr	r3, [pc, #12]	@ (8001994 <__aeabi_dmul+0x588>)
 8001986:	e597      	b.n	80014b8 <__aeabi_dmul+0xac>
 8001988:	2400      	movs	r4, #0
 800198a:	e6c1      	b.n	8001710 <__aeabi_dmul+0x304>
 800198c:	2400      	movs	r4, #0
 800198e:	4b01      	ldr	r3, [pc, #4]	@ (8001994 <__aeabi_dmul+0x588>)
 8001990:	0022      	movs	r2, r4
 8001992:	e591      	b.n	80014b8 <__aeabi_dmul+0xac>
 8001994:	000007ff 	.word	0x000007ff
 8001998:	0000041e 	.word	0x0000041e

0800199c <__aeabi_dsub>:
 800199c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800199e:	464e      	mov	r6, r9
 80019a0:	4645      	mov	r5, r8
 80019a2:	46de      	mov	lr, fp
 80019a4:	4657      	mov	r7, sl
 80019a6:	b5e0      	push	{r5, r6, r7, lr}
 80019a8:	b085      	sub	sp, #20
 80019aa:	9000      	str	r0, [sp, #0]
 80019ac:	9101      	str	r1, [sp, #4]
 80019ae:	030c      	lsls	r4, r1, #12
 80019b0:	004f      	lsls	r7, r1, #1
 80019b2:	0fce      	lsrs	r6, r1, #31
 80019b4:	0a61      	lsrs	r1, r4, #9
 80019b6:	9c00      	ldr	r4, [sp, #0]
 80019b8:	46b0      	mov	r8, r6
 80019ba:	0f64      	lsrs	r4, r4, #29
 80019bc:	430c      	orrs	r4, r1
 80019be:	9900      	ldr	r1, [sp, #0]
 80019c0:	0d7f      	lsrs	r7, r7, #21
 80019c2:	00c8      	lsls	r0, r1, #3
 80019c4:	0011      	movs	r1, r2
 80019c6:	001a      	movs	r2, r3
 80019c8:	031b      	lsls	r3, r3, #12
 80019ca:	469c      	mov	ip, r3
 80019cc:	9100      	str	r1, [sp, #0]
 80019ce:	9201      	str	r2, [sp, #4]
 80019d0:	0051      	lsls	r1, r2, #1
 80019d2:	0d4b      	lsrs	r3, r1, #21
 80019d4:	4699      	mov	r9, r3
 80019d6:	9b01      	ldr	r3, [sp, #4]
 80019d8:	9d00      	ldr	r5, [sp, #0]
 80019da:	0fd9      	lsrs	r1, r3, #31
 80019dc:	4663      	mov	r3, ip
 80019de:	0f6a      	lsrs	r2, r5, #29
 80019e0:	0a5b      	lsrs	r3, r3, #9
 80019e2:	4313      	orrs	r3, r2
 80019e4:	00ea      	lsls	r2, r5, #3
 80019e6:	4694      	mov	ip, r2
 80019e8:	4693      	mov	fp, r2
 80019ea:	4ac1      	ldr	r2, [pc, #772]	@ (8001cf0 <__aeabi_dsub+0x354>)
 80019ec:	9003      	str	r0, [sp, #12]
 80019ee:	9302      	str	r3, [sp, #8]
 80019f0:	4591      	cmp	r9, r2
 80019f2:	d100      	bne.n	80019f6 <__aeabi_dsub+0x5a>
 80019f4:	e0cd      	b.n	8001b92 <__aeabi_dsub+0x1f6>
 80019f6:	2501      	movs	r5, #1
 80019f8:	4069      	eors	r1, r5
 80019fa:	464d      	mov	r5, r9
 80019fc:	1b7d      	subs	r5, r7, r5
 80019fe:	46aa      	mov	sl, r5
 8001a00:	428e      	cmp	r6, r1
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x6a>
 8001a04:	e080      	b.n	8001b08 <__aeabi_dsub+0x16c>
 8001a06:	2d00      	cmp	r5, #0
 8001a08:	dc00      	bgt.n	8001a0c <__aeabi_dsub+0x70>
 8001a0a:	e335      	b.n	8002078 <__aeabi_dsub+0x6dc>
 8001a0c:	4649      	mov	r1, r9
 8001a0e:	2900      	cmp	r1, #0
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dsub+0x78>
 8001a12:	e0df      	b.n	8001bd4 <__aeabi_dsub+0x238>
 8001a14:	4297      	cmp	r7, r2
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dsub+0x7e>
 8001a18:	e194      	b.n	8001d44 <__aeabi_dsub+0x3a8>
 8001a1a:	4652      	mov	r2, sl
 8001a1c:	2501      	movs	r5, #1
 8001a1e:	2a38      	cmp	r2, #56	@ 0x38
 8001a20:	dc19      	bgt.n	8001a56 <__aeabi_dsub+0xba>
 8001a22:	2280      	movs	r2, #128	@ 0x80
 8001a24:	9b02      	ldr	r3, [sp, #8]
 8001a26:	0412      	lsls	r2, r2, #16
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	9302      	str	r3, [sp, #8]
 8001a2c:	4652      	mov	r2, sl
 8001a2e:	2a1f      	cmp	r2, #31
 8001a30:	dd00      	ble.n	8001a34 <__aeabi_dsub+0x98>
 8001a32:	e1e3      	b.n	8001dfc <__aeabi_dsub+0x460>
 8001a34:	4653      	mov	r3, sl
 8001a36:	2220      	movs	r2, #32
 8001a38:	4661      	mov	r1, ip
 8001a3a:	9d02      	ldr	r5, [sp, #8]
 8001a3c:	1ad2      	subs	r2, r2, r3
 8001a3e:	4095      	lsls	r5, r2
 8001a40:	40d9      	lsrs	r1, r3
 8001a42:	430d      	orrs	r5, r1
 8001a44:	4661      	mov	r1, ip
 8001a46:	4091      	lsls	r1, r2
 8001a48:	000a      	movs	r2, r1
 8001a4a:	1e51      	subs	r1, r2, #1
 8001a4c:	418a      	sbcs	r2, r1
 8001a4e:	4315      	orrs	r5, r2
 8001a50:	9a02      	ldr	r2, [sp, #8]
 8001a52:	40da      	lsrs	r2, r3
 8001a54:	1aa4      	subs	r4, r4, r2
 8001a56:	1b45      	subs	r5, r0, r5
 8001a58:	42a8      	cmp	r0, r5
 8001a5a:	4180      	sbcs	r0, r0
 8001a5c:	4240      	negs	r0, r0
 8001a5e:	1a24      	subs	r4, r4, r0
 8001a60:	0223      	lsls	r3, r4, #8
 8001a62:	d400      	bmi.n	8001a66 <__aeabi_dsub+0xca>
 8001a64:	e13d      	b.n	8001ce2 <__aeabi_dsub+0x346>
 8001a66:	0264      	lsls	r4, r4, #9
 8001a68:	0a64      	lsrs	r4, r4, #9
 8001a6a:	2c00      	cmp	r4, #0
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0xd4>
 8001a6e:	e147      	b.n	8001d00 <__aeabi_dsub+0x364>
 8001a70:	0020      	movs	r0, r4
 8001a72:	f000 fbbd 	bl	80021f0 <__clzsi2>
 8001a76:	0003      	movs	r3, r0
 8001a78:	3b08      	subs	r3, #8
 8001a7a:	2120      	movs	r1, #32
 8001a7c:	0028      	movs	r0, r5
 8001a7e:	1aca      	subs	r2, r1, r3
 8001a80:	40d0      	lsrs	r0, r2
 8001a82:	409c      	lsls	r4, r3
 8001a84:	0002      	movs	r2, r0
 8001a86:	409d      	lsls	r5, r3
 8001a88:	4322      	orrs	r2, r4
 8001a8a:	429f      	cmp	r7, r3
 8001a8c:	dd00      	ble.n	8001a90 <__aeabi_dsub+0xf4>
 8001a8e:	e177      	b.n	8001d80 <__aeabi_dsub+0x3e4>
 8001a90:	1bd8      	subs	r0, r3, r7
 8001a92:	3001      	adds	r0, #1
 8001a94:	1a09      	subs	r1, r1, r0
 8001a96:	002c      	movs	r4, r5
 8001a98:	408d      	lsls	r5, r1
 8001a9a:	40c4      	lsrs	r4, r0
 8001a9c:	1e6b      	subs	r3, r5, #1
 8001a9e:	419d      	sbcs	r5, r3
 8001aa0:	0013      	movs	r3, r2
 8001aa2:	40c2      	lsrs	r2, r0
 8001aa4:	408b      	lsls	r3, r1
 8001aa6:	4325      	orrs	r5, r4
 8001aa8:	2700      	movs	r7, #0
 8001aaa:	0014      	movs	r4, r2
 8001aac:	431d      	orrs	r5, r3
 8001aae:	076b      	lsls	r3, r5, #29
 8001ab0:	d009      	beq.n	8001ac6 <__aeabi_dsub+0x12a>
 8001ab2:	230f      	movs	r3, #15
 8001ab4:	402b      	ands	r3, r5
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d005      	beq.n	8001ac6 <__aeabi_dsub+0x12a>
 8001aba:	1d2b      	adds	r3, r5, #4
 8001abc:	42ab      	cmp	r3, r5
 8001abe:	41ad      	sbcs	r5, r5
 8001ac0:	426d      	negs	r5, r5
 8001ac2:	1964      	adds	r4, r4, r5
 8001ac4:	001d      	movs	r5, r3
 8001ac6:	0223      	lsls	r3, r4, #8
 8001ac8:	d400      	bmi.n	8001acc <__aeabi_dsub+0x130>
 8001aca:	e140      	b.n	8001d4e <__aeabi_dsub+0x3b2>
 8001acc:	4a88      	ldr	r2, [pc, #544]	@ (8001cf0 <__aeabi_dsub+0x354>)
 8001ace:	3701      	adds	r7, #1
 8001ad0:	4297      	cmp	r7, r2
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dsub+0x13a>
 8001ad4:	e101      	b.n	8001cda <__aeabi_dsub+0x33e>
 8001ad6:	2601      	movs	r6, #1
 8001ad8:	4643      	mov	r3, r8
 8001ada:	4986      	ldr	r1, [pc, #536]	@ (8001cf4 <__aeabi_dsub+0x358>)
 8001adc:	08ed      	lsrs	r5, r5, #3
 8001ade:	4021      	ands	r1, r4
 8001ae0:	074a      	lsls	r2, r1, #29
 8001ae2:	432a      	orrs	r2, r5
 8001ae4:	057c      	lsls	r4, r7, #21
 8001ae6:	024d      	lsls	r5, r1, #9
 8001ae8:	0b2d      	lsrs	r5, r5, #12
 8001aea:	0d64      	lsrs	r4, r4, #21
 8001aec:	401e      	ands	r6, r3
 8001aee:	0524      	lsls	r4, r4, #20
 8001af0:	432c      	orrs	r4, r5
 8001af2:	07f6      	lsls	r6, r6, #31
 8001af4:	4334      	orrs	r4, r6
 8001af6:	0010      	movs	r0, r2
 8001af8:	0021      	movs	r1, r4
 8001afa:	b005      	add	sp, #20
 8001afc:	bcf0      	pop	{r4, r5, r6, r7}
 8001afe:	46bb      	mov	fp, r7
 8001b00:	46b2      	mov	sl, r6
 8001b02:	46a9      	mov	r9, r5
 8001b04:	46a0      	mov	r8, r4
 8001b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b08:	2d00      	cmp	r5, #0
 8001b0a:	dc00      	bgt.n	8001b0e <__aeabi_dsub+0x172>
 8001b0c:	e2d0      	b.n	80020b0 <__aeabi_dsub+0x714>
 8001b0e:	4649      	mov	r1, r9
 8001b10:	2900      	cmp	r1, #0
 8001b12:	d000      	beq.n	8001b16 <__aeabi_dsub+0x17a>
 8001b14:	e0d4      	b.n	8001cc0 <__aeabi_dsub+0x324>
 8001b16:	4661      	mov	r1, ip
 8001b18:	9b02      	ldr	r3, [sp, #8]
 8001b1a:	4319      	orrs	r1, r3
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_dsub+0x184>
 8001b1e:	e12b      	b.n	8001d78 <__aeabi_dsub+0x3dc>
 8001b20:	1e69      	subs	r1, r5, #1
 8001b22:	2d01      	cmp	r5, #1
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dsub+0x18c>
 8001b26:	e1d9      	b.n	8001edc <__aeabi_dsub+0x540>
 8001b28:	4295      	cmp	r5, r2
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_dsub+0x192>
 8001b2c:	e10a      	b.n	8001d44 <__aeabi_dsub+0x3a8>
 8001b2e:	2501      	movs	r5, #1
 8001b30:	2938      	cmp	r1, #56	@ 0x38
 8001b32:	dc17      	bgt.n	8001b64 <__aeabi_dsub+0x1c8>
 8001b34:	468a      	mov	sl, r1
 8001b36:	4653      	mov	r3, sl
 8001b38:	2b1f      	cmp	r3, #31
 8001b3a:	dd00      	ble.n	8001b3e <__aeabi_dsub+0x1a2>
 8001b3c:	e1e7      	b.n	8001f0e <__aeabi_dsub+0x572>
 8001b3e:	2220      	movs	r2, #32
 8001b40:	1ad2      	subs	r2, r2, r3
 8001b42:	9b02      	ldr	r3, [sp, #8]
 8001b44:	4661      	mov	r1, ip
 8001b46:	4093      	lsls	r3, r2
 8001b48:	001d      	movs	r5, r3
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	40d9      	lsrs	r1, r3
 8001b4e:	4663      	mov	r3, ip
 8001b50:	4093      	lsls	r3, r2
 8001b52:	001a      	movs	r2, r3
 8001b54:	430d      	orrs	r5, r1
 8001b56:	1e51      	subs	r1, r2, #1
 8001b58:	418a      	sbcs	r2, r1
 8001b5a:	4653      	mov	r3, sl
 8001b5c:	4315      	orrs	r5, r2
 8001b5e:	9a02      	ldr	r2, [sp, #8]
 8001b60:	40da      	lsrs	r2, r3
 8001b62:	18a4      	adds	r4, r4, r2
 8001b64:	182d      	adds	r5, r5, r0
 8001b66:	4285      	cmp	r5, r0
 8001b68:	4180      	sbcs	r0, r0
 8001b6a:	4240      	negs	r0, r0
 8001b6c:	1824      	adds	r4, r4, r0
 8001b6e:	0223      	lsls	r3, r4, #8
 8001b70:	d400      	bmi.n	8001b74 <__aeabi_dsub+0x1d8>
 8001b72:	e0b6      	b.n	8001ce2 <__aeabi_dsub+0x346>
 8001b74:	4b5e      	ldr	r3, [pc, #376]	@ (8001cf0 <__aeabi_dsub+0x354>)
 8001b76:	3701      	adds	r7, #1
 8001b78:	429f      	cmp	r7, r3
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_dsub+0x1e2>
 8001b7c:	e0ad      	b.n	8001cda <__aeabi_dsub+0x33e>
 8001b7e:	2101      	movs	r1, #1
 8001b80:	4b5c      	ldr	r3, [pc, #368]	@ (8001cf4 <__aeabi_dsub+0x358>)
 8001b82:	086a      	lsrs	r2, r5, #1
 8001b84:	401c      	ands	r4, r3
 8001b86:	4029      	ands	r1, r5
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	07e5      	lsls	r5, r4, #31
 8001b8c:	4315      	orrs	r5, r2
 8001b8e:	0864      	lsrs	r4, r4, #1
 8001b90:	e78d      	b.n	8001aae <__aeabi_dsub+0x112>
 8001b92:	4a59      	ldr	r2, [pc, #356]	@ (8001cf8 <__aeabi_dsub+0x35c>)
 8001b94:	9b02      	ldr	r3, [sp, #8]
 8001b96:	4692      	mov	sl, r2
 8001b98:	4662      	mov	r2, ip
 8001b9a:	44ba      	add	sl, r7
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	d02c      	beq.n	8001bfa <__aeabi_dsub+0x25e>
 8001ba0:	428e      	cmp	r6, r1
 8001ba2:	d02e      	beq.n	8001c02 <__aeabi_dsub+0x266>
 8001ba4:	4652      	mov	r2, sl
 8001ba6:	2a00      	cmp	r2, #0
 8001ba8:	d060      	beq.n	8001c6c <__aeabi_dsub+0x2d0>
 8001baa:	2f00      	cmp	r7, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dsub+0x214>
 8001bae:	e0db      	b.n	8001d68 <__aeabi_dsub+0x3cc>
 8001bb0:	4663      	mov	r3, ip
 8001bb2:	000e      	movs	r6, r1
 8001bb4:	9c02      	ldr	r4, [sp, #8]
 8001bb6:	08d8      	lsrs	r0, r3, #3
 8001bb8:	0762      	lsls	r2, r4, #29
 8001bba:	4302      	orrs	r2, r0
 8001bbc:	08e4      	lsrs	r4, r4, #3
 8001bbe:	0013      	movs	r3, r2
 8001bc0:	4323      	orrs	r3, r4
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dsub+0x22a>
 8001bc4:	e254      	b.n	8002070 <__aeabi_dsub+0x6d4>
 8001bc6:	2580      	movs	r5, #128	@ 0x80
 8001bc8:	032d      	lsls	r5, r5, #12
 8001bca:	4325      	orrs	r5, r4
 8001bcc:	032d      	lsls	r5, r5, #12
 8001bce:	4c48      	ldr	r4, [pc, #288]	@ (8001cf0 <__aeabi_dsub+0x354>)
 8001bd0:	0b2d      	lsrs	r5, r5, #12
 8001bd2:	e78c      	b.n	8001aee <__aeabi_dsub+0x152>
 8001bd4:	4661      	mov	r1, ip
 8001bd6:	9b02      	ldr	r3, [sp, #8]
 8001bd8:	4319      	orrs	r1, r3
 8001bda:	d100      	bne.n	8001bde <__aeabi_dsub+0x242>
 8001bdc:	e0cc      	b.n	8001d78 <__aeabi_dsub+0x3dc>
 8001bde:	0029      	movs	r1, r5
 8001be0:	3901      	subs	r1, #1
 8001be2:	2d01      	cmp	r5, #1
 8001be4:	d100      	bne.n	8001be8 <__aeabi_dsub+0x24c>
 8001be6:	e188      	b.n	8001efa <__aeabi_dsub+0x55e>
 8001be8:	4295      	cmp	r5, r2
 8001bea:	d100      	bne.n	8001bee <__aeabi_dsub+0x252>
 8001bec:	e0aa      	b.n	8001d44 <__aeabi_dsub+0x3a8>
 8001bee:	2501      	movs	r5, #1
 8001bf0:	2938      	cmp	r1, #56	@ 0x38
 8001bf2:	dd00      	ble.n	8001bf6 <__aeabi_dsub+0x25a>
 8001bf4:	e72f      	b.n	8001a56 <__aeabi_dsub+0xba>
 8001bf6:	468a      	mov	sl, r1
 8001bf8:	e718      	b.n	8001a2c <__aeabi_dsub+0x90>
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4051      	eors	r1, r2
 8001bfe:	428e      	cmp	r6, r1
 8001c00:	d1d0      	bne.n	8001ba4 <__aeabi_dsub+0x208>
 8001c02:	4653      	mov	r3, sl
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d100      	bne.n	8001c0a <__aeabi_dsub+0x26e>
 8001c08:	e0be      	b.n	8001d88 <__aeabi_dsub+0x3ec>
 8001c0a:	2f00      	cmp	r7, #0
 8001c0c:	d000      	beq.n	8001c10 <__aeabi_dsub+0x274>
 8001c0e:	e138      	b.n	8001e82 <__aeabi_dsub+0x4e6>
 8001c10:	46ca      	mov	sl, r9
 8001c12:	0022      	movs	r2, r4
 8001c14:	4302      	orrs	r2, r0
 8001c16:	d100      	bne.n	8001c1a <__aeabi_dsub+0x27e>
 8001c18:	e1e2      	b.n	8001fe0 <__aeabi_dsub+0x644>
 8001c1a:	4653      	mov	r3, sl
 8001c1c:	1e59      	subs	r1, r3, #1
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dsub+0x288>
 8001c22:	e20d      	b.n	8002040 <__aeabi_dsub+0x6a4>
 8001c24:	4a32      	ldr	r2, [pc, #200]	@ (8001cf0 <__aeabi_dsub+0x354>)
 8001c26:	4592      	cmp	sl, r2
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dsub+0x290>
 8001c2a:	e1d2      	b.n	8001fd2 <__aeabi_dsub+0x636>
 8001c2c:	2701      	movs	r7, #1
 8001c2e:	2938      	cmp	r1, #56	@ 0x38
 8001c30:	dc13      	bgt.n	8001c5a <__aeabi_dsub+0x2be>
 8001c32:	291f      	cmp	r1, #31
 8001c34:	dd00      	ble.n	8001c38 <__aeabi_dsub+0x29c>
 8001c36:	e1ee      	b.n	8002016 <__aeabi_dsub+0x67a>
 8001c38:	2220      	movs	r2, #32
 8001c3a:	9b02      	ldr	r3, [sp, #8]
 8001c3c:	1a52      	subs	r2, r2, r1
 8001c3e:	0025      	movs	r5, r4
 8001c40:	0007      	movs	r7, r0
 8001c42:	469a      	mov	sl, r3
 8001c44:	40cc      	lsrs	r4, r1
 8001c46:	4090      	lsls	r0, r2
 8001c48:	4095      	lsls	r5, r2
 8001c4a:	40cf      	lsrs	r7, r1
 8001c4c:	44a2      	add	sl, r4
 8001c4e:	1e42      	subs	r2, r0, #1
 8001c50:	4190      	sbcs	r0, r2
 8001c52:	4653      	mov	r3, sl
 8001c54:	432f      	orrs	r7, r5
 8001c56:	4307      	orrs	r7, r0
 8001c58:	9302      	str	r3, [sp, #8]
 8001c5a:	003d      	movs	r5, r7
 8001c5c:	4465      	add	r5, ip
 8001c5e:	4565      	cmp	r5, ip
 8001c60:	4192      	sbcs	r2, r2
 8001c62:	9b02      	ldr	r3, [sp, #8]
 8001c64:	4252      	negs	r2, r2
 8001c66:	464f      	mov	r7, r9
 8001c68:	18d4      	adds	r4, r2, r3
 8001c6a:	e780      	b.n	8001b6e <__aeabi_dsub+0x1d2>
 8001c6c:	4a23      	ldr	r2, [pc, #140]	@ (8001cfc <__aeabi_dsub+0x360>)
 8001c6e:	1c7d      	adds	r5, r7, #1
 8001c70:	4215      	tst	r5, r2
 8001c72:	d000      	beq.n	8001c76 <__aeabi_dsub+0x2da>
 8001c74:	e0aa      	b.n	8001dcc <__aeabi_dsub+0x430>
 8001c76:	4662      	mov	r2, ip
 8001c78:	0025      	movs	r5, r4
 8001c7a:	9b02      	ldr	r3, [sp, #8]
 8001c7c:	4305      	orrs	r5, r0
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	2f00      	cmp	r7, #0
 8001c82:	d000      	beq.n	8001c86 <__aeabi_dsub+0x2ea>
 8001c84:	e0f5      	b.n	8001e72 <__aeabi_dsub+0x4d6>
 8001c86:	2d00      	cmp	r5, #0
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x2f0>
 8001c8a:	e16b      	b.n	8001f64 <__aeabi_dsub+0x5c8>
 8001c8c:	2a00      	cmp	r2, #0
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_dsub+0x2f6>
 8001c90:	e152      	b.n	8001f38 <__aeabi_dsub+0x59c>
 8001c92:	4663      	mov	r3, ip
 8001c94:	1ac5      	subs	r5, r0, r3
 8001c96:	9b02      	ldr	r3, [sp, #8]
 8001c98:	1ae2      	subs	r2, r4, r3
 8001c9a:	42a8      	cmp	r0, r5
 8001c9c:	419b      	sbcs	r3, r3
 8001c9e:	425b      	negs	r3, r3
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	021a      	lsls	r2, r3, #8
 8001ca4:	d400      	bmi.n	8001ca8 <__aeabi_dsub+0x30c>
 8001ca6:	e1d5      	b.n	8002054 <__aeabi_dsub+0x6b8>
 8001ca8:	4663      	mov	r3, ip
 8001caa:	1a1d      	subs	r5, r3, r0
 8001cac:	45ac      	cmp	ip, r5
 8001cae:	4192      	sbcs	r2, r2
 8001cb0:	2601      	movs	r6, #1
 8001cb2:	9b02      	ldr	r3, [sp, #8]
 8001cb4:	4252      	negs	r2, r2
 8001cb6:	1b1c      	subs	r4, r3, r4
 8001cb8:	4688      	mov	r8, r1
 8001cba:	1aa4      	subs	r4, r4, r2
 8001cbc:	400e      	ands	r6, r1
 8001cbe:	e6f6      	b.n	8001aae <__aeabi_dsub+0x112>
 8001cc0:	4297      	cmp	r7, r2
 8001cc2:	d03f      	beq.n	8001d44 <__aeabi_dsub+0x3a8>
 8001cc4:	4652      	mov	r2, sl
 8001cc6:	2501      	movs	r5, #1
 8001cc8:	2a38      	cmp	r2, #56	@ 0x38
 8001cca:	dd00      	ble.n	8001cce <__aeabi_dsub+0x332>
 8001ccc:	e74a      	b.n	8001b64 <__aeabi_dsub+0x1c8>
 8001cce:	2280      	movs	r2, #128	@ 0x80
 8001cd0:	9b02      	ldr	r3, [sp, #8]
 8001cd2:	0412      	lsls	r2, r2, #16
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	9302      	str	r3, [sp, #8]
 8001cd8:	e72d      	b.n	8001b36 <__aeabi_dsub+0x19a>
 8001cda:	003c      	movs	r4, r7
 8001cdc:	2500      	movs	r5, #0
 8001cde:	2200      	movs	r2, #0
 8001ce0:	e705      	b.n	8001aee <__aeabi_dsub+0x152>
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	402b      	ands	r3, r5
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d000      	beq.n	8001cec <__aeabi_dsub+0x350>
 8001cea:	e6e2      	b.n	8001ab2 <__aeabi_dsub+0x116>
 8001cec:	e06b      	b.n	8001dc6 <__aeabi_dsub+0x42a>
 8001cee:	46c0      	nop			@ (mov r8, r8)
 8001cf0:	000007ff 	.word	0x000007ff
 8001cf4:	ff7fffff 	.word	0xff7fffff
 8001cf8:	fffff801 	.word	0xfffff801
 8001cfc:	000007fe 	.word	0x000007fe
 8001d00:	0028      	movs	r0, r5
 8001d02:	f000 fa75 	bl	80021f0 <__clzsi2>
 8001d06:	0003      	movs	r3, r0
 8001d08:	3318      	adds	r3, #24
 8001d0a:	2b1f      	cmp	r3, #31
 8001d0c:	dc00      	bgt.n	8001d10 <__aeabi_dsub+0x374>
 8001d0e:	e6b4      	b.n	8001a7a <__aeabi_dsub+0xde>
 8001d10:	002a      	movs	r2, r5
 8001d12:	3808      	subs	r0, #8
 8001d14:	4082      	lsls	r2, r0
 8001d16:	429f      	cmp	r7, r3
 8001d18:	dd00      	ble.n	8001d1c <__aeabi_dsub+0x380>
 8001d1a:	e0b9      	b.n	8001e90 <__aeabi_dsub+0x4f4>
 8001d1c:	1bdb      	subs	r3, r3, r7
 8001d1e:	1c58      	adds	r0, r3, #1
 8001d20:	281f      	cmp	r0, #31
 8001d22:	dc00      	bgt.n	8001d26 <__aeabi_dsub+0x38a>
 8001d24:	e1a0      	b.n	8002068 <__aeabi_dsub+0x6cc>
 8001d26:	0015      	movs	r5, r2
 8001d28:	3b1f      	subs	r3, #31
 8001d2a:	40dd      	lsrs	r5, r3
 8001d2c:	2820      	cmp	r0, #32
 8001d2e:	d005      	beq.n	8001d3c <__aeabi_dsub+0x3a0>
 8001d30:	2340      	movs	r3, #64	@ 0x40
 8001d32:	1a1b      	subs	r3, r3, r0
 8001d34:	409a      	lsls	r2, r3
 8001d36:	1e53      	subs	r3, r2, #1
 8001d38:	419a      	sbcs	r2, r3
 8001d3a:	4315      	orrs	r5, r2
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	2700      	movs	r7, #0
 8001d40:	402b      	ands	r3, r5
 8001d42:	e7d0      	b.n	8001ce6 <__aeabi_dsub+0x34a>
 8001d44:	08c0      	lsrs	r0, r0, #3
 8001d46:	0762      	lsls	r2, r4, #29
 8001d48:	4302      	orrs	r2, r0
 8001d4a:	08e4      	lsrs	r4, r4, #3
 8001d4c:	e737      	b.n	8001bbe <__aeabi_dsub+0x222>
 8001d4e:	08ea      	lsrs	r2, r5, #3
 8001d50:	0763      	lsls	r3, r4, #29
 8001d52:	431a      	orrs	r2, r3
 8001d54:	4bd3      	ldr	r3, [pc, #844]	@ (80020a4 <__aeabi_dsub+0x708>)
 8001d56:	08e4      	lsrs	r4, r4, #3
 8001d58:	429f      	cmp	r7, r3
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x3c2>
 8001d5c:	e72f      	b.n	8001bbe <__aeabi_dsub+0x222>
 8001d5e:	0324      	lsls	r4, r4, #12
 8001d60:	0b25      	lsrs	r5, r4, #12
 8001d62:	057c      	lsls	r4, r7, #21
 8001d64:	0d64      	lsrs	r4, r4, #21
 8001d66:	e6c2      	b.n	8001aee <__aeabi_dsub+0x152>
 8001d68:	46ca      	mov	sl, r9
 8001d6a:	0022      	movs	r2, r4
 8001d6c:	4302      	orrs	r2, r0
 8001d6e:	d158      	bne.n	8001e22 <__aeabi_dsub+0x486>
 8001d70:	4663      	mov	r3, ip
 8001d72:	000e      	movs	r6, r1
 8001d74:	9c02      	ldr	r4, [sp, #8]
 8001d76:	9303      	str	r3, [sp, #12]
 8001d78:	9b03      	ldr	r3, [sp, #12]
 8001d7a:	4657      	mov	r7, sl
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	e7e7      	b.n	8001d50 <__aeabi_dsub+0x3b4>
 8001d80:	4cc9      	ldr	r4, [pc, #804]	@ (80020a8 <__aeabi_dsub+0x70c>)
 8001d82:	1aff      	subs	r7, r7, r3
 8001d84:	4014      	ands	r4, r2
 8001d86:	e692      	b.n	8001aae <__aeabi_dsub+0x112>
 8001d88:	4dc8      	ldr	r5, [pc, #800]	@ (80020ac <__aeabi_dsub+0x710>)
 8001d8a:	1c7a      	adds	r2, r7, #1
 8001d8c:	422a      	tst	r2, r5
 8001d8e:	d000      	beq.n	8001d92 <__aeabi_dsub+0x3f6>
 8001d90:	e084      	b.n	8001e9c <__aeabi_dsub+0x500>
 8001d92:	0022      	movs	r2, r4
 8001d94:	4302      	orrs	r2, r0
 8001d96:	2f00      	cmp	r7, #0
 8001d98:	d000      	beq.n	8001d9c <__aeabi_dsub+0x400>
 8001d9a:	e0ef      	b.n	8001f7c <__aeabi_dsub+0x5e0>
 8001d9c:	2a00      	cmp	r2, #0
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x406>
 8001da0:	e0e5      	b.n	8001f6e <__aeabi_dsub+0x5d2>
 8001da2:	4662      	mov	r2, ip
 8001da4:	9902      	ldr	r1, [sp, #8]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x410>
 8001daa:	e0c5      	b.n	8001f38 <__aeabi_dsub+0x59c>
 8001dac:	4663      	mov	r3, ip
 8001dae:	18c5      	adds	r5, r0, r3
 8001db0:	468c      	mov	ip, r1
 8001db2:	4285      	cmp	r5, r0
 8001db4:	4180      	sbcs	r0, r0
 8001db6:	4464      	add	r4, ip
 8001db8:	4240      	negs	r0, r0
 8001dba:	1824      	adds	r4, r4, r0
 8001dbc:	0223      	lsls	r3, r4, #8
 8001dbe:	d502      	bpl.n	8001dc6 <__aeabi_dsub+0x42a>
 8001dc0:	4bb9      	ldr	r3, [pc, #740]	@ (80020a8 <__aeabi_dsub+0x70c>)
 8001dc2:	3701      	adds	r7, #1
 8001dc4:	401c      	ands	r4, r3
 8001dc6:	46ba      	mov	sl, r7
 8001dc8:	9503      	str	r5, [sp, #12]
 8001dca:	e7d5      	b.n	8001d78 <__aeabi_dsub+0x3dc>
 8001dcc:	4662      	mov	r2, ip
 8001dce:	1a85      	subs	r5, r0, r2
 8001dd0:	42a8      	cmp	r0, r5
 8001dd2:	4192      	sbcs	r2, r2
 8001dd4:	4252      	negs	r2, r2
 8001dd6:	4691      	mov	r9, r2
 8001dd8:	9b02      	ldr	r3, [sp, #8]
 8001dda:	1ae3      	subs	r3, r4, r3
 8001ddc:	001a      	movs	r2, r3
 8001dde:	464b      	mov	r3, r9
 8001de0:	1ad2      	subs	r2, r2, r3
 8001de2:	0013      	movs	r3, r2
 8001de4:	4691      	mov	r9, r2
 8001de6:	021a      	lsls	r2, r3, #8
 8001de8:	d46c      	bmi.n	8001ec4 <__aeabi_dsub+0x528>
 8001dea:	464a      	mov	r2, r9
 8001dec:	464c      	mov	r4, r9
 8001dee:	432a      	orrs	r2, r5
 8001df0:	d000      	beq.n	8001df4 <__aeabi_dsub+0x458>
 8001df2:	e63a      	b.n	8001a6a <__aeabi_dsub+0xce>
 8001df4:	2600      	movs	r6, #0
 8001df6:	2400      	movs	r4, #0
 8001df8:	2500      	movs	r5, #0
 8001dfa:	e678      	b.n	8001aee <__aeabi_dsub+0x152>
 8001dfc:	9902      	ldr	r1, [sp, #8]
 8001dfe:	4653      	mov	r3, sl
 8001e00:	000d      	movs	r5, r1
 8001e02:	3a20      	subs	r2, #32
 8001e04:	40d5      	lsrs	r5, r2
 8001e06:	2b20      	cmp	r3, #32
 8001e08:	d006      	beq.n	8001e18 <__aeabi_dsub+0x47c>
 8001e0a:	2240      	movs	r2, #64	@ 0x40
 8001e0c:	1ad2      	subs	r2, r2, r3
 8001e0e:	000b      	movs	r3, r1
 8001e10:	4093      	lsls	r3, r2
 8001e12:	4662      	mov	r2, ip
 8001e14:	431a      	orrs	r2, r3
 8001e16:	4693      	mov	fp, r2
 8001e18:	465b      	mov	r3, fp
 8001e1a:	1e5a      	subs	r2, r3, #1
 8001e1c:	4193      	sbcs	r3, r2
 8001e1e:	431d      	orrs	r5, r3
 8001e20:	e619      	b.n	8001a56 <__aeabi_dsub+0xba>
 8001e22:	4653      	mov	r3, sl
 8001e24:	1e5a      	subs	r2, r3, #1
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x490>
 8001e2a:	e0c6      	b.n	8001fba <__aeabi_dsub+0x61e>
 8001e2c:	4e9d      	ldr	r6, [pc, #628]	@ (80020a4 <__aeabi_dsub+0x708>)
 8001e2e:	45b2      	cmp	sl, r6
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x498>
 8001e32:	e6bd      	b.n	8001bb0 <__aeabi_dsub+0x214>
 8001e34:	4688      	mov	r8, r1
 8001e36:	000e      	movs	r6, r1
 8001e38:	2501      	movs	r5, #1
 8001e3a:	2a38      	cmp	r2, #56	@ 0x38
 8001e3c:	dc10      	bgt.n	8001e60 <__aeabi_dsub+0x4c4>
 8001e3e:	2a1f      	cmp	r2, #31
 8001e40:	dc7f      	bgt.n	8001f42 <__aeabi_dsub+0x5a6>
 8001e42:	2120      	movs	r1, #32
 8001e44:	0025      	movs	r5, r4
 8001e46:	1a89      	subs	r1, r1, r2
 8001e48:	0007      	movs	r7, r0
 8001e4a:	4088      	lsls	r0, r1
 8001e4c:	408d      	lsls	r5, r1
 8001e4e:	40d7      	lsrs	r7, r2
 8001e50:	40d4      	lsrs	r4, r2
 8001e52:	1e41      	subs	r1, r0, #1
 8001e54:	4188      	sbcs	r0, r1
 8001e56:	9b02      	ldr	r3, [sp, #8]
 8001e58:	433d      	orrs	r5, r7
 8001e5a:	1b1b      	subs	r3, r3, r4
 8001e5c:	4305      	orrs	r5, r0
 8001e5e:	9302      	str	r3, [sp, #8]
 8001e60:	4662      	mov	r2, ip
 8001e62:	1b55      	subs	r5, r2, r5
 8001e64:	45ac      	cmp	ip, r5
 8001e66:	4192      	sbcs	r2, r2
 8001e68:	9b02      	ldr	r3, [sp, #8]
 8001e6a:	4252      	negs	r2, r2
 8001e6c:	464f      	mov	r7, r9
 8001e6e:	1a9c      	subs	r4, r3, r2
 8001e70:	e5f6      	b.n	8001a60 <__aeabi_dsub+0xc4>
 8001e72:	2d00      	cmp	r5, #0
 8001e74:	d000      	beq.n	8001e78 <__aeabi_dsub+0x4dc>
 8001e76:	e0b7      	b.n	8001fe8 <__aeabi_dsub+0x64c>
 8001e78:	2a00      	cmp	r2, #0
 8001e7a:	d100      	bne.n	8001e7e <__aeabi_dsub+0x4e2>
 8001e7c:	e0f0      	b.n	8002060 <__aeabi_dsub+0x6c4>
 8001e7e:	2601      	movs	r6, #1
 8001e80:	400e      	ands	r6, r1
 8001e82:	4663      	mov	r3, ip
 8001e84:	9802      	ldr	r0, [sp, #8]
 8001e86:	08d9      	lsrs	r1, r3, #3
 8001e88:	0742      	lsls	r2, r0, #29
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	08c4      	lsrs	r4, r0, #3
 8001e8e:	e696      	b.n	8001bbe <__aeabi_dsub+0x222>
 8001e90:	4c85      	ldr	r4, [pc, #532]	@ (80020a8 <__aeabi_dsub+0x70c>)
 8001e92:	1aff      	subs	r7, r7, r3
 8001e94:	4014      	ands	r4, r2
 8001e96:	0762      	lsls	r2, r4, #29
 8001e98:	08e4      	lsrs	r4, r4, #3
 8001e9a:	e760      	b.n	8001d5e <__aeabi_dsub+0x3c2>
 8001e9c:	4981      	ldr	r1, [pc, #516]	@ (80020a4 <__aeabi_dsub+0x708>)
 8001e9e:	428a      	cmp	r2, r1
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x508>
 8001ea2:	e0c9      	b.n	8002038 <__aeabi_dsub+0x69c>
 8001ea4:	4663      	mov	r3, ip
 8001ea6:	18c1      	adds	r1, r0, r3
 8001ea8:	4281      	cmp	r1, r0
 8001eaa:	4180      	sbcs	r0, r0
 8001eac:	9b02      	ldr	r3, [sp, #8]
 8001eae:	4240      	negs	r0, r0
 8001eb0:	18e3      	adds	r3, r4, r3
 8001eb2:	181b      	adds	r3, r3, r0
 8001eb4:	07dd      	lsls	r5, r3, #31
 8001eb6:	085c      	lsrs	r4, r3, #1
 8001eb8:	2307      	movs	r3, #7
 8001eba:	0849      	lsrs	r1, r1, #1
 8001ebc:	430d      	orrs	r5, r1
 8001ebe:	0017      	movs	r7, r2
 8001ec0:	402b      	ands	r3, r5
 8001ec2:	e710      	b.n	8001ce6 <__aeabi_dsub+0x34a>
 8001ec4:	4663      	mov	r3, ip
 8001ec6:	1a1d      	subs	r5, r3, r0
 8001ec8:	45ac      	cmp	ip, r5
 8001eca:	4192      	sbcs	r2, r2
 8001ecc:	2601      	movs	r6, #1
 8001ece:	9b02      	ldr	r3, [sp, #8]
 8001ed0:	4252      	negs	r2, r2
 8001ed2:	1b1c      	subs	r4, r3, r4
 8001ed4:	4688      	mov	r8, r1
 8001ed6:	1aa4      	subs	r4, r4, r2
 8001ed8:	400e      	ands	r6, r1
 8001eda:	e5c6      	b.n	8001a6a <__aeabi_dsub+0xce>
 8001edc:	4663      	mov	r3, ip
 8001ede:	18c5      	adds	r5, r0, r3
 8001ee0:	9b02      	ldr	r3, [sp, #8]
 8001ee2:	4285      	cmp	r5, r0
 8001ee4:	4180      	sbcs	r0, r0
 8001ee6:	469c      	mov	ip, r3
 8001ee8:	4240      	negs	r0, r0
 8001eea:	4464      	add	r4, ip
 8001eec:	1824      	adds	r4, r4, r0
 8001eee:	2701      	movs	r7, #1
 8001ef0:	0223      	lsls	r3, r4, #8
 8001ef2:	d400      	bmi.n	8001ef6 <__aeabi_dsub+0x55a>
 8001ef4:	e6f5      	b.n	8001ce2 <__aeabi_dsub+0x346>
 8001ef6:	2702      	movs	r7, #2
 8001ef8:	e641      	b.n	8001b7e <__aeabi_dsub+0x1e2>
 8001efa:	4663      	mov	r3, ip
 8001efc:	1ac5      	subs	r5, r0, r3
 8001efe:	42a8      	cmp	r0, r5
 8001f00:	4180      	sbcs	r0, r0
 8001f02:	9b02      	ldr	r3, [sp, #8]
 8001f04:	4240      	negs	r0, r0
 8001f06:	1ae4      	subs	r4, r4, r3
 8001f08:	2701      	movs	r7, #1
 8001f0a:	1a24      	subs	r4, r4, r0
 8001f0c:	e5a8      	b.n	8001a60 <__aeabi_dsub+0xc4>
 8001f0e:	9d02      	ldr	r5, [sp, #8]
 8001f10:	4652      	mov	r2, sl
 8001f12:	002b      	movs	r3, r5
 8001f14:	3a20      	subs	r2, #32
 8001f16:	40d3      	lsrs	r3, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	4653      	mov	r3, sl
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d006      	beq.n	8001f2e <__aeabi_dsub+0x592>
 8001f20:	2240      	movs	r2, #64	@ 0x40
 8001f22:	1ad2      	subs	r2, r2, r3
 8001f24:	002b      	movs	r3, r5
 8001f26:	4093      	lsls	r3, r2
 8001f28:	4662      	mov	r2, ip
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	4693      	mov	fp, r2
 8001f2e:	465d      	mov	r5, fp
 8001f30:	1e6b      	subs	r3, r5, #1
 8001f32:	419d      	sbcs	r5, r3
 8001f34:	430d      	orrs	r5, r1
 8001f36:	e615      	b.n	8001b64 <__aeabi_dsub+0x1c8>
 8001f38:	0762      	lsls	r2, r4, #29
 8001f3a:	08c0      	lsrs	r0, r0, #3
 8001f3c:	4302      	orrs	r2, r0
 8001f3e:	08e4      	lsrs	r4, r4, #3
 8001f40:	e70d      	b.n	8001d5e <__aeabi_dsub+0x3c2>
 8001f42:	0011      	movs	r1, r2
 8001f44:	0027      	movs	r7, r4
 8001f46:	3920      	subs	r1, #32
 8001f48:	40cf      	lsrs	r7, r1
 8001f4a:	2a20      	cmp	r2, #32
 8001f4c:	d005      	beq.n	8001f5a <__aeabi_dsub+0x5be>
 8001f4e:	2140      	movs	r1, #64	@ 0x40
 8001f50:	1a8a      	subs	r2, r1, r2
 8001f52:	4094      	lsls	r4, r2
 8001f54:	0025      	movs	r5, r4
 8001f56:	4305      	orrs	r5, r0
 8001f58:	9503      	str	r5, [sp, #12]
 8001f5a:	9d03      	ldr	r5, [sp, #12]
 8001f5c:	1e6a      	subs	r2, r5, #1
 8001f5e:	4195      	sbcs	r5, r2
 8001f60:	433d      	orrs	r5, r7
 8001f62:	e77d      	b.n	8001e60 <__aeabi_dsub+0x4c4>
 8001f64:	2a00      	cmp	r2, #0
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x5ce>
 8001f68:	e744      	b.n	8001df4 <__aeabi_dsub+0x458>
 8001f6a:	2601      	movs	r6, #1
 8001f6c:	400e      	ands	r6, r1
 8001f6e:	4663      	mov	r3, ip
 8001f70:	08d9      	lsrs	r1, r3, #3
 8001f72:	9b02      	ldr	r3, [sp, #8]
 8001f74:	075a      	lsls	r2, r3, #29
 8001f76:	430a      	orrs	r2, r1
 8001f78:	08dc      	lsrs	r4, r3, #3
 8001f7a:	e6f0      	b.n	8001d5e <__aeabi_dsub+0x3c2>
 8001f7c:	2a00      	cmp	r2, #0
 8001f7e:	d028      	beq.n	8001fd2 <__aeabi_dsub+0x636>
 8001f80:	4662      	mov	r2, ip
 8001f82:	9f02      	ldr	r7, [sp, #8]
 8001f84:	08c0      	lsrs	r0, r0, #3
 8001f86:	433a      	orrs	r2, r7
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dsub+0x5f0>
 8001f8a:	e6dc      	b.n	8001d46 <__aeabi_dsub+0x3aa>
 8001f8c:	0762      	lsls	r2, r4, #29
 8001f8e:	4310      	orrs	r0, r2
 8001f90:	2280      	movs	r2, #128	@ 0x80
 8001f92:	08e4      	lsrs	r4, r4, #3
 8001f94:	0312      	lsls	r2, r2, #12
 8001f96:	4214      	tst	r4, r2
 8001f98:	d009      	beq.n	8001fae <__aeabi_dsub+0x612>
 8001f9a:	08fd      	lsrs	r5, r7, #3
 8001f9c:	4215      	tst	r5, r2
 8001f9e:	d106      	bne.n	8001fae <__aeabi_dsub+0x612>
 8001fa0:	4663      	mov	r3, ip
 8001fa2:	2601      	movs	r6, #1
 8001fa4:	002c      	movs	r4, r5
 8001fa6:	08d8      	lsrs	r0, r3, #3
 8001fa8:	077b      	lsls	r3, r7, #29
 8001faa:	4318      	orrs	r0, r3
 8001fac:	400e      	ands	r6, r1
 8001fae:	0f42      	lsrs	r2, r0, #29
 8001fb0:	00c0      	lsls	r0, r0, #3
 8001fb2:	08c0      	lsrs	r0, r0, #3
 8001fb4:	0752      	lsls	r2, r2, #29
 8001fb6:	4302      	orrs	r2, r0
 8001fb8:	e601      	b.n	8001bbe <__aeabi_dsub+0x222>
 8001fba:	4663      	mov	r3, ip
 8001fbc:	1a1d      	subs	r5, r3, r0
 8001fbe:	45ac      	cmp	ip, r5
 8001fc0:	4192      	sbcs	r2, r2
 8001fc2:	9b02      	ldr	r3, [sp, #8]
 8001fc4:	4252      	negs	r2, r2
 8001fc6:	1b1c      	subs	r4, r3, r4
 8001fc8:	000e      	movs	r6, r1
 8001fca:	4688      	mov	r8, r1
 8001fcc:	2701      	movs	r7, #1
 8001fce:	1aa4      	subs	r4, r4, r2
 8001fd0:	e546      	b.n	8001a60 <__aeabi_dsub+0xc4>
 8001fd2:	4663      	mov	r3, ip
 8001fd4:	08d9      	lsrs	r1, r3, #3
 8001fd6:	9b02      	ldr	r3, [sp, #8]
 8001fd8:	075a      	lsls	r2, r3, #29
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	08dc      	lsrs	r4, r3, #3
 8001fde:	e5ee      	b.n	8001bbe <__aeabi_dsub+0x222>
 8001fe0:	4663      	mov	r3, ip
 8001fe2:	9c02      	ldr	r4, [sp, #8]
 8001fe4:	9303      	str	r3, [sp, #12]
 8001fe6:	e6c7      	b.n	8001d78 <__aeabi_dsub+0x3dc>
 8001fe8:	08c0      	lsrs	r0, r0, #3
 8001fea:	2a00      	cmp	r2, #0
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x654>
 8001fee:	e6aa      	b.n	8001d46 <__aeabi_dsub+0x3aa>
 8001ff0:	0762      	lsls	r2, r4, #29
 8001ff2:	4310      	orrs	r0, r2
 8001ff4:	2280      	movs	r2, #128	@ 0x80
 8001ff6:	08e4      	lsrs	r4, r4, #3
 8001ff8:	0312      	lsls	r2, r2, #12
 8001ffa:	4214      	tst	r4, r2
 8001ffc:	d0d7      	beq.n	8001fae <__aeabi_dsub+0x612>
 8001ffe:	9f02      	ldr	r7, [sp, #8]
 8002000:	08fd      	lsrs	r5, r7, #3
 8002002:	4215      	tst	r5, r2
 8002004:	d1d3      	bne.n	8001fae <__aeabi_dsub+0x612>
 8002006:	4663      	mov	r3, ip
 8002008:	2601      	movs	r6, #1
 800200a:	08d8      	lsrs	r0, r3, #3
 800200c:	077b      	lsls	r3, r7, #29
 800200e:	002c      	movs	r4, r5
 8002010:	4318      	orrs	r0, r3
 8002012:	400e      	ands	r6, r1
 8002014:	e7cb      	b.n	8001fae <__aeabi_dsub+0x612>
 8002016:	000a      	movs	r2, r1
 8002018:	0027      	movs	r7, r4
 800201a:	3a20      	subs	r2, #32
 800201c:	40d7      	lsrs	r7, r2
 800201e:	2920      	cmp	r1, #32
 8002020:	d005      	beq.n	800202e <__aeabi_dsub+0x692>
 8002022:	2240      	movs	r2, #64	@ 0x40
 8002024:	1a52      	subs	r2, r2, r1
 8002026:	4094      	lsls	r4, r2
 8002028:	0025      	movs	r5, r4
 800202a:	4305      	orrs	r5, r0
 800202c:	9503      	str	r5, [sp, #12]
 800202e:	9d03      	ldr	r5, [sp, #12]
 8002030:	1e6a      	subs	r2, r5, #1
 8002032:	4195      	sbcs	r5, r2
 8002034:	432f      	orrs	r7, r5
 8002036:	e610      	b.n	8001c5a <__aeabi_dsub+0x2be>
 8002038:	0014      	movs	r4, r2
 800203a:	2500      	movs	r5, #0
 800203c:	2200      	movs	r2, #0
 800203e:	e556      	b.n	8001aee <__aeabi_dsub+0x152>
 8002040:	9b02      	ldr	r3, [sp, #8]
 8002042:	4460      	add	r0, ip
 8002044:	4699      	mov	r9, r3
 8002046:	4560      	cmp	r0, ip
 8002048:	4192      	sbcs	r2, r2
 800204a:	444c      	add	r4, r9
 800204c:	4252      	negs	r2, r2
 800204e:	0005      	movs	r5, r0
 8002050:	18a4      	adds	r4, r4, r2
 8002052:	e74c      	b.n	8001eee <__aeabi_dsub+0x552>
 8002054:	001a      	movs	r2, r3
 8002056:	001c      	movs	r4, r3
 8002058:	432a      	orrs	r2, r5
 800205a:	d000      	beq.n	800205e <__aeabi_dsub+0x6c2>
 800205c:	e6b3      	b.n	8001dc6 <__aeabi_dsub+0x42a>
 800205e:	e6c9      	b.n	8001df4 <__aeabi_dsub+0x458>
 8002060:	2480      	movs	r4, #128	@ 0x80
 8002062:	2600      	movs	r6, #0
 8002064:	0324      	lsls	r4, r4, #12
 8002066:	e5ae      	b.n	8001bc6 <__aeabi_dsub+0x22a>
 8002068:	2120      	movs	r1, #32
 800206a:	2500      	movs	r5, #0
 800206c:	1a09      	subs	r1, r1, r0
 800206e:	e517      	b.n	8001aa0 <__aeabi_dsub+0x104>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	4c0b      	ldr	r4, [pc, #44]	@ (80020a4 <__aeabi_dsub+0x708>)
 8002076:	e53a      	b.n	8001aee <__aeabi_dsub+0x152>
 8002078:	2d00      	cmp	r5, #0
 800207a:	d100      	bne.n	800207e <__aeabi_dsub+0x6e2>
 800207c:	e5f6      	b.n	8001c6c <__aeabi_dsub+0x2d0>
 800207e:	464b      	mov	r3, r9
 8002080:	1bda      	subs	r2, r3, r7
 8002082:	4692      	mov	sl, r2
 8002084:	2f00      	cmp	r7, #0
 8002086:	d100      	bne.n	800208a <__aeabi_dsub+0x6ee>
 8002088:	e66f      	b.n	8001d6a <__aeabi_dsub+0x3ce>
 800208a:	2a38      	cmp	r2, #56	@ 0x38
 800208c:	dc05      	bgt.n	800209a <__aeabi_dsub+0x6fe>
 800208e:	2680      	movs	r6, #128	@ 0x80
 8002090:	0436      	lsls	r6, r6, #16
 8002092:	4334      	orrs	r4, r6
 8002094:	4688      	mov	r8, r1
 8002096:	000e      	movs	r6, r1
 8002098:	e6d1      	b.n	8001e3e <__aeabi_dsub+0x4a2>
 800209a:	4688      	mov	r8, r1
 800209c:	000e      	movs	r6, r1
 800209e:	2501      	movs	r5, #1
 80020a0:	e6de      	b.n	8001e60 <__aeabi_dsub+0x4c4>
 80020a2:	46c0      	nop			@ (mov r8, r8)
 80020a4:	000007ff 	.word	0x000007ff
 80020a8:	ff7fffff 	.word	0xff7fffff
 80020ac:	000007fe 	.word	0x000007fe
 80020b0:	2d00      	cmp	r5, #0
 80020b2:	d100      	bne.n	80020b6 <__aeabi_dsub+0x71a>
 80020b4:	e668      	b.n	8001d88 <__aeabi_dsub+0x3ec>
 80020b6:	464b      	mov	r3, r9
 80020b8:	1bd9      	subs	r1, r3, r7
 80020ba:	2f00      	cmp	r7, #0
 80020bc:	d101      	bne.n	80020c2 <__aeabi_dsub+0x726>
 80020be:	468a      	mov	sl, r1
 80020c0:	e5a7      	b.n	8001c12 <__aeabi_dsub+0x276>
 80020c2:	2701      	movs	r7, #1
 80020c4:	2938      	cmp	r1, #56	@ 0x38
 80020c6:	dd00      	ble.n	80020ca <__aeabi_dsub+0x72e>
 80020c8:	e5c7      	b.n	8001c5a <__aeabi_dsub+0x2be>
 80020ca:	2280      	movs	r2, #128	@ 0x80
 80020cc:	0412      	lsls	r2, r2, #16
 80020ce:	4314      	orrs	r4, r2
 80020d0:	e5af      	b.n	8001c32 <__aeabi_dsub+0x296>
 80020d2:	46c0      	nop			@ (mov r8, r8)

080020d4 <__aeabi_d2iz>:
 80020d4:	000b      	movs	r3, r1
 80020d6:	0002      	movs	r2, r0
 80020d8:	b570      	push	{r4, r5, r6, lr}
 80020da:	4d16      	ldr	r5, [pc, #88]	@ (8002134 <__aeabi_d2iz+0x60>)
 80020dc:	030c      	lsls	r4, r1, #12
 80020de:	b082      	sub	sp, #8
 80020e0:	0049      	lsls	r1, r1, #1
 80020e2:	2000      	movs	r0, #0
 80020e4:	9200      	str	r2, [sp, #0]
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	0b24      	lsrs	r4, r4, #12
 80020ea:	0d49      	lsrs	r1, r1, #21
 80020ec:	0fde      	lsrs	r6, r3, #31
 80020ee:	42a9      	cmp	r1, r5
 80020f0:	dd04      	ble.n	80020fc <__aeabi_d2iz+0x28>
 80020f2:	4811      	ldr	r0, [pc, #68]	@ (8002138 <__aeabi_d2iz+0x64>)
 80020f4:	4281      	cmp	r1, r0
 80020f6:	dd03      	ble.n	8002100 <__aeabi_d2iz+0x2c>
 80020f8:	4b10      	ldr	r3, [pc, #64]	@ (800213c <__aeabi_d2iz+0x68>)
 80020fa:	18f0      	adds	r0, r6, r3
 80020fc:	b002      	add	sp, #8
 80020fe:	bd70      	pop	{r4, r5, r6, pc}
 8002100:	2080      	movs	r0, #128	@ 0x80
 8002102:	0340      	lsls	r0, r0, #13
 8002104:	4320      	orrs	r0, r4
 8002106:	4c0e      	ldr	r4, [pc, #56]	@ (8002140 <__aeabi_d2iz+0x6c>)
 8002108:	1a64      	subs	r4, r4, r1
 800210a:	2c1f      	cmp	r4, #31
 800210c:	dd08      	ble.n	8002120 <__aeabi_d2iz+0x4c>
 800210e:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <__aeabi_d2iz+0x70>)
 8002110:	1a5b      	subs	r3, r3, r1
 8002112:	40d8      	lsrs	r0, r3
 8002114:	0003      	movs	r3, r0
 8002116:	4258      	negs	r0, r3
 8002118:	2e00      	cmp	r6, #0
 800211a:	d1ef      	bne.n	80020fc <__aeabi_d2iz+0x28>
 800211c:	0018      	movs	r0, r3
 800211e:	e7ed      	b.n	80020fc <__aeabi_d2iz+0x28>
 8002120:	4b09      	ldr	r3, [pc, #36]	@ (8002148 <__aeabi_d2iz+0x74>)
 8002122:	9a00      	ldr	r2, [sp, #0]
 8002124:	469c      	mov	ip, r3
 8002126:	0003      	movs	r3, r0
 8002128:	4461      	add	r1, ip
 800212a:	408b      	lsls	r3, r1
 800212c:	40e2      	lsrs	r2, r4
 800212e:	4313      	orrs	r3, r2
 8002130:	e7f1      	b.n	8002116 <__aeabi_d2iz+0x42>
 8002132:	46c0      	nop			@ (mov r8, r8)
 8002134:	000003fe 	.word	0x000003fe
 8002138:	0000041d 	.word	0x0000041d
 800213c:	7fffffff 	.word	0x7fffffff
 8002140:	00000433 	.word	0x00000433
 8002144:	00000413 	.word	0x00000413
 8002148:	fffffbed 	.word	0xfffffbed

0800214c <__aeabi_i2d>:
 800214c:	b570      	push	{r4, r5, r6, lr}
 800214e:	2800      	cmp	r0, #0
 8002150:	d016      	beq.n	8002180 <__aeabi_i2d+0x34>
 8002152:	17c3      	asrs	r3, r0, #31
 8002154:	18c5      	adds	r5, r0, r3
 8002156:	405d      	eors	r5, r3
 8002158:	0fc4      	lsrs	r4, r0, #31
 800215a:	0028      	movs	r0, r5
 800215c:	f000 f848 	bl	80021f0 <__clzsi2>
 8002160:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <__aeabi_i2d+0x58>)
 8002162:	1a1b      	subs	r3, r3, r0
 8002164:	055b      	lsls	r3, r3, #21
 8002166:	0d5b      	lsrs	r3, r3, #21
 8002168:	280a      	cmp	r0, #10
 800216a:	dc14      	bgt.n	8002196 <__aeabi_i2d+0x4a>
 800216c:	0002      	movs	r2, r0
 800216e:	002e      	movs	r6, r5
 8002170:	3215      	adds	r2, #21
 8002172:	4096      	lsls	r6, r2
 8002174:	220b      	movs	r2, #11
 8002176:	1a12      	subs	r2, r2, r0
 8002178:	40d5      	lsrs	r5, r2
 800217a:	032d      	lsls	r5, r5, #12
 800217c:	0b2d      	lsrs	r5, r5, #12
 800217e:	e003      	b.n	8002188 <__aeabi_i2d+0x3c>
 8002180:	2400      	movs	r4, #0
 8002182:	2300      	movs	r3, #0
 8002184:	2500      	movs	r5, #0
 8002186:	2600      	movs	r6, #0
 8002188:	051b      	lsls	r3, r3, #20
 800218a:	432b      	orrs	r3, r5
 800218c:	07e4      	lsls	r4, r4, #31
 800218e:	4323      	orrs	r3, r4
 8002190:	0030      	movs	r0, r6
 8002192:	0019      	movs	r1, r3
 8002194:	bd70      	pop	{r4, r5, r6, pc}
 8002196:	380b      	subs	r0, #11
 8002198:	4085      	lsls	r5, r0
 800219a:	032d      	lsls	r5, r5, #12
 800219c:	2600      	movs	r6, #0
 800219e:	0b2d      	lsrs	r5, r5, #12
 80021a0:	e7f2      	b.n	8002188 <__aeabi_i2d+0x3c>
 80021a2:	46c0      	nop			@ (mov r8, r8)
 80021a4:	0000041e 	.word	0x0000041e

080021a8 <__aeabi_ui2d>:
 80021a8:	b510      	push	{r4, lr}
 80021aa:	1e04      	subs	r4, r0, #0
 80021ac:	d010      	beq.n	80021d0 <__aeabi_ui2d+0x28>
 80021ae:	f000 f81f 	bl	80021f0 <__clzsi2>
 80021b2:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <__aeabi_ui2d+0x44>)
 80021b4:	1a1b      	subs	r3, r3, r0
 80021b6:	055b      	lsls	r3, r3, #21
 80021b8:	0d5b      	lsrs	r3, r3, #21
 80021ba:	280a      	cmp	r0, #10
 80021bc:	dc0f      	bgt.n	80021de <__aeabi_ui2d+0x36>
 80021be:	220b      	movs	r2, #11
 80021c0:	0021      	movs	r1, r4
 80021c2:	1a12      	subs	r2, r2, r0
 80021c4:	40d1      	lsrs	r1, r2
 80021c6:	3015      	adds	r0, #21
 80021c8:	030a      	lsls	r2, r1, #12
 80021ca:	4084      	lsls	r4, r0
 80021cc:	0b12      	lsrs	r2, r2, #12
 80021ce:	e001      	b.n	80021d4 <__aeabi_ui2d+0x2c>
 80021d0:	2300      	movs	r3, #0
 80021d2:	2200      	movs	r2, #0
 80021d4:	051b      	lsls	r3, r3, #20
 80021d6:	4313      	orrs	r3, r2
 80021d8:	0020      	movs	r0, r4
 80021da:	0019      	movs	r1, r3
 80021dc:	bd10      	pop	{r4, pc}
 80021de:	0022      	movs	r2, r4
 80021e0:	380b      	subs	r0, #11
 80021e2:	4082      	lsls	r2, r0
 80021e4:	0312      	lsls	r2, r2, #12
 80021e6:	2400      	movs	r4, #0
 80021e8:	0b12      	lsrs	r2, r2, #12
 80021ea:	e7f3      	b.n	80021d4 <__aeabi_ui2d+0x2c>
 80021ec:	0000041e 	.word	0x0000041e

080021f0 <__clzsi2>:
 80021f0:	211c      	movs	r1, #28
 80021f2:	2301      	movs	r3, #1
 80021f4:	041b      	lsls	r3, r3, #16
 80021f6:	4298      	cmp	r0, r3
 80021f8:	d301      	bcc.n	80021fe <__clzsi2+0xe>
 80021fa:	0c00      	lsrs	r0, r0, #16
 80021fc:	3910      	subs	r1, #16
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	4298      	cmp	r0, r3
 8002202:	d301      	bcc.n	8002208 <__clzsi2+0x18>
 8002204:	0a00      	lsrs	r0, r0, #8
 8002206:	3908      	subs	r1, #8
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	4298      	cmp	r0, r3
 800220c:	d301      	bcc.n	8002212 <__clzsi2+0x22>
 800220e:	0900      	lsrs	r0, r0, #4
 8002210:	3904      	subs	r1, #4
 8002212:	a202      	add	r2, pc, #8	@ (adr r2, 800221c <__clzsi2+0x2c>)
 8002214:	5c10      	ldrb	r0, [r2, r0]
 8002216:	1840      	adds	r0, r0, r1
 8002218:	4770      	bx	lr
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	02020304 	.word	0x02020304
 8002220:	01010101 	.word	0x01010101
	...

0800222c <UART_Transmit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART_Transmit (uint32_t byte_count, uint32_t *data_buffer_ptr)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1, data_buffer_ptr, byte_count, HAL_MAX_DELAY);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	b29a      	uxth	r2, r3
 800223a:	2301      	movs	r3, #1
 800223c:	425b      	negs	r3, r3
 800223e:	6839      	ldr	r1, [r7, #0]
 8002240:	4803      	ldr	r0, [pc, #12]	@ (8002250 <UART_Transmit+0x24>)
 8002242:	f003 fa5b 	bl	80056fc <HAL_UART_Transmit>
}
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	46bd      	mov	sp, r7
 800224a:	b002      	add	sp, #8
 800224c:	bd80      	pop	{r7, pc}
 800224e:	46c0      	nop			@ (mov r8, r8)
 8002250:	2000011c 	.word	0x2000011c

08002254 <PWM_Signal>:
{}
void USR_Signal_3()
{}

void PWM_Signal (uint32_t start_level, uint32_t duty, uint32_t period)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
	htim3.Instance->ARR = period; htim3.Instance->EGR |= TIM_EGR_UG;
 8002260:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <PWM_Signal+0x50>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002268:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <PWM_Signal+0x50>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	4b0d      	ldr	r3, [pc, #52]	@ (80022a4 <PWM_Signal+0x50>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2101      	movs	r1, #1
 8002274:	430a      	orrs	r2, r1
 8002276:	615a      	str	r2, [r3, #20]
	if (start_level == 1)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d104      	bne.n	8002288 <PWM_Signal+0x34>
	{
		htim3.Instance->CCR3 = duty;
 800227e:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <PWM_Signal+0x50>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else if (start_level == 2)
	{
		htim3.Instance->CCR3 = (period - duty);
	}
}
 8002286:	e008      	b.n	800229a <PWM_Signal+0x46>
	else if (start_level == 2)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d105      	bne.n	800229a <PWM_Signal+0x46>
		htim3.Instance->CCR3 = (period - duty);
 800228e:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <PWM_Signal+0x50>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	1a8a      	subs	r2, r1, r2
 8002298:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800229a:	46c0      	nop			@ (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	b004      	add	sp, #16
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			@ (mov r8, r8)
 80022a4:	2000008c 	.word	0x2000008c

080022a8 <SIN_Signal>:

void SIN_Signal (uint32_t period)
{
 80022a8:	b5b0      	push	{r4, r5, r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	while(1)
	{
		for (int i = 0; i < period/2; i++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	e04a      	b.n	800234c <SIN_Signal+0xa4>
		{
			uint16_t value = (DAC_MAX / 2) + (DAC_MAX / 2) * sin(i * 2 * PI / (period/2));
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7ff ff46 	bl	800214c <__aeabi_i2d>
 80022c0:	4a25      	ldr	r2, [pc, #148]	@ (8002358 <SIN_Signal+0xb0>)
 80022c2:	4b26      	ldr	r3, [pc, #152]	@ (800235c <SIN_Signal+0xb4>)
 80022c4:	f7ff f8a2 	bl	800140c <__aeabi_dmul>
 80022c8:	0002      	movs	r2, r0
 80022ca:	000b      	movs	r3, r1
 80022cc:	0014      	movs	r4, r2
 80022ce:	001d      	movs	r5, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	085b      	lsrs	r3, r3, #1
 80022d4:	0018      	movs	r0, r3
 80022d6:	f7ff ff67 	bl	80021a8 <__aeabi_ui2d>
 80022da:	0002      	movs	r2, r0
 80022dc:	000b      	movs	r3, r1
 80022de:	0020      	movs	r0, r4
 80022e0:	0029      	movs	r1, r5
 80022e2:	f7fe fc4f 	bl	8000b84 <__aeabi_ddiv>
 80022e6:	0002      	movs	r2, r0
 80022e8:	000b      	movs	r3, r1
 80022ea:	0010      	movs	r0, r2
 80022ec:	0019      	movs	r1, r3
 80022ee:	f004 fb09 	bl	8006904 <sin>
 80022f2:	2200      	movs	r2, #0
 80022f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002360 <SIN_Signal+0xb8>)
 80022f6:	f7ff f889 	bl	800140c <__aeabi_dmul>
 80022fa:	0002      	movs	r2, r0
 80022fc:	000b      	movs	r3, r1
 80022fe:	0010      	movs	r0, r2
 8002300:	0019      	movs	r1, r3
 8002302:	2200      	movs	r2, #0
 8002304:	4b16      	ldr	r3, [pc, #88]	@ (8002360 <SIN_Signal+0xb8>)
 8002306:	f7fe f8d9 	bl	80004bc <__aeabi_dadd>
 800230a:	0002      	movs	r2, r0
 800230c:	000b      	movs	r3, r1
 800230e:	250a      	movs	r5, #10
 8002310:	197c      	adds	r4, r7, r5
 8002312:	0010      	movs	r0, r2
 8002314:	0019      	movs	r1, r3
 8002316:	f7fe f8b3 	bl	8000480 <__aeabi_d2uiz>
 800231a:	0003      	movs	r3, r0
 800231c:	8023      	strh	r3, [r4, #0]

			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 800231e:	197b      	adds	r3, r7, r5
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	4810      	ldr	r0, [pc, #64]	@ (8002364 <SIN_Signal+0xbc>)
 8002324:	2200      	movs	r2, #0
 8002326:	2100      	movs	r1, #0
 8002328:	f000 ffcd 	bl	80032c6 <HAL_DAC_SetValue>
			DAC->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 800232c:	4b0e      	ldr	r3, [pc, #56]	@ (8002368 <SIN_Signal+0xc0>)
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	4b0d      	ldr	r3, [pc, #52]	@ (8002368 <SIN_Signal+0xc0>)
 8002332:	2101      	movs	r1, #1
 8002334:	430a      	orrs	r2, r1
 8002336:	605a      	str	r2, [r3, #4]
			HAL_TIM_Base_Stop_IT(&htim6);
 8002338:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <SIN_Signal+0xc4>)
 800233a:	0018      	movs	r0, r3
 800233c:	f002 f926 	bl	800458c <HAL_TIM_Base_Stop_IT>
			HAL_Delay(1);
 8002340:	2001      	movs	r0, #1
 8002342:	f000 fe9b 	bl	800307c <HAL_Delay>
		for (int i = 0; i < period/2; i++)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	3301      	adds	r3, #1
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	085a      	lsrs	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	429a      	cmp	r2, r3
 8002354:	d8af      	bhi.n	80022b6 <SIN_Signal+0xe>
 8002356:	e7ab      	b.n	80022b0 <SIN_Signal+0x8>
 8002358:	53c8d4f1 	.word	0x53c8d4f1
 800235c:	400921fb 	.word	0x400921fb
 8002360:	409ffc00 	.word	0x409ffc00
 8002364:	20000030 	.word	0x20000030
 8002368:	40007400 	.word	0x40007400
 800236c:	200000d4 	.word	0x200000d4

08002370 <TRI_Signal>:
		}
	 }
}

void TRI_Signal (uint32_t period)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	while(1)
	{
		for (int i = 0; i < period/2; i++)
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	e03d      	b.n	80023fa <TRI_Signal+0x8a>
		{
	        uint16_t value;
	        if (i < period / 4)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	089a      	lsrs	r2, r3, #2
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	429a      	cmp	r2, r3
 8002386:	d910      	bls.n	80023aa <TRI_Signal+0x3a>
	        {
	            value = (DAC_MAX * i) / (period / 4);
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	0013      	movs	r3, r2
 800238c:	031b      	lsls	r3, r3, #12
 800238e:	1a9b      	subs	r3, r3, r2
 8002390:	001a      	movs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	0019      	movs	r1, r3
 8002398:	0010      	movs	r0, r2
 800239a:	f7fd febd 	bl	8000118 <__udivsi3>
 800239e:	0003      	movs	r3, r0
 80023a0:	001a      	movs	r2, r3
 80023a2:	230a      	movs	r3, #10
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	801a      	strh	r2, [r3, #0]
 80023a8:	e013      	b.n	80023d2 <TRI_Signal+0x62>
	        }
	        else
	        {
	            value = DAC_MAX - ((DAC_MAX * (i - period / 4)) / (period / 4));
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	1ad2      	subs	r2, r2, r3
 80023b2:	0013      	movs	r3, r2
 80023b4:	031b      	lsls	r3, r3, #12
 80023b6:	1a9a      	subs	r2, r3, r2
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	0019      	movs	r1, r3
 80023be:	0010      	movs	r0, r2
 80023c0:	f7fd feaa 	bl	8000118 <__udivsi3>
 80023c4:	0003      	movs	r3, r0
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	230a      	movs	r3, #10
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	490e      	ldr	r1, [pc, #56]	@ (8002408 <TRI_Signal+0x98>)
 80023ce:	1a8a      	subs	r2, r1, r2
 80023d0:	801a      	strh	r2, [r3, #0]
	        }

	        HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 80023d2:	230a      	movs	r3, #10
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	480c      	ldr	r0, [pc, #48]	@ (800240c <TRI_Signal+0x9c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	f000 ff72 	bl	80032c6 <HAL_DAC_SetValue>
	        DAC->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 80023e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <TRI_Signal+0xa0>)
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002410 <TRI_Signal+0xa0>)
 80023e8:	2101      	movs	r1, #1
 80023ea:	430a      	orrs	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]

	        HAL_Delay(1);
 80023ee:	2001      	movs	r0, #1
 80023f0:	f000 fe44 	bl	800307c <HAL_Delay>
		for (int i = 0; i < period/2; i++)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3301      	adds	r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	085a      	lsrs	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	429a      	cmp	r2, r3
 8002402:	d8bc      	bhi.n	800237e <TRI_Signal+0xe>
 8002404:	e7b8      	b.n	8002378 <TRI_Signal+0x8>
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	00000fff 	.word	0x00000fff
 800240c:	20000030 	.word	0x20000030
 8002410:	40007400 	.word	0x40007400

08002414 <UART_Data>:
	    }
	}
}

void UART_Data(uint32_t *Data_Numbers)
{
 8002414:	b5b0      	push	{r4, r5, r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    for (uint32_t i = 0; i < SIZE_OF_ARRAY; i++)
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e01f      	b.n	8002462 <UART_Data+0x4e>
    {
        status = HAL_UART_Receive(&huart1, &Data_Numbers[i], 1, HAL_MAX_DELAY);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	18d1      	adds	r1, r2, r3
 800242a:	250b      	movs	r5, #11
 800242c:	197c      	adds	r4, r7, r5
 800242e:	2301      	movs	r3, #1
 8002430:	425b      	negs	r3, r3
 8002432:	480f      	ldr	r0, [pc, #60]	@ (8002470 <UART_Data+0x5c>)
 8002434:	2201      	movs	r2, #1
 8002436:	f003 fa01 	bl	800583c <HAL_UART_Receive>
 800243a:	0003      	movs	r3, r0
 800243c:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 800243e:	197b      	adds	r3, r7, r5
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <UART_Data+0x48>
        {
            UART_Transmit(strlen((char*)Error_Receive), Error_Receive);
 8002446:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <UART_Data+0x60>)
 8002448:	0018      	movs	r0, r3
 800244a:	f7fd fe5d 	bl	8000108 <strlen>
 800244e:	0002      	movs	r2, r0
 8002450:	4b08      	ldr	r3, [pc, #32]	@ (8002474 <UART_Data+0x60>)
 8002452:	0019      	movs	r1, r3
 8002454:	0010      	movs	r0, r2
 8002456:	f7ff fee9 	bl	800222c <UART_Transmit>
            return;
 800245a:	e005      	b.n	8002468 <UART_Data+0x54>
    for (uint32_t i = 0; i < SIZE_OF_ARRAY; i++)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3301      	adds	r3, #1
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b0a      	cmp	r3, #10
 8002466:	d9dc      	bls.n	8002422 <UART_Data+0xe>
        }
    }
}
 8002468:	46bd      	mov	sp, r7
 800246a:	b004      	add	sp, #16
 800246c:	bdb0      	pop	{r4, r5, r7, pc}
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	2000011c 	.word	0x2000011c
 8002474:	20000000 	.word	0x20000000

08002478 <Check_Xorsum>:

void Check_Xorsum(uint32_t *Data_Numbers)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
    uint32_t xorsum = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]

    // Обчислюємо контрольну суму (XOR всіх елементів крім останнього)
    for (int i = 0; i < SIZE_OF_ARRAY - 1; i++)
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	e00a      	b.n	80024a0 <Check_Xorsum+0x28>
    {
        xorsum ^= Data_Numbers[i];
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	18d3      	adds	r3, r2, r3
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4053      	eors	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < SIZE_OF_ARRAY - 1; i++)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	3301      	adds	r3, #1
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b09      	cmp	r3, #9
 80024a4:	ddf1      	ble.n	800248a <Check_Xorsum+0x12>
    }

    // Перевіряємо, чи збігається контрольна сума з останнім елементом
    if (xorsum == Data_Numbers[SIZE_OF_ARRAY - 1])
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3328      	adds	r3, #40	@ 0x28
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d105      	bne.n	80024be <Check_Xorsum+0x46>
    {
        // Якщо контрольна сума збігається, виводимо "OK"
        UART_Transmit(strlen("031 "), (uint8_t*)"031 ");
 80024b2:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <Check_Xorsum+0x58>)
 80024b4:	0019      	movs	r1, r3
 80024b6:	2004      	movs	r0, #4
 80024b8:	f7ff feb8 	bl	800222c <UART_Transmit>
    else
    {
        // Якщо контрольна сума не збігається, виводимо повідомлення про помилку
        UART_Transmit(strlen("032 "), (uint8_t*)"032 ");
    }
}
 80024bc:	e004      	b.n	80024c8 <Check_Xorsum+0x50>
        UART_Transmit(strlen("032 "), (uint8_t*)"032 ");
 80024be:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <Check_Xorsum+0x5c>)
 80024c0:	0019      	movs	r1, r3
 80024c2:	2004      	movs	r0, #4
 80024c4:	f7ff feb2 	bl	800222c <UART_Transmit>
}
 80024c8:	46c0      	nop			@ (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b004      	add	sp, #16
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	080078b0 	.word	0x080078b0
 80024d4:	080078b8 	.word	0x080078b8

080024d8 <Clear_Buffer>:
void Clear_Buffer(uint32_t *buffer, uint32_t size)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]

    memset(buffer, 0, size * sizeof(uint32_t));  // Очищення масиву
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	009a      	lsls	r2, r3, #2
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2100      	movs	r1, #0
 80024ea:	0018      	movs	r0, r3
 80024ec:	f004 f9de 	bl	80068ac <memset>
    __HAL_UART_FLUSH_DRREGISTER(&huart1);  // Очистка регістра даних UART
 80024f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <Clear_Buffer+0x48>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <Clear_Buffer+0x48>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2108      	movs	r1, #8
 80024fc:	430a      	orrs	r2, r1
 80024fe:	619a      	str	r2, [r3, #24]
 8002500:	4b07      	ldr	r3, [pc, #28]	@ (8002520 <Clear_Buffer+0x48>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <Clear_Buffer+0x48>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2110      	movs	r1, #16
 800250c:	430a      	orrs	r2, r1
 800250e:	619a      	str	r2, [r3, #24]
    HAL_UART_AbortReceive(&huart1);  // Скасування поточного прийому даних
 8002510:	4b03      	ldr	r3, [pc, #12]	@ (8002520 <Clear_Buffer+0x48>)
 8002512:	0018      	movs	r0, r3
 8002514:	f003 fa66 	bl	80059e4 <HAL_UART_AbortReceive>
}
 8002518:	46c0      	nop			@ (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b002      	add	sp, #8
 800251e:	bd80      	pop	{r7, pc}
 8002520:	2000011c 	.word	0x2000011c

08002524 <Process_Command>:

void Process_Command()
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b09a      	sub	sp, #104	@ 0x68
 8002528:	af00      	add	r7, sp, #0
	uint32_t Data_Numbers[SIZE_OF_ARRAY] = {0};
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	0018      	movs	r0, r3
 800252e:	232c      	movs	r3, #44	@ 0x2c
 8002530:	001a      	movs	r2, r3
 8002532:	2100      	movs	r1, #0
 8002534:	f004 f9ba 	bl	80068ac <memset>
	// Очищення буфера перед новим прийомом
	Clear_Buffer(Data_Numbers, SIZE_OF_ARRAY);
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	210b      	movs	r1, #11
 800253c:	0018      	movs	r0, r3
 800253e:	f7ff ffcb 	bl	80024d8 <Clear_Buffer>
	UART_Data(Data_Numbers);
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	0018      	movs	r0, r3
 8002546:	f7ff ff65 	bl	8002414 <UART_Data>
	Check_Xorsum(Data_Numbers);
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	0018      	movs	r0, r3
 800254e:	f7ff ff93 	bl	8002478 <Check_Xorsum>


		uint32_t Signal_PWM = Data_Numbers[0] ;
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	667b      	str	r3, [r7, #100]	@ 0x64

		uint32_t S_Level_PWM = Data_Numbers[1];
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	663b      	str	r3, [r7, #96]	@ 0x60

		uint32_t tmp_1_duty_PWM = ((uint32_t)Data_Numbers[3] << 8);
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	65fb      	str	r3, [r7, #92]	@ 0x5c
		uint32_t tmp_2_duty_PWM = tmp_1_duty_PWM | Data_Numbers[2];
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800256c:	4313      	orrs	r3, r2
 800256e:	65bb      	str	r3, [r7, #88]	@ 0x58

		uint32_t tmp_3_duty_PWM = ((uint32_t)Data_Numbers[4] << 16);
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	041b      	lsls	r3, r3, #16
 8002576:	657b      	str	r3, [r7, #84]	@ 0x54
		uint32_t tmp_4_duty_PWM = tmp_3_duty_PWM |tmp_2_duty_PWM;
 8002578:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800257a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800257c:	4313      	orrs	r3, r2
 800257e:	653b      	str	r3, [r7, #80]	@ 0x50

		uint32_t tmp_5_duty_PWM = ((uint32_t)Data_Numbers[5] << 24);
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	64fb      	str	r3, [r7, #76]	@ 0x4c
		uint32_t duty_PWM = tmp_5_duty_PWM |tmp_4_duty_PWM;
 8002588:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800258a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800258c:	4313      	orrs	r3, r2
 800258e:	64bb      	str	r3, [r7, #72]	@ 0x48

		uint32_t tmp_1_period_PWM = ((uint32_t)Data_Numbers[7] << 8);
 8002590:	1d3b      	adds	r3, r7, #4
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	647b      	str	r3, [r7, #68]	@ 0x44
		uint32_t tmp_2_period_PWM = tmp_1_period_PWM | Data_Numbers[6];
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800259e:	4313      	orrs	r3, r2
 80025a0:	643b      	str	r3, [r7, #64]	@ 0x40

		uint32_t tmp_3_period_PWM = ((uint32_t)Data_Numbers[8] << 16);
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	041b      	lsls	r3, r3, #16
 80025a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		uint32_t tmp_4_period_PWM = tmp_3_period_PWM |tmp_2_period_PWM;
 80025aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025ae:	4313      	orrs	r3, r2
 80025b0:	63bb      	str	r3, [r7, #56]	@ 0x38

		uint32_t tmp_5_period_PWM = ((uint32_t)Data_Numbers[9] << 24);
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b6:	061b      	lsls	r3, r3, #24
 80025b8:	637b      	str	r3, [r7, #52]	@ 0x34
		uint32_t period_PWM = tmp_5_period_PWM |tmp_4_period_PWM;
 80025ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025be:	4313      	orrs	r3, r2
 80025c0:	633b      	str	r3, [r7, #48]	@ 0x30

			switch (Data_Numbers [0])
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d01b      	beq.n	8002602 <Process_Command+0xde>
 80025ca:	d824      	bhi.n	8002616 <Process_Command+0xf2>
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d002      	beq.n	80025d6 <Process_Command+0xb2>
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d00c      	beq.n	80025ee <Process_Command+0xca>

					TRI_Signal(period_PWM); Clear_Buffer(Data_Numbers, SIZE_OF_ARRAY); break;
			}


}
 80025d4:	e01f      	b.n	8002616 <Process_Command+0xf2>
					PWM_Signal(S_Level_PWM, duty_PWM, period_PWM ); Clear_Buffer(Data_Numbers, SIZE_OF_ARRAY); break;
 80025d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025d8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80025da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff fe39 	bl	8002254 <PWM_Signal>
 80025e2:	1d3b      	adds	r3, r7, #4
 80025e4:	210b      	movs	r1, #11
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7ff ff76 	bl	80024d8 <Clear_Buffer>
 80025ec:	e013      	b.n	8002616 <Process_Command+0xf2>
					SIN_Signal(period_PWM); Clear_Buffer(Data_Numbers, SIZE_OF_ARRAY); break;
 80025ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7ff fe59 	bl	80022a8 <SIN_Signal>
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	210b      	movs	r1, #11
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7ff ff6c 	bl	80024d8 <Clear_Buffer>
 8002600:	e009      	b.n	8002616 <Process_Command+0xf2>
					TRI_Signal(period_PWM); Clear_Buffer(Data_Numbers, SIZE_OF_ARRAY); break;
 8002602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002604:	0018      	movs	r0, r3
 8002606:	f7ff feb3 	bl	8002370 <TRI_Signal>
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	210b      	movs	r1, #11
 800260e:	0018      	movs	r0, r3
 8002610:	f7ff ff62 	bl	80024d8 <Clear_Buffer>
 8002614:	46c0      	nop			@ (mov r8, r8)
}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	46bd      	mov	sp, r7
 800261a:	b01a      	add	sp, #104	@ 0x68
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002624:	f000 fcc6 	bl	8002fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002628:	f000 f82c 	bl	8002684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800262c:	f000 fa20 	bl	8002a70 <MX_GPIO_Init>
  MX_DMA_Init();
 8002630:	f000 fa00 	bl	8002a34 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002634:	f000 f9ce 	bl	80029d4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002638:	f000 f912 	bl	8002860 <MX_TIM3_Init>
  MX_DAC1_Init();
 800263c:	f000 f882 	bl	8002744 <MX_DAC1_Init>
  MX_TIM6_Init();
 8002640:	f000 f98c 	bl	800295c <MX_TIM6_Init>
  MX_TIM2_Init();
 8002644:	f000 f8ac 	bl	80027a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002648:	4b0b      	ldr	r3, [pc, #44]	@ (8002678 <main+0x58>)
 800264a:	2100      	movs	r1, #0
 800264c:	0018      	movs	r0, r3
 800264e:	f000 fea2 	bl	8003396 <HAL_DAC_Start>
  HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_3);
 8002652:	4b0a      	ldr	r3, [pc, #40]	@ (800267c <main+0x5c>)
 8002654:	2108      	movs	r1, #8
 8002656:	0018      	movs	r0, r3
 8002658:	f002 f816 	bl	8004688 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_4);
 800265c:	4b07      	ldr	r3, [pc, #28]	@ (800267c <main+0x5c>)
 800265e:	210c      	movs	r1, #12
 8002660:	0018      	movs	r0, r3
 8002662:	f002 f811 	bl	8004688 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start (&htim6, TIM_CHANNEL_1);
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <main+0x60>)
 8002668:	2100      	movs	r1, #0
 800266a:	0018      	movs	r0, r3
 800266c:	f002 f8c4 	bl	80047f8 <HAL_TIM_IC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Process_Command();
 8002670:	f7ff ff58 	bl	8002524 <Process_Command>
 8002674:	e7fc      	b.n	8002670 <main+0x50>
 8002676:	46c0      	nop			@ (mov r8, r8)
 8002678:	20000030 	.word	0x20000030
 800267c:	2000008c 	.word	0x2000008c
 8002680:	200000d4 	.word	0x200000d4

08002684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b097      	sub	sp, #92	@ 0x5c
 8002688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800268a:	2428      	movs	r4, #40	@ 0x28
 800268c:	193b      	adds	r3, r7, r4
 800268e:	0018      	movs	r0, r3
 8002690:	2330      	movs	r3, #48	@ 0x30
 8002692:	001a      	movs	r2, r3
 8002694:	2100      	movs	r1, #0
 8002696:	f004 f909 	bl	80068ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800269a:	2318      	movs	r3, #24
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	0018      	movs	r0, r3
 80026a0:	2310      	movs	r3, #16
 80026a2:	001a      	movs	r2, r3
 80026a4:	2100      	movs	r1, #0
 80026a6:	f004 f901 	bl	80068ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	0018      	movs	r0, r3
 80026ae:	2314      	movs	r3, #20
 80026b0:	001a      	movs	r2, r3
 80026b2:	2100      	movs	r1, #0
 80026b4:	f004 f8fa 	bl	80068ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026b8:	0021      	movs	r1, r4
 80026ba:	187b      	adds	r3, r7, r1
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026c0:	187b      	adds	r3, r7, r1
 80026c2:	2201      	movs	r2, #1
 80026c4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026c6:	187b      	adds	r3, r7, r1
 80026c8:	2202      	movs	r2, #2
 80026ca:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026cc:	187b      	adds	r3, r7, r1
 80026ce:	2280      	movs	r2, #128	@ 0x80
 80026d0:	0252      	lsls	r2, r2, #9
 80026d2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	2280      	movs	r2, #128	@ 0x80
 80026d8:	0352      	lsls	r2, r2, #13
 80026da:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80026dc:	187b      	adds	r3, r7, r1
 80026de:	2200      	movs	r2, #0
 80026e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026e2:	187b      	adds	r3, r7, r1
 80026e4:	0018      	movs	r0, r3
 80026e6:	f001 f9c5 	bl	8003a74 <HAL_RCC_OscConfig>
 80026ea:	1e03      	subs	r3, r0, #0
 80026ec:	d001      	beq.n	80026f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80026ee:	f000 f9f3 	bl	8002ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026f2:	2118      	movs	r1, #24
 80026f4:	187b      	adds	r3, r7, r1
 80026f6:	2207      	movs	r2, #7
 80026f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026fa:	187b      	adds	r3, r7, r1
 80026fc:	2202      	movs	r2, #2
 80026fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002700:	187b      	adds	r3, r7, r1
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002706:	187b      	adds	r3, r7, r1
 8002708:	2200      	movs	r2, #0
 800270a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800270c:	187b      	adds	r3, r7, r1
 800270e:	2101      	movs	r1, #1
 8002710:	0018      	movs	r0, r3
 8002712:	f001 fcc9 	bl	80040a8 <HAL_RCC_ClockConfig>
 8002716:	1e03      	subs	r3, r0, #0
 8002718:	d001      	beq.n	800271e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800271a:	f000 f9dd 	bl	8002ad8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	0018      	movs	r0, r3
 800272e:	f001 fdff 	bl	8004330 <HAL_RCCEx_PeriphCLKConfig>
 8002732:	1e03      	subs	r3, r0, #0
 8002734:	d001      	beq.n	800273a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002736:	f000 f9cf 	bl	8002ad8 <Error_Handler>
  }
}
 800273a:	46c0      	nop			@ (mov r8, r8)
 800273c:	46bd      	mov	sp, r7
 800273e:	b017      	add	sp, #92	@ 0x5c
 8002740:	bd90      	pop	{r4, r7, pc}
	...

08002744 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800274a:	003b      	movs	r3, r7
 800274c:	0018      	movs	r0, r3
 800274e:	2308      	movs	r3, #8
 8002750:	001a      	movs	r2, r3
 8002752:	2100      	movs	r1, #0
 8002754:	f004 f8aa 	bl	80068ac <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC;
 8002758:	4b0f      	ldr	r3, [pc, #60]	@ (8002798 <MX_DAC1_Init+0x54>)
 800275a:	4a10      	ldr	r2, [pc, #64]	@ (800279c <MX_DAC1_Init+0x58>)
 800275c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800275e:	4b0e      	ldr	r3, [pc, #56]	@ (8002798 <MX_DAC1_Init+0x54>)
 8002760:	0018      	movs	r0, r3
 8002762:	f000 fd8d 	bl	8003280 <HAL_DAC_Init>
 8002766:	1e03      	subs	r3, r0, #0
 8002768:	d001      	beq.n	800276e <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 800276a:	f000 f9b5 	bl	8002ad8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800276e:	003b      	movs	r3, r7
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002774:	003b      	movs	r3, r7
 8002776:	2200      	movs	r2, #0
 8002778:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800277a:	0039      	movs	r1, r7
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <MX_DAC1_Init+0x54>)
 800277e:	2200      	movs	r2, #0
 8002780:	0018      	movs	r0, r3
 8002782:	f000 fdca 	bl	800331a <HAL_DAC_ConfigChannel>
 8002786:	1e03      	subs	r3, r0, #0
 8002788:	d001      	beq.n	800278e <MX_DAC1_Init+0x4a>
  {
    Error_Handler();
 800278a:	f000 f9a5 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	46bd      	mov	sp, r7
 8002792:	b002      	add	sp, #8
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	20000030 	.word	0x20000030
 800279c:	40007400 	.word	0x40007400

080027a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	@ 0x28
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a6:	2320      	movs	r3, #32
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	0018      	movs	r0, r3
 80027ac:	2308      	movs	r3, #8
 80027ae:	001a      	movs	r2, r3
 80027b0:	2100      	movs	r1, #0
 80027b2:	f004 f87b 	bl	80068ac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	0018      	movs	r0, r3
 80027ba:	231c      	movs	r3, #28
 80027bc:	001a      	movs	r2, r3
 80027be:	2100      	movs	r1, #0
 80027c0:	f004 f874 	bl	80068ac <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027c4:	4b25      	ldr	r3, [pc, #148]	@ (800285c <MX_TIM2_Init+0xbc>)
 80027c6:	2280      	movs	r2, #128	@ 0x80
 80027c8:	05d2      	lsls	r2, r2, #23
 80027ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027cc:	4b23      	ldr	r3, [pc, #140]	@ (800285c <MX_TIM2_Init+0xbc>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d2:	4b22      	ldr	r3, [pc, #136]	@ (800285c <MX_TIM2_Init+0xbc>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80027d8:	4b20      	ldr	r3, [pc, #128]	@ (800285c <MX_TIM2_Init+0xbc>)
 80027da:	2201      	movs	r2, #1
 80027dc:	4252      	negs	r2, r2
 80027de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e0:	4b1e      	ldr	r3, [pc, #120]	@ (800285c <MX_TIM2_Init+0xbc>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e6:	4b1d      	ldr	r3, [pc, #116]	@ (800285c <MX_TIM2_Init+0xbc>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <MX_TIM2_Init+0xbc>)
 80027ee:	0018      	movs	r0, r3
 80027f0:	f001 fefa 	bl	80045e8 <HAL_TIM_PWM_Init>
 80027f4:	1e03      	subs	r3, r0, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80027f8:	f000 f96e 	bl	8002ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027fc:	2120      	movs	r1, #32
 80027fe:	187b      	adds	r3, r7, r1
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002804:	187b      	adds	r3, r7, r1
 8002806:	2200      	movs	r2, #0
 8002808:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800280a:	187a      	adds	r2, r7, r1
 800280c:	4b13      	ldr	r3, [pc, #76]	@ (800285c <MX_TIM2_Init+0xbc>)
 800280e:	0011      	movs	r1, r2
 8002810:	0018      	movs	r0, r3
 8002812:	f002 feb1 	bl	8005578 <HAL_TIMEx_MasterConfigSynchronization>
 8002816:	1e03      	subs	r3, r0, #0
 8002818:	d001      	beq.n	800281e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800281a:	f000 f95d 	bl	8002ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	2260      	movs	r2, #96	@ 0x60
 8002822:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	2200      	movs	r2, #0
 8002828:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	2200      	movs	r2, #0
 8002834:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002836:	1d39      	adds	r1, r7, #4
 8002838:	4b08      	ldr	r3, [pc, #32]	@ (800285c <MX_TIM2_Init+0xbc>)
 800283a:	2200      	movs	r2, #0
 800283c:	0018      	movs	r0, r3
 800283e:	f002 f991 	bl	8004b64 <HAL_TIM_PWM_ConfigChannel>
 8002842:	1e03      	subs	r3, r0, #0
 8002844:	d001      	beq.n	800284a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002846:	f000 f947 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800284a:	4b04      	ldr	r3, [pc, #16]	@ (800285c <MX_TIM2_Init+0xbc>)
 800284c:	0018      	movs	r0, r3
 800284e:	f000 fa11 	bl	8002c74 <HAL_TIM_MspPostInit>

}
 8002852:	46c0      	nop			@ (mov r8, r8)
 8002854:	46bd      	mov	sp, r7
 8002856:	b00a      	add	sp, #40	@ 0x28
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			@ (mov r8, r8)
 800285c:	20000044 	.word	0x20000044

08002860 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08e      	sub	sp, #56	@ 0x38
 8002864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002866:	2328      	movs	r3, #40	@ 0x28
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	0018      	movs	r0, r3
 800286c:	2310      	movs	r3, #16
 800286e:	001a      	movs	r2, r3
 8002870:	2100      	movs	r1, #0
 8002872:	f004 f81b 	bl	80068ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002876:	2320      	movs	r3, #32
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	0018      	movs	r0, r3
 800287c:	2308      	movs	r3, #8
 800287e:	001a      	movs	r2, r3
 8002880:	2100      	movs	r1, #0
 8002882:	f004 f813 	bl	80068ac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	0018      	movs	r0, r3
 800288a:	231c      	movs	r3, #28
 800288c:	001a      	movs	r2, r3
 800288e:	2100      	movs	r1, #0
 8002890:	f004 f80c 	bl	80068ac <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002894:	4b2f      	ldr	r3, [pc, #188]	@ (8002954 <MX_TIM3_Init+0xf4>)
 8002896:	4a30      	ldr	r2, [pc, #192]	@ (8002958 <MX_TIM3_Init+0xf8>)
 8002898:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 800289a:	4b2e      	ldr	r3, [pc, #184]	@ (8002954 <MX_TIM3_Init+0xf4>)
 800289c:	222f      	movs	r2, #47	@ 0x2f
 800289e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002954 <MX_TIM3_Init+0xf4>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80028a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002954 <MX_TIM3_Init+0xf4>)
 80028a8:	2263      	movs	r2, #99	@ 0x63
 80028aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ac:	4b29      	ldr	r3, [pc, #164]	@ (8002954 <MX_TIM3_Init+0xf4>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b2:	4b28      	ldr	r3, [pc, #160]	@ (8002954 <MX_TIM3_Init+0xf4>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028b8:	4b26      	ldr	r3, [pc, #152]	@ (8002954 <MX_TIM3_Init+0xf4>)
 80028ba:	0018      	movs	r0, r3
 80028bc:	f001 fe16 	bl	80044ec <HAL_TIM_Base_Init>
 80028c0:	1e03      	subs	r3, r0, #0
 80028c2:	d001      	beq.n	80028c8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80028c4:	f000 f908 	bl	8002ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028c8:	2128      	movs	r1, #40	@ 0x28
 80028ca:	187b      	adds	r3, r7, r1
 80028cc:	2280      	movs	r2, #128	@ 0x80
 80028ce:	0152      	lsls	r2, r2, #5
 80028d0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028d2:	187a      	adds	r2, r7, r1
 80028d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002954 <MX_TIM3_Init+0xf4>)
 80028d6:	0011      	movs	r1, r2
 80028d8:	0018      	movs	r0, r3
 80028da:	f002 fa09 	bl	8004cf0 <HAL_TIM_ConfigClockSource>
 80028de:	1e03      	subs	r3, r0, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80028e2:	f000 f8f9 	bl	8002ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <MX_TIM3_Init+0xf4>)
 80028e8:	0018      	movs	r0, r3
 80028ea:	f001 fe7d 	bl	80045e8 <HAL_TIM_PWM_Init>
 80028ee:	1e03      	subs	r3, r0, #0
 80028f0:	d001      	beq.n	80028f6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80028f2:	f000 f8f1 	bl	8002ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f6:	2120      	movs	r1, #32
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	2200      	movs	r2, #0
 8002902:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002904:	187a      	adds	r2, r7, r1
 8002906:	4b13      	ldr	r3, [pc, #76]	@ (8002954 <MX_TIM3_Init+0xf4>)
 8002908:	0011      	movs	r1, r2
 800290a:	0018      	movs	r0, r3
 800290c:	f002 fe34 	bl	8005578 <HAL_TIMEx_MasterConfigSynchronization>
 8002910:	1e03      	subs	r3, r0, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8002914:	f000 f8e0 	bl	8002ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002918:	1d3b      	adds	r3, r7, #4
 800291a:	2260      	movs	r2, #96	@ 0x60
 800291c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800291e:	1d3b      	adds	r3, r7, #4
 8002920:	2200      	movs	r2, #0
 8002922:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002930:	1d39      	adds	r1, r7, #4
 8002932:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <MX_TIM3_Init+0xf4>)
 8002934:	2208      	movs	r2, #8
 8002936:	0018      	movs	r0, r3
 8002938:	f002 f914 	bl	8004b64 <HAL_TIM_PWM_ConfigChannel>
 800293c:	1e03      	subs	r3, r0, #0
 800293e:	d001      	beq.n	8002944 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8002940:	f000 f8ca 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002944:	4b03      	ldr	r3, [pc, #12]	@ (8002954 <MX_TIM3_Init+0xf4>)
 8002946:	0018      	movs	r0, r3
 8002948:	f000 f994 	bl	8002c74 <HAL_TIM_MspPostInit>

}
 800294c:	46c0      	nop			@ (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b00e      	add	sp, #56	@ 0x38
 8002952:	bd80      	pop	{r7, pc}
 8002954:	2000008c 	.word	0x2000008c
 8002958:	40000400 	.word	0x40000400

0800295c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002962:	003b      	movs	r3, r7
 8002964:	0018      	movs	r0, r3
 8002966:	2308      	movs	r3, #8
 8002968:	001a      	movs	r2, r3
 800296a:	2100      	movs	r1, #0
 800296c:	f003 ff9e 	bl	80068ac <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002970:	4b15      	ldr	r3, [pc, #84]	@ (80029c8 <MX_TIM6_Init+0x6c>)
 8002972:	4a16      	ldr	r2, [pc, #88]	@ (80029cc <MX_TIM6_Init+0x70>)
 8002974:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 96-1;
 8002976:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <MX_TIM6_Init+0x6c>)
 8002978:	225f      	movs	r2, #95	@ 0x5f
 800297a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800297c:	4b12      	ldr	r3, [pc, #72]	@ (80029c8 <MX_TIM6_Init+0x6c>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002982:	4b11      	ldr	r3, [pc, #68]	@ (80029c8 <MX_TIM6_Init+0x6c>)
 8002984:	4a12      	ldr	r2, [pc, #72]	@ (80029d0 <MX_TIM6_Init+0x74>)
 8002986:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002988:	4b0f      	ldr	r3, [pc, #60]	@ (80029c8 <MX_TIM6_Init+0x6c>)
 800298a:	2200      	movs	r2, #0
 800298c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800298e:	4b0e      	ldr	r3, [pc, #56]	@ (80029c8 <MX_TIM6_Init+0x6c>)
 8002990:	0018      	movs	r0, r3
 8002992:	f001 fdab 	bl	80044ec <HAL_TIM_Base_Init>
 8002996:	1e03      	subs	r3, r0, #0
 8002998:	d001      	beq.n	800299e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800299a:	f000 f89d 	bl	8002ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800299e:	003b      	movs	r3, r7
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a4:	003b      	movs	r3, r7
 80029a6:	2200      	movs	r2, #0
 80029a8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80029aa:	003a      	movs	r2, r7
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <MX_TIM6_Init+0x6c>)
 80029ae:	0011      	movs	r1, r2
 80029b0:	0018      	movs	r0, r3
 80029b2:	f002 fde1 	bl	8005578 <HAL_TIMEx_MasterConfigSynchronization>
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	d001      	beq.n	80029be <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80029ba:	f000 f88d 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			@ (mov r8, r8)
 80029c8:	200000d4 	.word	0x200000d4
 80029cc:	40001000 	.word	0x40001000
 80029d0:	000003e7 	.word	0x000003e7

080029d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029d8:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <MX_USART1_UART_Init+0x58>)
 80029da:	4a15      	ldr	r2, [pc, #84]	@ (8002a30 <MX_USART1_UART_Init+0x5c>)
 80029dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029de:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <MX_USART1_UART_Init+0x58>)
 80029e0:	22e1      	movs	r2, #225	@ 0xe1
 80029e2:	0252      	lsls	r2, r2, #9
 80029e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029e6:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <MX_USART1_UART_Init+0x58>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029ec:	4b0f      	ldr	r3, [pc, #60]	@ (8002a2c <MX_USART1_UART_Init+0x58>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029f2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a2c <MX_USART1_UART_Init+0x58>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029f8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <MX_USART1_UART_Init+0x58>)
 80029fa:	220c      	movs	r2, #12
 80029fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029fe:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <MX_USART1_UART_Init+0x58>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a04:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <MX_USART1_UART_Init+0x58>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a0a:	4b08      	ldr	r3, [pc, #32]	@ (8002a2c <MX_USART1_UART_Init+0x58>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a10:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <MX_USART1_UART_Init+0x58>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a16:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <MX_USART1_UART_Init+0x58>)
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f002 fe1b 	bl	8005654 <HAL_UART_Init>
 8002a1e:	1e03      	subs	r3, r0, #0
 8002a20:	d001      	beq.n	8002a26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002a22:	f000 f859 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a26:	46c0      	nop			@ (mov r8, r8)
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	2000011c 	.word	0x2000011c
 8002a30:	40013800 	.word	0x40013800

08002a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <MX_DMA_Init+0x38>)
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <MX_DMA_Init+0x38>)
 8002a40:	2101      	movs	r1, #1
 8002a42:	430a      	orrs	r2, r1
 8002a44:	615a      	str	r2, [r3, #20]
 8002a46:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <MX_DMA_Init+0x38>)
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2100      	movs	r1, #0
 8002a56:	200b      	movs	r0, #11
 8002a58:	f000 fbe0 	bl	800321c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8002a5c:	200b      	movs	r0, #11
 8002a5e:	f000 fbf2 	bl	8003246 <HAL_NVIC_EnableIRQ>

}
 8002a62:	46c0      	nop			@ (mov r8, r8)
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b002      	add	sp, #8
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	40021000 	.word	0x40021000

08002a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a76:	4b17      	ldr	r3, [pc, #92]	@ (8002ad4 <MX_GPIO_Init+0x64>)
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	4b16      	ldr	r3, [pc, #88]	@ (8002ad4 <MX_GPIO_Init+0x64>)
 8002a7c:	2180      	movs	r1, #128	@ 0x80
 8002a7e:	0309      	lsls	r1, r1, #12
 8002a80:	430a      	orrs	r2, r1
 8002a82:	615a      	str	r2, [r3, #20]
 8002a84:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <MX_GPIO_Init+0x64>)
 8002a86:	695a      	ldr	r2, [r3, #20]
 8002a88:	2380      	movs	r3, #128	@ 0x80
 8002a8a:	031b      	lsls	r3, r3, #12
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a92:	4b10      	ldr	r3, [pc, #64]	@ (8002ad4 <MX_GPIO_Init+0x64>)
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad4 <MX_GPIO_Init+0x64>)
 8002a98:	2180      	movs	r1, #128	@ 0x80
 8002a9a:	03c9      	lsls	r1, r1, #15
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	615a      	str	r2, [r3, #20]
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <MX_GPIO_Init+0x64>)
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	2380      	movs	r3, #128	@ 0x80
 8002aa6:	03db      	lsls	r3, r3, #15
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]
 8002aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aae:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <MX_GPIO_Init+0x64>)
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <MX_GPIO_Init+0x64>)
 8002ab4:	2180      	movs	r1, #128	@ 0x80
 8002ab6:	0289      	lsls	r1, r1, #10
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	615a      	str	r2, [r3, #20]
 8002abc:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <MX_GPIO_Init+0x64>)
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	2380      	movs	r3, #128	@ 0x80
 8002ac2:	029b      	lsls	r3, r3, #10
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002aca:	46c0      	nop			@ (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b004      	add	sp, #16
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002adc:	b672      	cpsid	i
}
 8002ade:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ae0:	46c0      	nop			@ (mov r8, r8)
 8002ae2:	e7fd      	b.n	8002ae0 <Error_Handler+0x8>

08002ae4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aea:	4b0f      	ldr	r3, [pc, #60]	@ (8002b28 <HAL_MspInit+0x44>)
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	4b0e      	ldr	r3, [pc, #56]	@ (8002b28 <HAL_MspInit+0x44>)
 8002af0:	2101      	movs	r1, #1
 8002af2:	430a      	orrs	r2, r1
 8002af4:	619a      	str	r2, [r3, #24]
 8002af6:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <HAL_MspInit+0x44>)
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	2201      	movs	r2, #1
 8002afc:	4013      	ands	r3, r2
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b02:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <HAL_MspInit+0x44>)
 8002b04:	69da      	ldr	r2, [r3, #28]
 8002b06:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <HAL_MspInit+0x44>)
 8002b08:	2180      	movs	r1, #128	@ 0x80
 8002b0a:	0549      	lsls	r1, r1, #21
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	61da      	str	r2, [r3, #28]
 8002b10:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <HAL_MspInit+0x44>)
 8002b12:	69da      	ldr	r2, [r3, #28]
 8002b14:	2380      	movs	r3, #128	@ 0x80
 8002b16:	055b      	lsls	r3, r3, #21
 8002b18:	4013      	ands	r3, r2
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b002      	add	sp, #8
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	40021000 	.word	0x40021000

08002b2c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b08b      	sub	sp, #44	@ 0x2c
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b34:	2414      	movs	r4, #20
 8002b36:	193b      	adds	r3, r7, r4
 8002b38:	0018      	movs	r0, r3
 8002b3a:	2314      	movs	r3, #20
 8002b3c:	001a      	movs	r2, r3
 8002b3e:	2100      	movs	r1, #0
 8002b40:	f003 feb4 	bl	80068ac <memset>
  if(hdac->Instance==DAC)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc0 <HAL_DAC_MspInit+0x94>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d133      	bne.n	8002bb6 <HAL_DAC_MspInit+0x8a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc4 <HAL_DAC_MspInit+0x98>)
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc4 <HAL_DAC_MspInit+0x98>)
 8002b54:	2180      	movs	r1, #128	@ 0x80
 8002b56:	0589      	lsls	r1, r1, #22
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	61da      	str	r2, [r3, #28]
 8002b5c:	4b19      	ldr	r3, [pc, #100]	@ (8002bc4 <HAL_DAC_MspInit+0x98>)
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	2380      	movs	r3, #128	@ 0x80
 8002b62:	059b      	lsls	r3, r3, #22
 8002b64:	4013      	ands	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	4b16      	ldr	r3, [pc, #88]	@ (8002bc4 <HAL_DAC_MspInit+0x98>)
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	4b15      	ldr	r3, [pc, #84]	@ (8002bc4 <HAL_DAC_MspInit+0x98>)
 8002b70:	2180      	movs	r1, #128	@ 0x80
 8002b72:	0289      	lsls	r1, r1, #10
 8002b74:	430a      	orrs	r2, r1
 8002b76:	615a      	str	r2, [r3, #20]
 8002b78:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <HAL_DAC_MspInit+0x98>)
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	2380      	movs	r3, #128	@ 0x80
 8002b7e:	029b      	lsls	r3, r3, #10
 8002b80:	4013      	ands	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = USER_Channel_2_Pin;
 8002b86:	193b      	adds	r3, r7, r4
 8002b88:	2210      	movs	r2, #16
 8002b8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b8c:	193b      	adds	r3, r7, r4
 8002b8e:	2203      	movs	r2, #3
 8002b90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	193b      	adds	r3, r7, r4
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(USER_Channel_2_GPIO_Port, &GPIO_InitStruct);
 8002b98:	193a      	adds	r2, r7, r4
 8002b9a:	2390      	movs	r3, #144	@ 0x90
 8002b9c:	05db      	lsls	r3, r3, #23
 8002b9e:	0011      	movs	r1, r2
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f000 fdf7 	bl	8003794 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	2011      	movs	r0, #17
 8002bac:	f000 fb36 	bl	800321c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002bb0:	2011      	movs	r0, #17
 8002bb2:	f000 fb48 	bl	8003246 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b00b      	add	sp, #44	@ 0x2c
 8002bbc:	bd90      	pop	{r4, r7, pc}
 8002bbe:	46c0      	nop			@ (mov r8, r8)
 8002bc0:	40007400 	.word	0x40007400
 8002bc4:	40021000 	.word	0x40021000

08002bc8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	@ 0x80
 8002bd6:	05db      	lsls	r3, r3, #23
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d10b      	bne.n	8002bf4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bdc:	4b07      	ldr	r3, [pc, #28]	@ (8002bfc <HAL_TIM_PWM_MspInit+0x34>)
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <HAL_TIM_PWM_MspInit+0x34>)
 8002be2:	2101      	movs	r1, #1
 8002be4:	430a      	orrs	r2, r1
 8002be6:	61da      	str	r2, [r3, #28]
 8002be8:	4b04      	ldr	r3, [pc, #16]	@ (8002bfc <HAL_TIM_PWM_MspInit+0x34>)
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	2201      	movs	r2, #1
 8002bee:	4013      	ands	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002bf4:	46c0      	nop			@ (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b004      	add	sp, #16
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000

08002c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a16      	ldr	r2, [pc, #88]	@ (8002c68 <HAL_TIM_Base_MspInit+0x68>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10c      	bne.n	8002c2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c12:	4b16      	ldr	r3, [pc, #88]	@ (8002c6c <HAL_TIM_Base_MspInit+0x6c>)
 8002c14:	69da      	ldr	r2, [r3, #28]
 8002c16:	4b15      	ldr	r3, [pc, #84]	@ (8002c6c <HAL_TIM_Base_MspInit+0x6c>)
 8002c18:	2102      	movs	r1, #2
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	61da      	str	r2, [r3, #28]
 8002c1e:	4b13      	ldr	r3, [pc, #76]	@ (8002c6c <HAL_TIM_Base_MspInit+0x6c>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	2202      	movs	r2, #2
 8002c24:	4013      	ands	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002c2a:	e018      	b.n	8002c5e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0f      	ldr	r2, [pc, #60]	@ (8002c70 <HAL_TIM_Base_MspInit+0x70>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d113      	bne.n	8002c5e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c36:	4b0d      	ldr	r3, [pc, #52]	@ (8002c6c <HAL_TIM_Base_MspInit+0x6c>)
 8002c38:	69da      	ldr	r2, [r3, #28]
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c6c <HAL_TIM_Base_MspInit+0x6c>)
 8002c3c:	2110      	movs	r1, #16
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	61da      	str	r2, [r3, #28]
 8002c42:	4b0a      	ldr	r3, [pc, #40]	@ (8002c6c <HAL_TIM_Base_MspInit+0x6c>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	2210      	movs	r2, #16
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2100      	movs	r1, #0
 8002c52:	2011      	movs	r0, #17
 8002c54:	f000 fae2 	bl	800321c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c58:	2011      	movs	r0, #17
 8002c5a:	f000 faf4 	bl	8003246 <HAL_NVIC_EnableIRQ>
}
 8002c5e:	46c0      	nop			@ (mov r8, r8)
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b004      	add	sp, #16
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	46c0      	nop			@ (mov r8, r8)
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40001000 	.word	0x40001000

08002c74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c74:	b590      	push	{r4, r7, lr}
 8002c76:	b08b      	sub	sp, #44	@ 0x2c
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	2414      	movs	r4, #20
 8002c7e:	193b      	adds	r3, r7, r4
 8002c80:	0018      	movs	r0, r3
 8002c82:	2314      	movs	r3, #20
 8002c84:	001a      	movs	r2, r3
 8002c86:	2100      	movs	r1, #0
 8002c88:	f003 fe10 	bl	80068ac <memset>
  if(htim->Instance==TIM2)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	2380      	movs	r3, #128	@ 0x80
 8002c92:	05db      	lsls	r3, r3, #23
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d125      	bne.n	8002ce4 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c98:	4b29      	ldr	r3, [pc, #164]	@ (8002d40 <HAL_TIM_MspPostInit+0xcc>)
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	4b28      	ldr	r3, [pc, #160]	@ (8002d40 <HAL_TIM_MspPostInit+0xcc>)
 8002c9e:	2180      	movs	r1, #128	@ 0x80
 8002ca0:	0289      	lsls	r1, r1, #10
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	615a      	str	r2, [r3, #20]
 8002ca6:	4b26      	ldr	r3, [pc, #152]	@ (8002d40 <HAL_TIM_MspPostInit+0xcc>)
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	2380      	movs	r3, #128	@ 0x80
 8002cac:	029b      	lsls	r3, r3, #10
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cb4:	0021      	movs	r1, r4
 8002cb6:	187b      	adds	r3, r7, r1
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	187b      	adds	r3, r7, r1
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc2:	187b      	adds	r3, r7, r1
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd4:	187a      	adds	r2, r7, r1
 8002cd6:	2390      	movs	r3, #144	@ 0x90
 8002cd8:	05db      	lsls	r3, r3, #23
 8002cda:	0011      	movs	r1, r2
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f000 fd59 	bl	8003794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ce2:	e029      	b.n	8002d38 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM3)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a16      	ldr	r2, [pc, #88]	@ (8002d44 <HAL_TIM_MspPostInit+0xd0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d124      	bne.n	8002d38 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cee:	4b14      	ldr	r3, [pc, #80]	@ (8002d40 <HAL_TIM_MspPostInit+0xcc>)
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <HAL_TIM_MspPostInit+0xcc>)
 8002cf4:	2180      	movs	r1, #128	@ 0x80
 8002cf6:	0309      	lsls	r1, r1, #12
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	615a      	str	r2, [r3, #20]
 8002cfc:	4b10      	ldr	r3, [pc, #64]	@ (8002d40 <HAL_TIM_MspPostInit+0xcc>)
 8002cfe:	695a      	ldr	r2, [r3, #20]
 8002d00:	2380      	movs	r3, #128	@ 0x80
 8002d02:	031b      	lsls	r3, r3, #12
 8002d04:	4013      	ands	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USER_Channel_1_Pin;
 8002d0a:	2114      	movs	r1, #20
 8002d0c:	187b      	adds	r3, r7, r1
 8002d0e:	2280      	movs	r2, #128	@ 0x80
 8002d10:	0052      	lsls	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	187b      	adds	r3, r7, r1
 8002d16:	2202      	movs	r2, #2
 8002d18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	187b      	adds	r3, r7, r1
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	187b      	adds	r3, r7, r1
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8002d26:	187b      	adds	r3, r7, r1
 8002d28:	2201      	movs	r2, #1
 8002d2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USER_Channel_1_GPIO_Port, &GPIO_InitStruct);
 8002d2c:	187b      	adds	r3, r7, r1
 8002d2e:	4a06      	ldr	r2, [pc, #24]	@ (8002d48 <HAL_TIM_MspPostInit+0xd4>)
 8002d30:	0019      	movs	r1, r3
 8002d32:	0010      	movs	r0, r2
 8002d34:	f000 fd2e 	bl	8003794 <HAL_GPIO_Init>
}
 8002d38:	46c0      	nop			@ (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b00b      	add	sp, #44	@ 0x2c
 8002d3e:	bd90      	pop	{r4, r7, pc}
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40000400 	.word	0x40000400
 8002d48:	48000800 	.word	0x48000800

08002d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b08b      	sub	sp, #44	@ 0x2c
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	2414      	movs	r4, #20
 8002d56:	193b      	adds	r3, r7, r4
 8002d58:	0018      	movs	r0, r3
 8002d5a:	2314      	movs	r3, #20
 8002d5c:	001a      	movs	r2, r3
 8002d5e:	2100      	movs	r1, #0
 8002d60:	f003 fda4 	bl	80068ac <memset>
  if(huart->Instance==USART1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a4e      	ldr	r2, [pc, #312]	@ (8002ea4 <HAL_UART_MspInit+0x158>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d000      	beq.n	8002d70 <HAL_UART_MspInit+0x24>
 8002d6e:	e095      	b.n	8002e9c <HAL_UART_MspInit+0x150>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d70:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea8 <HAL_UART_MspInit+0x15c>)
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	4b4c      	ldr	r3, [pc, #304]	@ (8002ea8 <HAL_UART_MspInit+0x15c>)
 8002d76:	2180      	movs	r1, #128	@ 0x80
 8002d78:	01c9      	lsls	r1, r1, #7
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	619a      	str	r2, [r3, #24]
 8002d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea8 <HAL_UART_MspInit+0x15c>)
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	2380      	movs	r3, #128	@ 0x80
 8002d84:	01db      	lsls	r3, r3, #7
 8002d86:	4013      	ands	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8c:	4b46      	ldr	r3, [pc, #280]	@ (8002ea8 <HAL_UART_MspInit+0x15c>)
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	4b45      	ldr	r3, [pc, #276]	@ (8002ea8 <HAL_UART_MspInit+0x15c>)
 8002d92:	2180      	movs	r1, #128	@ 0x80
 8002d94:	0289      	lsls	r1, r1, #10
 8002d96:	430a      	orrs	r2, r1
 8002d98:	615a      	str	r2, [r3, #20]
 8002d9a:	4b43      	ldr	r3, [pc, #268]	@ (8002ea8 <HAL_UART_MspInit+0x15c>)
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	2380      	movs	r3, #128	@ 0x80
 8002da0:	029b      	lsls	r3, r3, #10
 8002da2:	4013      	ands	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002da8:	193b      	adds	r3, r7, r4
 8002daa:	22c0      	movs	r2, #192	@ 0xc0
 8002dac:	00d2      	lsls	r2, r2, #3
 8002dae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db0:	0021      	movs	r1, r4
 8002db2:	187b      	adds	r3, r7, r1
 8002db4:	2202      	movs	r2, #2
 8002db6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	187b      	adds	r3, r7, r1
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dbe:	187b      	adds	r3, r7, r1
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dca:	187a      	adds	r2, r7, r1
 8002dcc:	2390      	movs	r3, #144	@ 0x90
 8002dce:	05db      	lsls	r3, r3, #23
 8002dd0:	0011      	movs	r1, r2
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 fcde 	bl	8003794 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002dd8:	4b34      	ldr	r3, [pc, #208]	@ (8002eac <HAL_UART_MspInit+0x160>)
 8002dda:	4a35      	ldr	r2, [pc, #212]	@ (8002eb0 <HAL_UART_MspInit+0x164>)
 8002ddc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dde:	4b33      	ldr	r3, [pc, #204]	@ (8002eac <HAL_UART_MspInit+0x160>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002de4:	4b31      	ldr	r3, [pc, #196]	@ (8002eac <HAL_UART_MspInit+0x160>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dea:	4b30      	ldr	r3, [pc, #192]	@ (8002eac <HAL_UART_MspInit+0x160>)
 8002dec:	2280      	movs	r2, #128	@ 0x80
 8002dee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002df0:	4b2e      	ldr	r3, [pc, #184]	@ (8002eac <HAL_UART_MspInit+0x160>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002df6:	4b2d      	ldr	r3, [pc, #180]	@ (8002eac <HAL_UART_MspInit+0x160>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8002eac <HAL_UART_MspInit+0x160>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e02:	4b2a      	ldr	r3, [pc, #168]	@ (8002eac <HAL_UART_MspInit+0x160>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002e08:	4b28      	ldr	r3, [pc, #160]	@ (8002eac <HAL_UART_MspInit+0x160>)
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f000 fb34 	bl	8003478 <HAL_DMA_Init>
 8002e10:	1e03      	subs	r3, r0, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002e14:	f7ff fe60 	bl	8002ad8 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_RX_DMA_CH5);
 8002e18:	4b26      	ldr	r3, [pc, #152]	@ (8002eb4 <HAL_UART_MspInit+0x168>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b25      	ldr	r3, [pc, #148]	@ (8002eb4 <HAL_UART_MspInit+0x168>)
 8002e1e:	2180      	movs	r1, #128	@ 0x80
 8002e20:	00c9      	lsls	r1, r1, #3
 8002e22:	430a      	orrs	r2, r1
 8002e24:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a20      	ldr	r2, [pc, #128]	@ (8002eac <HAL_UART_MspInit+0x160>)
 8002e2a:	675a      	str	r2, [r3, #116]	@ 0x74
 8002e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002eac <HAL_UART_MspInit+0x160>)
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002e32:	4b21      	ldr	r3, [pc, #132]	@ (8002eb8 <HAL_UART_MspInit+0x16c>)
 8002e34:	4a21      	ldr	r2, [pc, #132]	@ (8002ebc <HAL_UART_MspInit+0x170>)
 8002e36:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e38:	4b1f      	ldr	r3, [pc, #124]	@ (8002eb8 <HAL_UART_MspInit+0x16c>)
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb8 <HAL_UART_MspInit+0x16c>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e44:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb8 <HAL_UART_MspInit+0x16c>)
 8002e46:	2280      	movs	r2, #128	@ 0x80
 8002e48:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb8 <HAL_UART_MspInit+0x16c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e50:	4b19      	ldr	r3, [pc, #100]	@ (8002eb8 <HAL_UART_MspInit+0x16c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002e56:	4b18      	ldr	r3, [pc, #96]	@ (8002eb8 <HAL_UART_MspInit+0x16c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e5c:	4b16      	ldr	r3, [pc, #88]	@ (8002eb8 <HAL_UART_MspInit+0x16c>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002e62:	4b15      	ldr	r3, [pc, #84]	@ (8002eb8 <HAL_UART_MspInit+0x16c>)
 8002e64:	0018      	movs	r0, r3
 8002e66:	f000 fb07 	bl	8003478 <HAL_DMA_Init>
 8002e6a:	1e03      	subs	r3, r0, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 8002e6e:	f7ff fe33 	bl	8002ad8 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 8002e72:	4b10      	ldr	r3, [pc, #64]	@ (8002eb4 <HAL_UART_MspInit+0x168>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb4 <HAL_UART_MspInit+0x168>)
 8002e78:	2180      	movs	r1, #128	@ 0x80
 8002e7a:	0089      	lsls	r1, r1, #2
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb8 <HAL_UART_MspInit+0x16c>)
 8002e84:	671a      	str	r2, [r3, #112]	@ 0x70
 8002e86:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb8 <HAL_UART_MspInit+0x16c>)
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2100      	movs	r1, #0
 8002e90:	201b      	movs	r0, #27
 8002e92:	f000 f9c3 	bl	800321c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e96:	201b      	movs	r0, #27
 8002e98:	f000 f9d5 	bl	8003246 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002e9c:	46c0      	nop			@ (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b00b      	add	sp, #44	@ 0x2c
 8002ea2:	bd90      	pop	{r4, r7, pc}
 8002ea4:	40013800 	.word	0x40013800
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	200001a4 	.word	0x200001a4
 8002eb0:	40020058 	.word	0x40020058
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	200001e8 	.word	0x200001e8
 8002ebc:	40020044 	.word	0x40020044

08002ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ec4:	46c0      	nop			@ (mov r8, r8)
 8002ec6:	e7fd      	b.n	8002ec4 <NMI_Handler+0x4>

08002ec8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ecc:	46c0      	nop			@ (mov r8, r8)
 8002ece:	e7fd      	b.n	8002ecc <HardFault_Handler+0x4>

08002ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ed4:	46c0      	nop			@ (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ede:	46c0      	nop			@ (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ee8:	f000 f8ac 	bl	8003044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eec:	46c0      	nop			@ (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002ef8:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8002efa:	0018      	movs	r0, r3
 8002efc:	f000 fb81 	bl	8003602 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002f00:	4b04      	ldr	r3, [pc, #16]	@ (8002f14 <DMA1_Channel4_5_IRQHandler+0x20>)
 8002f02:	0018      	movs	r0, r3
 8002f04:	f000 fb7d 	bl	8003602 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8002f08:	46c0      	nop			@ (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	46c0      	nop			@ (mov r8, r8)
 8002f10:	200001e8 	.word	0x200001e8
 8002f14:	200001a4 	.word	0x200001a4

08002f18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f1c:	4b05      	ldr	r3, [pc, #20]	@ (8002f34 <TIM6_DAC_IRQHandler+0x1c>)
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f001 fd32 	bl	8004988 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002f24:	4b04      	ldr	r3, [pc, #16]	@ (8002f38 <TIM6_DAC_IRQHandler+0x20>)
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 fa6e 	bl	8003408 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f2c:	46c0      	nop			@ (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	200000d4 	.word	0x200000d4
 8002f38:	20000030 	.word	0x20000030

08002f3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f40:	4b03      	ldr	r3, [pc, #12]	@ (8002f50 <USART1_IRQHandler+0x14>)
 8002f42:	0018      	movs	r0, r3
 8002f44:	f002 fdfc 	bl	8005b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f48:	46c0      	nop			@ (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	2000011c 	.word	0x2000011c

08002f54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002f58:	46c0      	nop			@ (mov r8, r8)
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <Reset_Handler>:
 8002f60:	480d      	ldr	r0, [pc, #52]	@ (8002f98 <LoopForever+0x2>)
 8002f62:	4685      	mov	sp, r0
 8002f64:	f7ff fff6 	bl	8002f54 <SystemInit>
 8002f68:	480c      	ldr	r0, [pc, #48]	@ (8002f9c <LoopForever+0x6>)
 8002f6a:	490d      	ldr	r1, [pc, #52]	@ (8002fa0 <LoopForever+0xa>)
 8002f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa4 <LoopForever+0xe>)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e002      	b.n	8002f78 <LoopCopyDataInit>

08002f72 <CopyDataInit>:
 8002f72:	58d4      	ldr	r4, [r2, r3]
 8002f74:	50c4      	str	r4, [r0, r3]
 8002f76:	3304      	adds	r3, #4

08002f78 <LoopCopyDataInit>:
 8002f78:	18c4      	adds	r4, r0, r3
 8002f7a:	428c      	cmp	r4, r1
 8002f7c:	d3f9      	bcc.n	8002f72 <CopyDataInit>
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa8 <LoopForever+0x12>)
 8002f80:	4c0a      	ldr	r4, [pc, #40]	@ (8002fac <LoopForever+0x16>)
 8002f82:	2300      	movs	r3, #0
 8002f84:	e001      	b.n	8002f8a <LoopFillZerobss>

08002f86 <FillZerobss>:
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	3204      	adds	r2, #4

08002f8a <LoopFillZerobss>:
 8002f8a:	42a2      	cmp	r2, r4
 8002f8c:	d3fb      	bcc.n	8002f86 <FillZerobss>
 8002f8e:	f003 fc95 	bl	80068bc <__libc_init_array>
 8002f92:	f7ff fb45 	bl	8002620 <main>

08002f96 <LoopForever>:
 8002f96:	e7fe      	b.n	8002f96 <LoopForever>
 8002f98:	20002000 	.word	0x20002000
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	20000014 	.word	0x20000014
 8002fa4:	08007b18 	.word	0x08007b18
 8002fa8:	20000014 	.word	0x20000014
 8002fac:	20000230 	.word	0x20000230

08002fb0 <ADC1_COMP_IRQHandler>:
 8002fb0:	e7fe      	b.n	8002fb0 <ADC1_COMP_IRQHandler>
	...

08002fb4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fb8:	4b07      	ldr	r3, [pc, #28]	@ (8002fd8 <HAL_Init+0x24>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <HAL_Init+0x24>)
 8002fbe:	2110      	movs	r1, #16
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002fc4:	2003      	movs	r0, #3
 8002fc6:	f000 f809 	bl	8002fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fca:	f7ff fd8b 	bl	8002ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			@ (mov r8, r8)
 8002fd8:	40022000 	.word	0x40022000

08002fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fe4:	4b14      	ldr	r3, [pc, #80]	@ (8003038 <HAL_InitTick+0x5c>)
 8002fe6:	681c      	ldr	r4, [r3, #0]
 8002fe8:	4b14      	ldr	r3, [pc, #80]	@ (800303c <HAL_InitTick+0x60>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	0019      	movs	r1, r3
 8002fee:	23fa      	movs	r3, #250	@ 0xfa
 8002ff0:	0098      	lsls	r0, r3, #2
 8002ff2:	f7fd f891 	bl	8000118 <__udivsi3>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	0020      	movs	r0, r4
 8002ffc:	f7fd f88c 	bl	8000118 <__udivsi3>
 8003000:	0003      	movs	r3, r0
 8003002:	0018      	movs	r0, r3
 8003004:	f000 f92f 	bl	8003266 <HAL_SYSTICK_Config>
 8003008:	1e03      	subs	r3, r0, #0
 800300a:	d001      	beq.n	8003010 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e00f      	b.n	8003030 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b03      	cmp	r3, #3
 8003014:	d80b      	bhi.n	800302e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	2301      	movs	r3, #1
 800301a:	425b      	negs	r3, r3
 800301c:	2200      	movs	r2, #0
 800301e:	0018      	movs	r0, r3
 8003020:	f000 f8fc 	bl	800321c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003024:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <HAL_InitTick+0x64>)
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
}
 8003030:	0018      	movs	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	b003      	add	sp, #12
 8003036:	bd90      	pop	{r4, r7, pc}
 8003038:	20000008 	.word	0x20000008
 800303c:	20000010 	.word	0x20000010
 8003040:	2000000c 	.word	0x2000000c

08003044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003048:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <HAL_IncTick+0x1c>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	001a      	movs	r2, r3
 800304e:	4b05      	ldr	r3, [pc, #20]	@ (8003064 <HAL_IncTick+0x20>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	18d2      	adds	r2, r2, r3
 8003054:	4b03      	ldr	r3, [pc, #12]	@ (8003064 <HAL_IncTick+0x20>)
 8003056:	601a      	str	r2, [r3, #0]
}
 8003058:	46c0      	nop			@ (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	20000010 	.word	0x20000010
 8003064:	2000022c 	.word	0x2000022c

08003068 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  return uwTick;
 800306c:	4b02      	ldr	r3, [pc, #8]	@ (8003078 <HAL_GetTick+0x10>)
 800306e:	681b      	ldr	r3, [r3, #0]
}
 8003070:	0018      	movs	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	2000022c 	.word	0x2000022c

0800307c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003084:	f7ff fff0 	bl	8003068 <HAL_GetTick>
 8003088:	0003      	movs	r3, r0
 800308a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	3301      	adds	r3, #1
 8003094:	d005      	beq.n	80030a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003096:	4b0a      	ldr	r3, [pc, #40]	@ (80030c0 <HAL_Delay+0x44>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	001a      	movs	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	189b      	adds	r3, r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80030a2:	46c0      	nop			@ (mov r8, r8)
 80030a4:	f7ff ffe0 	bl	8003068 <HAL_GetTick>
 80030a8:	0002      	movs	r2, r0
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d8f7      	bhi.n	80030a4 <HAL_Delay+0x28>
  {
  }
}
 80030b4:	46c0      	nop			@ (mov r8, r8)
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b004      	add	sp, #16
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	20000010 	.word	0x20000010

080030c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	0002      	movs	r2, r0
 80030cc:	1dfb      	adds	r3, r7, #7
 80030ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030d0:	1dfb      	adds	r3, r7, #7
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80030d6:	d809      	bhi.n	80030ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030d8:	1dfb      	adds	r3, r7, #7
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	001a      	movs	r2, r3
 80030de:	231f      	movs	r3, #31
 80030e0:	401a      	ands	r2, r3
 80030e2:	4b04      	ldr	r3, [pc, #16]	@ (80030f4 <__NVIC_EnableIRQ+0x30>)
 80030e4:	2101      	movs	r1, #1
 80030e6:	4091      	lsls	r1, r2
 80030e8:	000a      	movs	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]
  }
}
 80030ec:	46c0      	nop			@ (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	e000e100 	.word	0xe000e100

080030f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	0002      	movs	r2, r0
 8003100:	6039      	str	r1, [r7, #0]
 8003102:	1dfb      	adds	r3, r7, #7
 8003104:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003106:	1dfb      	adds	r3, r7, #7
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b7f      	cmp	r3, #127	@ 0x7f
 800310c:	d828      	bhi.n	8003160 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800310e:	4a2f      	ldr	r2, [pc, #188]	@ (80031cc <__NVIC_SetPriority+0xd4>)
 8003110:	1dfb      	adds	r3, r7, #7
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	b25b      	sxtb	r3, r3
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	33c0      	adds	r3, #192	@ 0xc0
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	589b      	ldr	r3, [r3, r2]
 800311e:	1dfa      	adds	r2, r7, #7
 8003120:	7812      	ldrb	r2, [r2, #0]
 8003122:	0011      	movs	r1, r2
 8003124:	2203      	movs	r2, #3
 8003126:	400a      	ands	r2, r1
 8003128:	00d2      	lsls	r2, r2, #3
 800312a:	21ff      	movs	r1, #255	@ 0xff
 800312c:	4091      	lsls	r1, r2
 800312e:	000a      	movs	r2, r1
 8003130:	43d2      	mvns	r2, r2
 8003132:	401a      	ands	r2, r3
 8003134:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	019b      	lsls	r3, r3, #6
 800313a:	22ff      	movs	r2, #255	@ 0xff
 800313c:	401a      	ands	r2, r3
 800313e:	1dfb      	adds	r3, r7, #7
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	0018      	movs	r0, r3
 8003144:	2303      	movs	r3, #3
 8003146:	4003      	ands	r3, r0
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800314c:	481f      	ldr	r0, [pc, #124]	@ (80031cc <__NVIC_SetPriority+0xd4>)
 800314e:	1dfb      	adds	r3, r7, #7
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	b25b      	sxtb	r3, r3
 8003154:	089b      	lsrs	r3, r3, #2
 8003156:	430a      	orrs	r2, r1
 8003158:	33c0      	adds	r3, #192	@ 0xc0
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800315e:	e031      	b.n	80031c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003160:	4a1b      	ldr	r2, [pc, #108]	@ (80031d0 <__NVIC_SetPriority+0xd8>)
 8003162:	1dfb      	adds	r3, r7, #7
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	0019      	movs	r1, r3
 8003168:	230f      	movs	r3, #15
 800316a:	400b      	ands	r3, r1
 800316c:	3b08      	subs	r3, #8
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	3306      	adds	r3, #6
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	18d3      	adds	r3, r2, r3
 8003176:	3304      	adds	r3, #4
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	1dfa      	adds	r2, r7, #7
 800317c:	7812      	ldrb	r2, [r2, #0]
 800317e:	0011      	movs	r1, r2
 8003180:	2203      	movs	r2, #3
 8003182:	400a      	ands	r2, r1
 8003184:	00d2      	lsls	r2, r2, #3
 8003186:	21ff      	movs	r1, #255	@ 0xff
 8003188:	4091      	lsls	r1, r2
 800318a:	000a      	movs	r2, r1
 800318c:	43d2      	mvns	r2, r2
 800318e:	401a      	ands	r2, r3
 8003190:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	019b      	lsls	r3, r3, #6
 8003196:	22ff      	movs	r2, #255	@ 0xff
 8003198:	401a      	ands	r2, r3
 800319a:	1dfb      	adds	r3, r7, #7
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	0018      	movs	r0, r3
 80031a0:	2303      	movs	r3, #3
 80031a2:	4003      	ands	r3, r0
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031a8:	4809      	ldr	r0, [pc, #36]	@ (80031d0 <__NVIC_SetPriority+0xd8>)
 80031aa:	1dfb      	adds	r3, r7, #7
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	001c      	movs	r4, r3
 80031b0:	230f      	movs	r3, #15
 80031b2:	4023      	ands	r3, r4
 80031b4:	3b08      	subs	r3, #8
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	430a      	orrs	r2, r1
 80031ba:	3306      	adds	r3, #6
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	18c3      	adds	r3, r0, r3
 80031c0:	3304      	adds	r3, #4
 80031c2:	601a      	str	r2, [r3, #0]
}
 80031c4:	46c0      	nop			@ (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b003      	add	sp, #12
 80031ca:	bd90      	pop	{r4, r7, pc}
 80031cc:	e000e100 	.word	0xe000e100
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	1e5a      	subs	r2, r3, #1
 80031e0:	2380      	movs	r3, #128	@ 0x80
 80031e2:	045b      	lsls	r3, r3, #17
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d301      	bcc.n	80031ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031e8:	2301      	movs	r3, #1
 80031ea:	e010      	b.n	800320e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003218 <SysTick_Config+0x44>)
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	3a01      	subs	r2, #1
 80031f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031f4:	2301      	movs	r3, #1
 80031f6:	425b      	negs	r3, r3
 80031f8:	2103      	movs	r1, #3
 80031fa:	0018      	movs	r0, r3
 80031fc:	f7ff ff7c 	bl	80030f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003200:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <SysTick_Config+0x44>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003206:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <SysTick_Config+0x44>)
 8003208:	2207      	movs	r2, #7
 800320a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800320c:	2300      	movs	r3, #0
}
 800320e:	0018      	movs	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	b002      	add	sp, #8
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	e000e010 	.word	0xe000e010

0800321c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	210f      	movs	r1, #15
 8003228:	187b      	adds	r3, r7, r1
 800322a:	1c02      	adds	r2, r0, #0
 800322c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	187b      	adds	r3, r7, r1
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	b25b      	sxtb	r3, r3
 8003236:	0011      	movs	r1, r2
 8003238:	0018      	movs	r0, r3
 800323a:	f7ff ff5d 	bl	80030f8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	b004      	add	sp, #16
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	0002      	movs	r2, r0
 800324e:	1dfb      	adds	r3, r7, #7
 8003250:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003252:	1dfb      	adds	r3, r7, #7
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	b25b      	sxtb	r3, r3
 8003258:	0018      	movs	r0, r3
 800325a:	f7ff ff33 	bl	80030c4 <__NVIC_EnableIRQ>
}
 800325e:	46c0      	nop			@ (mov r8, r8)
 8003260:	46bd      	mov	sp, r7
 8003262:	b002      	add	sp, #8
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	0018      	movs	r0, r3
 8003272:	f7ff ffaf 	bl	80031d4 <SysTick_Config>
 8003276:	0003      	movs	r3, r0
}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	b002      	add	sp, #8
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e015      	b.n	80032be <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	791b      	ldrb	r3, [r3, #4]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d106      	bne.n	80032aa <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7ff fc41 	bl	8002b2c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2202      	movs	r2, #2
 80032ae:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	0018      	movs	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b002      	add	sp, #8
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d105      	bne.n	80032f0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	18d3      	adds	r3, r2, r3
 80032ea:	3308      	adds	r3, #8
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	e004      	b.n	80032fa <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	18d3      	adds	r3, r2, r3
 80032f6:	3314      	adds	r3, #20
 80032f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	0018      	movs	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	b006      	add	sp, #24
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	46bd      	mov	sp, r7
 8003316:	b002      	add	sp, #8
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_DAC_ConfigChannel>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	795b      	ldrb	r3, [r3, #5]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_DAC_ConfigChannel+0x20>
 8003336:	2302      	movs	r3, #2
 8003338:	e029      	b.n	800338e <HAL_DAC_ConfigChannel+0x74>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2201      	movs	r2, #1
 800333e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2202      	movs	r2, #2
 8003344:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 800334e:	223e      	movs	r2, #62	@ 0x3e
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	409a      	lsls	r2, r3
 8003354:	0013      	movs	r3, r2
 8003356:	43da      	mvns	r2, r3
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	4013      	ands	r3, r2
 800335c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	409a      	lsls	r2, r3
 8003370:	0013      	movs	r3, r2
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	0018      	movs	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	b006      	add	sp, #24
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_DAC_Start>:
       /* STM32F091xC  STM32F098xx */

#if defined (STM32F051x8) || defined (STM32F058xx)

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	795b      	ldrb	r3, [r3, #5]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_DAC_Start+0x16>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e028      	b.n	80033fe <HAL_DAC_Start+0x68>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6819      	ldr	r1, [r3, #0]
 80033be:	2201      	movs	r2, #1
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	409a      	lsls	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10e      	bne.n	80033f0 <HAL_DAC_Start+0x5a>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	223c      	movs	r2, #60	@ 0x3c
 80033da:	4013      	ands	r3, r2
 80033dc:	2b3c      	cmp	r3, #60	@ 0x3c
 80033de:	d107      	bne.n	80033f0 <HAL_DAC_Start+0x5a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2101      	movs	r1, #1
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
    }
  }
 
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	0018      	movs	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	b002      	add	sp, #8
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	2380      	movs	r3, #128	@ 0x80
 8003418:	019b      	lsls	r3, r3, #6
 800341a:	401a      	ands	r2, r3
 800341c:	2380      	movs	r3, #128	@ 0x80
 800341e:	019b      	lsls	r3, r3, #6
 8003420:	429a      	cmp	r2, r3
 8003422:	d123      	bne.n	800346c <HAL_DAC_IRQHandler+0x64>
  { 
  /* Check Overrun flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800342a:	2380      	movs	r3, #128	@ 0x80
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	401a      	ands	r2, r3
 8003430:	2380      	movs	r3, #128	@ 0x80
 8003432:	019b      	lsls	r3, r3, #6
 8003434:	429a      	cmp	r2, r3
 8003436:	d119      	bne.n	800346c <HAL_DAC_IRQHandler+0x64>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2204      	movs	r2, #4
 800343c:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2201      	movs	r2, #1
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2280      	movs	r2, #128	@ 0x80
 8003450:	0192      	lsls	r2, r2, #6
 8003452:	635a      	str	r2, [r3, #52]	@ 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4905      	ldr	r1, [pc, #20]	@ (8003474 <HAL_DAC_IRQHandler+0x6c>)
 8003460:	400a      	ands	r2, r1
 8003462:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	0018      	movs	r0, r3
 8003468:	f7ff ff4f 	bl	800330a <HAL_DAC_DMAUnderrunCallbackCh1>
    }
  }
}
 800346c:	46c0      	nop			@ (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b002      	add	sp, #8
 8003472:	bd80      	pop	{r7, pc}
 8003474:	ffffefff 	.word	0xffffefff

08003478 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e036      	b.n	80034fc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2221      	movs	r2, #33	@ 0x21
 8003492:	2102      	movs	r1, #2
 8003494:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4a18      	ldr	r2, [pc, #96]	@ (8003504 <HAL_DMA_Init+0x8c>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80034ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	0018      	movs	r0, r3
 80034e0:	f000 f93c 	bl	800375c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2221      	movs	r2, #33	@ 0x21
 80034ee:	2101      	movs	r1, #1
 80034f0:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	2100      	movs	r1, #0
 80034f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	0018      	movs	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	b004      	add	sp, #16
 8003502:	bd80      	pop	{r7, pc}
 8003504:	ffffc00f 	.word	0xffffc00f

08003508 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2221      	movs	r2, #33	@ 0x21
 8003514:	5c9b      	ldrb	r3, [r3, r2]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d008      	beq.n	800352e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2204      	movs	r2, #4
 8003520:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	2100      	movs	r1, #0
 8003528:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e020      	b.n	8003570 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	210e      	movs	r1, #14
 800353a:	438a      	bics	r2, r1
 800353c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2101      	movs	r1, #1
 800354a:	438a      	bics	r2, r1
 800354c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003556:	2101      	movs	r1, #1
 8003558:	4091      	lsls	r1, r2
 800355a:	000a      	movs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2221      	movs	r2, #33	@ 0x21
 8003562:	2101      	movs	r1, #1
 8003564:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	2100      	movs	r1, #0
 800356c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b002      	add	sp, #8
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003580:	210f      	movs	r1, #15
 8003582:	187b      	adds	r3, r7, r1
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2221      	movs	r2, #33	@ 0x21
 800358c:	5c9b      	ldrb	r3, [r3, r2]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d006      	beq.n	80035a2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2204      	movs	r2, #4
 8003598:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800359a:	187b      	adds	r3, r7, r1
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e028      	b.n	80035f4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	210e      	movs	r1, #14
 80035ae:	438a      	bics	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2101      	movs	r1, #1
 80035be:	438a      	bics	r2, r1
 80035c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ca:	2101      	movs	r1, #1
 80035cc:	4091      	lsls	r1, r2
 80035ce:	000a      	movs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2221      	movs	r2, #33	@ 0x21
 80035d6:	2101      	movs	r1, #1
 80035d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	2100      	movs	r1, #0
 80035e0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d004      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	0010      	movs	r0, r2
 80035f2:	4798      	blx	r3
    }
  }
  return status;
 80035f4:	230f      	movs	r3, #15
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	781b      	ldrb	r3, [r3, #0]
}
 80035fa:	0018      	movs	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b004      	add	sp, #16
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	2204      	movs	r2, #4
 8003620:	409a      	lsls	r2, r3
 8003622:	0013      	movs	r3, r2
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4013      	ands	r3, r2
 8003628:	d024      	beq.n	8003674 <HAL_DMA_IRQHandler+0x72>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2204      	movs	r2, #4
 800362e:	4013      	ands	r3, r2
 8003630:	d020      	beq.n	8003674 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2220      	movs	r2, #32
 800363a:	4013      	ands	r3, r2
 800363c:	d107      	bne.n	800364e <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2104      	movs	r1, #4
 800364a:	438a      	bics	r2, r1
 800364c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003656:	2104      	movs	r1, #4
 8003658:	4091      	lsls	r1, r2
 800365a:	000a      	movs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003662:	2b00      	cmp	r3, #0
 8003664:	d100      	bne.n	8003668 <HAL_DMA_IRQHandler+0x66>
 8003666:	e06a      	b.n	800373e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	0010      	movs	r0, r2
 8003670:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003672:	e064      	b.n	800373e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	2202      	movs	r2, #2
 800367a:	409a      	lsls	r2, r3
 800367c:	0013      	movs	r3, r2
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4013      	ands	r3, r2
 8003682:	d02b      	beq.n	80036dc <HAL_DMA_IRQHandler+0xda>
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2202      	movs	r2, #2
 8003688:	4013      	ands	r3, r2
 800368a:	d027      	beq.n	80036dc <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2220      	movs	r2, #32
 8003694:	4013      	ands	r3, r2
 8003696:	d10b      	bne.n	80036b0 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	210a      	movs	r1, #10
 80036a4:	438a      	bics	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2221      	movs	r2, #33	@ 0x21
 80036ac:	2101      	movs	r1, #1
 80036ae:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b8:	2102      	movs	r1, #2
 80036ba:	4091      	lsls	r1, r2
 80036bc:	000a      	movs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	2100      	movs	r1, #0
 80036c6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d036      	beq.n	800373e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	0010      	movs	r0, r2
 80036d8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80036da:	e030      	b.n	800373e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e0:	2208      	movs	r2, #8
 80036e2:	409a      	lsls	r2, r3
 80036e4:	0013      	movs	r3, r2
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4013      	ands	r3, r2
 80036ea:	d028      	beq.n	800373e <HAL_DMA_IRQHandler+0x13c>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2208      	movs	r2, #8
 80036f0:	4013      	ands	r3, r2
 80036f2:	d024      	beq.n	800373e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	210e      	movs	r1, #14
 8003700:	438a      	bics	r2, r1
 8003702:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370c:	2101      	movs	r1, #1
 800370e:	4091      	lsls	r1, r2
 8003710:	000a      	movs	r2, r1
 8003712:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2221      	movs	r2, #33	@ 0x21
 800371e:	2101      	movs	r1, #1
 8003720:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	2100      	movs	r1, #0
 8003728:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	0010      	movs	r0, r2
 800373a:	4798      	blx	r3
    }
  }
}
 800373c:	e7ff      	b.n	800373e <HAL_DMA_IRQHandler+0x13c>
 800373e:	46c0      	nop			@ (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	b004      	add	sp, #16
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8003752:	0018      	movs	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	b002      	add	sp, #8
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a08      	ldr	r2, [pc, #32]	@ (800378c <DMA_CalcBaseAndBitshift+0x30>)
 800376a:	4694      	mov	ip, r2
 800376c:	4463      	add	r3, ip
 800376e:	2114      	movs	r1, #20
 8003770:	0018      	movs	r0, r3
 8003772:	f7fc fcd1 	bl	8000118 <__udivsi3>
 8003776:	0003      	movs	r3, r0
 8003778:	009a      	lsls	r2, r3, #2
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a03      	ldr	r2, [pc, #12]	@ (8003790 <DMA_CalcBaseAndBitshift+0x34>)
 8003782:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003784:	46c0      	nop			@ (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bd80      	pop	{r7, pc}
 800378c:	bffdfff8 	.word	0xbffdfff8
 8003790:	40020000 	.word	0x40020000

08003794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037a2:	e14f      	b.n	8003a44 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2101      	movs	r1, #1
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4091      	lsls	r1, r2
 80037ae:	000a      	movs	r2, r1
 80037b0:	4013      	ands	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d100      	bne.n	80037bc <HAL_GPIO_Init+0x28>
 80037ba:	e140      	b.n	8003a3e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2203      	movs	r2, #3
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d005      	beq.n	80037d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2203      	movs	r2, #3
 80037ce:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d130      	bne.n	8003836 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	2203      	movs	r2, #3
 80037e0:	409a      	lsls	r2, r3
 80037e2:	0013      	movs	r3, r2
 80037e4:	43da      	mvns	r2, r3
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	409a      	lsls	r2, r3
 80037f6:	0013      	movs	r3, r2
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800380a:	2201      	movs	r2, #1
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	409a      	lsls	r2, r3
 8003810:	0013      	movs	r3, r2
 8003812:	43da      	mvns	r2, r3
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4013      	ands	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	091b      	lsrs	r3, r3, #4
 8003820:	2201      	movs	r2, #1
 8003822:	401a      	ands	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	409a      	lsls	r2, r3
 8003828:	0013      	movs	r3, r2
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2203      	movs	r2, #3
 800383c:	4013      	ands	r3, r2
 800383e:	2b03      	cmp	r3, #3
 8003840:	d017      	beq.n	8003872 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2203      	movs	r2, #3
 800384e:	409a      	lsls	r2, r3
 8003850:	0013      	movs	r3, r2
 8003852:	43da      	mvns	r2, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	409a      	lsls	r2, r3
 8003864:	0013      	movs	r3, r2
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2203      	movs	r2, #3
 8003878:	4013      	ands	r3, r2
 800387a:	2b02      	cmp	r3, #2
 800387c:	d123      	bne.n	80038c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	08da      	lsrs	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3208      	adds	r2, #8
 8003886:	0092      	lsls	r2, r2, #2
 8003888:	58d3      	ldr	r3, [r2, r3]
 800388a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2207      	movs	r2, #7
 8003890:	4013      	ands	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	220f      	movs	r2, #15
 8003896:	409a      	lsls	r2, r3
 8003898:	0013      	movs	r3, r2
 800389a:	43da      	mvns	r2, r3
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4013      	ands	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2107      	movs	r1, #7
 80038aa:	400b      	ands	r3, r1
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	409a      	lsls	r2, r3
 80038b0:	0013      	movs	r3, r2
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	08da      	lsrs	r2, r3, #3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3208      	adds	r2, #8
 80038c0:	0092      	lsls	r2, r2, #2
 80038c2:	6939      	ldr	r1, [r7, #16]
 80038c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	2203      	movs	r2, #3
 80038d2:	409a      	lsls	r2, r3
 80038d4:	0013      	movs	r3, r2
 80038d6:	43da      	mvns	r2, r3
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2203      	movs	r2, #3
 80038e4:	401a      	ands	r2, r3
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	409a      	lsls	r2, r3
 80038ec:	0013      	movs	r3, r2
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	23c0      	movs	r3, #192	@ 0xc0
 8003900:	029b      	lsls	r3, r3, #10
 8003902:	4013      	ands	r3, r2
 8003904:	d100      	bne.n	8003908 <HAL_GPIO_Init+0x174>
 8003906:	e09a      	b.n	8003a3e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003908:	4b54      	ldr	r3, [pc, #336]	@ (8003a5c <HAL_GPIO_Init+0x2c8>)
 800390a:	699a      	ldr	r2, [r3, #24]
 800390c:	4b53      	ldr	r3, [pc, #332]	@ (8003a5c <HAL_GPIO_Init+0x2c8>)
 800390e:	2101      	movs	r1, #1
 8003910:	430a      	orrs	r2, r1
 8003912:	619a      	str	r2, [r3, #24]
 8003914:	4b51      	ldr	r3, [pc, #324]	@ (8003a5c <HAL_GPIO_Init+0x2c8>)
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	2201      	movs	r2, #1
 800391a:	4013      	ands	r3, r2
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003920:	4a4f      	ldr	r2, [pc, #316]	@ (8003a60 <HAL_GPIO_Init+0x2cc>)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	3302      	adds	r3, #2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	589b      	ldr	r3, [r3, r2]
 800392c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2203      	movs	r2, #3
 8003932:	4013      	ands	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	220f      	movs	r2, #15
 8003938:	409a      	lsls	r2, r3
 800393a:	0013      	movs	r3, r2
 800393c:	43da      	mvns	r2, r3
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4013      	ands	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	2390      	movs	r3, #144	@ 0x90
 8003948:	05db      	lsls	r3, r3, #23
 800394a:	429a      	cmp	r2, r3
 800394c:	d013      	beq.n	8003976 <HAL_GPIO_Init+0x1e2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a44      	ldr	r2, [pc, #272]	@ (8003a64 <HAL_GPIO_Init+0x2d0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00d      	beq.n	8003972 <HAL_GPIO_Init+0x1de>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a43      	ldr	r2, [pc, #268]	@ (8003a68 <HAL_GPIO_Init+0x2d4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d007      	beq.n	800396e <HAL_GPIO_Init+0x1da>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a42      	ldr	r2, [pc, #264]	@ (8003a6c <HAL_GPIO_Init+0x2d8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d101      	bne.n	800396a <HAL_GPIO_Init+0x1d6>
 8003966:	2303      	movs	r3, #3
 8003968:	e006      	b.n	8003978 <HAL_GPIO_Init+0x1e4>
 800396a:	2305      	movs	r3, #5
 800396c:	e004      	b.n	8003978 <HAL_GPIO_Init+0x1e4>
 800396e:	2302      	movs	r3, #2
 8003970:	e002      	b.n	8003978 <HAL_GPIO_Init+0x1e4>
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <HAL_GPIO_Init+0x1e4>
 8003976:	2300      	movs	r3, #0
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	2103      	movs	r1, #3
 800397c:	400a      	ands	r2, r1
 800397e:	0092      	lsls	r2, r2, #2
 8003980:	4093      	lsls	r3, r2
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003988:	4935      	ldr	r1, [pc, #212]	@ (8003a60 <HAL_GPIO_Init+0x2cc>)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	089b      	lsrs	r3, r3, #2
 800398e:	3302      	adds	r3, #2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003996:	4b36      	ldr	r3, [pc, #216]	@ (8003a70 <HAL_GPIO_Init+0x2dc>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	43da      	mvns	r2, r3
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	2380      	movs	r3, #128	@ 0x80
 80039ac:	035b      	lsls	r3, r3, #13
 80039ae:	4013      	ands	r3, r2
 80039b0:	d003      	beq.n	80039ba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80039ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003a70 <HAL_GPIO_Init+0x2dc>)
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80039c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a70 <HAL_GPIO_Init+0x2dc>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	43da      	mvns	r2, r3
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4013      	ands	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	2380      	movs	r3, #128	@ 0x80
 80039d6:	039b      	lsls	r3, r3, #14
 80039d8:	4013      	ands	r3, r2
 80039da:	d003      	beq.n	80039e4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80039e4:	4b22      	ldr	r3, [pc, #136]	@ (8003a70 <HAL_GPIO_Init+0x2dc>)
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80039ea:	4b21      	ldr	r3, [pc, #132]	@ (8003a70 <HAL_GPIO_Init+0x2dc>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	43da      	mvns	r2, r3
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4013      	ands	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	2380      	movs	r3, #128	@ 0x80
 8003a00:	029b      	lsls	r3, r3, #10
 8003a02:	4013      	ands	r3, r2
 8003a04:	d003      	beq.n	8003a0e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a0e:	4b18      	ldr	r3, [pc, #96]	@ (8003a70 <HAL_GPIO_Init+0x2dc>)
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003a14:	4b16      	ldr	r3, [pc, #88]	@ (8003a70 <HAL_GPIO_Init+0x2dc>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	43da      	mvns	r2, r3
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4013      	ands	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	2380      	movs	r3, #128	@ 0x80
 8003a2a:	025b      	lsls	r3, r3, #9
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a38:	4b0d      	ldr	r3, [pc, #52]	@ (8003a70 <HAL_GPIO_Init+0x2dc>)
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	3301      	adds	r3, #1
 8003a42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	40da      	lsrs	r2, r3
 8003a4c:	1e13      	subs	r3, r2, #0
 8003a4e:	d000      	beq.n	8003a52 <HAL_GPIO_Init+0x2be>
 8003a50:	e6a8      	b.n	80037a4 <HAL_GPIO_Init+0x10>
  } 
}
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	46c0      	nop			@ (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b006      	add	sp, #24
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	40010000 	.word	0x40010000
 8003a64:	48000400 	.word	0x48000400
 8003a68:	48000800 	.word	0x48000800
 8003a6c:	48000c00 	.word	0x48000c00
 8003a70:	40010400 	.word	0x40010400

08003a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e301      	b.n	800408a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d100      	bne.n	8003a92 <HAL_RCC_OscConfig+0x1e>
 8003a90:	e08d      	b.n	8003bae <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a92:	4bc3      	ldr	r3, [pc, #780]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	220c      	movs	r2, #12
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d00e      	beq.n	8003abc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a9e:	4bc0      	ldr	r3, [pc, #768]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	220c      	movs	r2, #12
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d116      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x64>
 8003aaa:	4bbd      	ldr	r3, [pc, #756]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	2380      	movs	r3, #128	@ 0x80
 8003ab0:	025b      	lsls	r3, r3, #9
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	2380      	movs	r3, #128	@ 0x80
 8003ab6:	025b      	lsls	r3, r3, #9
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d10d      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abc:	4bb8      	ldr	r3, [pc, #736]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	2380      	movs	r3, #128	@ 0x80
 8003ac2:	029b      	lsls	r3, r3, #10
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d100      	bne.n	8003aca <HAL_RCC_OscConfig+0x56>
 8003ac8:	e070      	b.n	8003bac <HAL_RCC_OscConfig+0x138>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d000      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x60>
 8003ad2:	e06b      	b.n	8003bac <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e2d8      	b.n	800408a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d107      	bne.n	8003af0 <HAL_RCC_OscConfig+0x7c>
 8003ae0:	4baf      	ldr	r3, [pc, #700]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4bae      	ldr	r3, [pc, #696]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003ae6:	2180      	movs	r1, #128	@ 0x80
 8003ae8:	0249      	lsls	r1, r1, #9
 8003aea:	430a      	orrs	r2, r1
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	e02f      	b.n	8003b50 <HAL_RCC_OscConfig+0xdc>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10c      	bne.n	8003b12 <HAL_RCC_OscConfig+0x9e>
 8003af8:	4ba9      	ldr	r3, [pc, #676]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4ba8      	ldr	r3, [pc, #672]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003afe:	49a9      	ldr	r1, [pc, #676]	@ (8003da4 <HAL_RCC_OscConfig+0x330>)
 8003b00:	400a      	ands	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	4ba6      	ldr	r3, [pc, #664]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4ba5      	ldr	r3, [pc, #660]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003b0a:	49a7      	ldr	r1, [pc, #668]	@ (8003da8 <HAL_RCC_OscConfig+0x334>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e01e      	b.n	8003b50 <HAL_RCC_OscConfig+0xdc>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b05      	cmp	r3, #5
 8003b18:	d10e      	bne.n	8003b38 <HAL_RCC_OscConfig+0xc4>
 8003b1a:	4ba1      	ldr	r3, [pc, #644]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4ba0      	ldr	r3, [pc, #640]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003b20:	2180      	movs	r1, #128	@ 0x80
 8003b22:	02c9      	lsls	r1, r1, #11
 8003b24:	430a      	orrs	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	4b9d      	ldr	r3, [pc, #628]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b9c      	ldr	r3, [pc, #624]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003b2e:	2180      	movs	r1, #128	@ 0x80
 8003b30:	0249      	lsls	r1, r1, #9
 8003b32:	430a      	orrs	r2, r1
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	e00b      	b.n	8003b50 <HAL_RCC_OscConfig+0xdc>
 8003b38:	4b99      	ldr	r3, [pc, #612]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	4b98      	ldr	r3, [pc, #608]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003b3e:	4999      	ldr	r1, [pc, #612]	@ (8003da4 <HAL_RCC_OscConfig+0x330>)
 8003b40:	400a      	ands	r2, r1
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	4b96      	ldr	r3, [pc, #600]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	4b95      	ldr	r3, [pc, #596]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003b4a:	4997      	ldr	r1, [pc, #604]	@ (8003da8 <HAL_RCC_OscConfig+0x334>)
 8003b4c:	400a      	ands	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d014      	beq.n	8003b82 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b58:	f7ff fa86 	bl	8003068 <HAL_GetTick>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b62:	f7ff fa81 	bl	8003068 <HAL_GetTick>
 8003b66:	0002      	movs	r2, r0
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b64      	cmp	r3, #100	@ 0x64
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e28a      	b.n	800408a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b74:	4b8a      	ldr	r3, [pc, #552]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	2380      	movs	r3, #128	@ 0x80
 8003b7a:	029b      	lsls	r3, r3, #10
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0xee>
 8003b80:	e015      	b.n	8003bae <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b82:	f7ff fa71 	bl	8003068 <HAL_GetTick>
 8003b86:	0003      	movs	r3, r0
 8003b88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7ff fa6c 	bl	8003068 <HAL_GetTick>
 8003b90:	0002      	movs	r2, r0
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	@ 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e275      	b.n	800408a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9e:	4b80      	ldr	r3, [pc, #512]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	2380      	movs	r3, #128	@ 0x80
 8003ba4:	029b      	lsls	r3, r3, #10
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x118>
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d100      	bne.n	8003bba <HAL_RCC_OscConfig+0x146>
 8003bb8:	e069      	b.n	8003c8e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003bba:	4b79      	ldr	r3, [pc, #484]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d00b      	beq.n	8003bdc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003bc4:	4b76      	ldr	r3, [pc, #472]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	220c      	movs	r2, #12
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d11c      	bne.n	8003c0a <HAL_RCC_OscConfig+0x196>
 8003bd0:	4b73      	ldr	r3, [pc, #460]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	2380      	movs	r3, #128	@ 0x80
 8003bd6:	025b      	lsls	r3, r3, #9
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d116      	bne.n	8003c0a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bdc:	4b70      	ldr	r3, [pc, #448]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2202      	movs	r2, #2
 8003be2:	4013      	ands	r3, r2
 8003be4:	d005      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x17e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d001      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e24b      	b.n	800408a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf2:	4b6b      	ldr	r3, [pc, #428]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	22f8      	movs	r2, #248	@ 0xf8
 8003bf8:	4393      	bics	r3, r2
 8003bfa:	0019      	movs	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	00da      	lsls	r2, r3, #3
 8003c02:	4b67      	ldr	r3, [pc, #412]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c08:	e041      	b.n	8003c8e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d024      	beq.n	8003c5c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c12:	4b63      	ldr	r3, [pc, #396]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	4b62      	ldr	r3, [pc, #392]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003c18:	2101      	movs	r1, #1
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1e:	f7ff fa23 	bl	8003068 <HAL_GetTick>
 8003c22:	0003      	movs	r3, r0
 8003c24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c28:	f7ff fa1e 	bl	8003068 <HAL_GetTick>
 8003c2c:	0002      	movs	r2, r0
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e227      	b.n	800408a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3a:	4b59      	ldr	r3, [pc, #356]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	4013      	ands	r3, r2
 8003c42:	d0f1      	beq.n	8003c28 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c44:	4b56      	ldr	r3, [pc, #344]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	22f8      	movs	r2, #248	@ 0xf8
 8003c4a:	4393      	bics	r3, r2
 8003c4c:	0019      	movs	r1, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	00da      	lsls	r2, r3, #3
 8003c54:	4b52      	ldr	r3, [pc, #328]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003c56:	430a      	orrs	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	e018      	b.n	8003c8e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c5c:	4b50      	ldr	r3, [pc, #320]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4b4f      	ldr	r3, [pc, #316]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003c62:	2101      	movs	r1, #1
 8003c64:	438a      	bics	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7ff f9fe 	bl	8003068 <HAL_GetTick>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c72:	f7ff f9f9 	bl	8003068 <HAL_GetTick>
 8003c76:	0002      	movs	r2, r0
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e202      	b.n	800408a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c84:	4b46      	ldr	r3, [pc, #280]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d1f1      	bne.n	8003c72 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2208      	movs	r2, #8
 8003c94:	4013      	ands	r3, r2
 8003c96:	d036      	beq.n	8003d06 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d019      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca0:	4b3f      	ldr	r3, [pc, #252]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003ca2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ca4:	4b3e      	ldr	r3, [pc, #248]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cac:	f7ff f9dc 	bl	8003068 <HAL_GetTick>
 8003cb0:	0003      	movs	r3, r0
 8003cb2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb6:	f7ff f9d7 	bl	8003068 <HAL_GetTick>
 8003cba:	0002      	movs	r2, r0
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e1e0      	b.n	800408a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc8:	4b35      	ldr	r3, [pc, #212]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	2202      	movs	r2, #2
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d0f1      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x242>
 8003cd2:	e018      	b.n	8003d06 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd4:	4b32      	ldr	r3, [pc, #200]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003cd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cd8:	4b31      	ldr	r3, [pc, #196]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003cda:	2101      	movs	r1, #1
 8003cdc:	438a      	bics	r2, r1
 8003cde:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce0:	f7ff f9c2 	bl	8003068 <HAL_GetTick>
 8003ce4:	0003      	movs	r3, r0
 8003ce6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cea:	f7ff f9bd 	bl	8003068 <HAL_GetTick>
 8003cee:	0002      	movs	r2, r0
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e1c6      	b.n	800408a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cfc:	4b28      	ldr	r3, [pc, #160]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d00:	2202      	movs	r2, #2
 8003d02:	4013      	ands	r3, r2
 8003d04:	d1f1      	bne.n	8003cea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d100      	bne.n	8003d12 <HAL_RCC_OscConfig+0x29e>
 8003d10:	e0b4      	b.n	8003e7c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d12:	201f      	movs	r0, #31
 8003d14:	183b      	adds	r3, r7, r0
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d1a:	4b21      	ldr	r3, [pc, #132]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003d1c:	69da      	ldr	r2, [r3, #28]
 8003d1e:	2380      	movs	r3, #128	@ 0x80
 8003d20:	055b      	lsls	r3, r3, #21
 8003d22:	4013      	ands	r3, r2
 8003d24:	d110      	bne.n	8003d48 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d26:	4b1e      	ldr	r3, [pc, #120]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003d28:	69da      	ldr	r2, [r3, #28]
 8003d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003d2c:	2180      	movs	r1, #128	@ 0x80
 8003d2e:	0549      	lsls	r1, r1, #21
 8003d30:	430a      	orrs	r2, r1
 8003d32:	61da      	str	r2, [r3, #28]
 8003d34:	4b1a      	ldr	r3, [pc, #104]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	2380      	movs	r3, #128	@ 0x80
 8003d3a:	055b      	lsls	r3, r3, #21
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d42:	183b      	adds	r3, r7, r0
 8003d44:	2201      	movs	r2, #1
 8003d46:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d48:	4b18      	ldr	r3, [pc, #96]	@ (8003dac <HAL_RCC_OscConfig+0x338>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	2380      	movs	r3, #128	@ 0x80
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	4013      	ands	r3, r2
 8003d52:	d11a      	bne.n	8003d8a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d54:	4b15      	ldr	r3, [pc, #84]	@ (8003dac <HAL_RCC_OscConfig+0x338>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4b14      	ldr	r3, [pc, #80]	@ (8003dac <HAL_RCC_OscConfig+0x338>)
 8003d5a:	2180      	movs	r1, #128	@ 0x80
 8003d5c:	0049      	lsls	r1, r1, #1
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d62:	f7ff f981 	bl	8003068 <HAL_GetTick>
 8003d66:	0003      	movs	r3, r0
 8003d68:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6c:	f7ff f97c 	bl	8003068 <HAL_GetTick>
 8003d70:	0002      	movs	r2, r0
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	@ 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e185      	b.n	800408a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003dac <HAL_RCC_OscConfig+0x338>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	2380      	movs	r3, #128	@ 0x80
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	4013      	ands	r3, r2
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d10e      	bne.n	8003db0 <HAL_RCC_OscConfig+0x33c>
 8003d92:	4b03      	ldr	r3, [pc, #12]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003d94:	6a1a      	ldr	r2, [r3, #32]
 8003d96:	4b02      	ldr	r3, [pc, #8]	@ (8003da0 <HAL_RCC_OscConfig+0x32c>)
 8003d98:	2101      	movs	r1, #1
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	621a      	str	r2, [r3, #32]
 8003d9e:	e035      	b.n	8003e0c <HAL_RCC_OscConfig+0x398>
 8003da0:	40021000 	.word	0x40021000
 8003da4:	fffeffff 	.word	0xfffeffff
 8003da8:	fffbffff 	.word	0xfffbffff
 8003dac:	40007000 	.word	0x40007000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10c      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x35e>
 8003db8:	4bb6      	ldr	r3, [pc, #728]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003dba:	6a1a      	ldr	r2, [r3, #32]
 8003dbc:	4bb5      	ldr	r3, [pc, #724]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	438a      	bics	r2, r1
 8003dc2:	621a      	str	r2, [r3, #32]
 8003dc4:	4bb3      	ldr	r3, [pc, #716]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003dc6:	6a1a      	ldr	r2, [r3, #32]
 8003dc8:	4bb2      	ldr	r3, [pc, #712]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003dca:	2104      	movs	r1, #4
 8003dcc:	438a      	bics	r2, r1
 8003dce:	621a      	str	r2, [r3, #32]
 8003dd0:	e01c      	b.n	8003e0c <HAL_RCC_OscConfig+0x398>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b05      	cmp	r3, #5
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCC_OscConfig+0x380>
 8003dda:	4bae      	ldr	r3, [pc, #696]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003ddc:	6a1a      	ldr	r2, [r3, #32]
 8003dde:	4bad      	ldr	r3, [pc, #692]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003de0:	2104      	movs	r1, #4
 8003de2:	430a      	orrs	r2, r1
 8003de4:	621a      	str	r2, [r3, #32]
 8003de6:	4bab      	ldr	r3, [pc, #684]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003de8:	6a1a      	ldr	r2, [r3, #32]
 8003dea:	4baa      	ldr	r3, [pc, #680]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003dec:	2101      	movs	r1, #1
 8003dee:	430a      	orrs	r2, r1
 8003df0:	621a      	str	r2, [r3, #32]
 8003df2:	e00b      	b.n	8003e0c <HAL_RCC_OscConfig+0x398>
 8003df4:	4ba7      	ldr	r3, [pc, #668]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003df6:	6a1a      	ldr	r2, [r3, #32]
 8003df8:	4ba6      	ldr	r3, [pc, #664]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	438a      	bics	r2, r1
 8003dfe:	621a      	str	r2, [r3, #32]
 8003e00:	4ba4      	ldr	r3, [pc, #656]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003e02:	6a1a      	ldr	r2, [r3, #32]
 8003e04:	4ba3      	ldr	r3, [pc, #652]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003e06:	2104      	movs	r1, #4
 8003e08:	438a      	bics	r2, r1
 8003e0a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d014      	beq.n	8003e3e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e14:	f7ff f928 	bl	8003068 <HAL_GetTick>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1c:	e009      	b.n	8003e32 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7ff f923 	bl	8003068 <HAL_GetTick>
 8003e22:	0002      	movs	r2, r0
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	4a9b      	ldr	r2, [pc, #620]	@ (8004098 <HAL_RCC_OscConfig+0x624>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e12b      	b.n	800408a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e32:	4b98      	ldr	r3, [pc, #608]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	2202      	movs	r2, #2
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x3aa>
 8003e3c:	e013      	b.n	8003e66 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3e:	f7ff f913 	bl	8003068 <HAL_GetTick>
 8003e42:	0003      	movs	r3, r0
 8003e44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e46:	e009      	b.n	8003e5c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e48:	f7ff f90e 	bl	8003068 <HAL_GetTick>
 8003e4c:	0002      	movs	r2, r0
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	4a91      	ldr	r2, [pc, #580]	@ (8004098 <HAL_RCC_OscConfig+0x624>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e116      	b.n	800408a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e5c:	4b8d      	ldr	r3, [pc, #564]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	2202      	movs	r2, #2
 8003e62:	4013      	ands	r3, r2
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e66:	231f      	movs	r3, #31
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d105      	bne.n	8003e7c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e70:	4b88      	ldr	r3, [pc, #544]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	4b87      	ldr	r3, [pc, #540]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003e76:	4989      	ldr	r1, [pc, #548]	@ (800409c <HAL_RCC_OscConfig+0x628>)
 8003e78:	400a      	ands	r2, r1
 8003e7a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2210      	movs	r2, #16
 8003e82:	4013      	ands	r3, r2
 8003e84:	d063      	beq.n	8003f4e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d12a      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e8e:	4b81      	ldr	r3, [pc, #516]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e92:	4b80      	ldr	r3, [pc, #512]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003e94:	2104      	movs	r1, #4
 8003e96:	430a      	orrs	r2, r1
 8003e98:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003e9a:	4b7e      	ldr	r3, [pc, #504]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003e9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e9e:	4b7d      	ldr	r3, [pc, #500]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea6:	f7ff f8df 	bl	8003068 <HAL_GetTick>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003eb0:	f7ff f8da 	bl	8003068 <HAL_GetTick>
 8003eb4:	0002      	movs	r2, r0
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e0e3      	b.n	800408a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003ec2:	4b74      	ldr	r3, [pc, #464]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d0f1      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ecc:	4b71      	ldr	r3, [pc, #452]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed0:	22f8      	movs	r2, #248	@ 0xf8
 8003ed2:	4393      	bics	r3, r2
 8003ed4:	0019      	movs	r1, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	00da      	lsls	r2, r3, #3
 8003edc:	4b6d      	ldr	r3, [pc, #436]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ee2:	e034      	b.n	8003f4e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	3305      	adds	r3, #5
 8003eea:	d111      	bne.n	8003f10 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003eec:	4b69      	ldr	r3, [pc, #420]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003eee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ef0:	4b68      	ldr	r3, [pc, #416]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003ef2:	2104      	movs	r1, #4
 8003ef4:	438a      	bics	r2, r1
 8003ef6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ef8:	4b66      	ldr	r3, [pc, #408]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003efc:	22f8      	movs	r2, #248	@ 0xf8
 8003efe:	4393      	bics	r3, r2
 8003f00:	0019      	movs	r1, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	00da      	lsls	r2, r3, #3
 8003f08:	4b62      	ldr	r3, [pc, #392]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f0e:	e01e      	b.n	8003f4e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f10:	4b60      	ldr	r3, [pc, #384]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003f12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f14:	4b5f      	ldr	r3, [pc, #380]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003f16:	2104      	movs	r1, #4
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003f1c:	4b5d      	ldr	r3, [pc, #372]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003f1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f20:	4b5c      	ldr	r3, [pc, #368]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003f22:	2101      	movs	r1, #1
 8003f24:	438a      	bics	r2, r1
 8003f26:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f28:	f7ff f89e 	bl	8003068 <HAL_GetTick>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f32:	f7ff f899 	bl	8003068 <HAL_GetTick>
 8003f36:	0002      	movs	r2, r0
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e0a2      	b.n	800408a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f44:	4b53      	ldr	r3, [pc, #332]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f48:	2202      	movs	r2, #2
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d1f1      	bne.n	8003f32 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d100      	bne.n	8003f58 <HAL_RCC_OscConfig+0x4e4>
 8003f56:	e097      	b.n	8004088 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f58:	4b4e      	ldr	r3, [pc, #312]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	220c      	movs	r2, #12
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d100      	bne.n	8003f66 <HAL_RCC_OscConfig+0x4f2>
 8003f64:	e06b      	b.n	800403e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d14c      	bne.n	8004008 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6e:	4b49      	ldr	r3, [pc, #292]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	4b48      	ldr	r3, [pc, #288]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003f74:	494a      	ldr	r1, [pc, #296]	@ (80040a0 <HAL_RCC_OscConfig+0x62c>)
 8003f76:	400a      	ands	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7a:	f7ff f875 	bl	8003068 <HAL_GetTick>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f84:	f7ff f870 	bl	8003068 <HAL_GetTick>
 8003f88:	0002      	movs	r2, r0
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e079      	b.n	800408a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f96:	4b3f      	ldr	r3, [pc, #252]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	2380      	movs	r3, #128	@ 0x80
 8003f9c:	049b      	lsls	r3, r3, #18
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa2:	4b3c      	ldr	r3, [pc, #240]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa6:	220f      	movs	r2, #15
 8003fa8:	4393      	bics	r3, r2
 8003faa:	0019      	movs	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fb0:	4b38      	ldr	r3, [pc, #224]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003fb6:	4b37      	ldr	r3, [pc, #220]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4a3a      	ldr	r2, [pc, #232]	@ (80040a4 <HAL_RCC_OscConfig+0x630>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	0019      	movs	r1, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	4b32      	ldr	r3, [pc, #200]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd0:	4b30      	ldr	r3, [pc, #192]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003fd6:	2180      	movs	r1, #128	@ 0x80
 8003fd8:	0449      	lsls	r1, r1, #17
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fde:	f7ff f843 	bl	8003068 <HAL_GetTick>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe8:	f7ff f83e 	bl	8003068 <HAL_GetTick>
 8003fec:	0002      	movs	r2, r0
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e047      	b.n	800408a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ffa:	4b26      	ldr	r3, [pc, #152]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	2380      	movs	r3, #128	@ 0x80
 8004000:	049b      	lsls	r3, r3, #18
 8004002:	4013      	ands	r3, r2
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x574>
 8004006:	e03f      	b.n	8004088 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004008:	4b22      	ldr	r3, [pc, #136]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4b21      	ldr	r3, [pc, #132]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 800400e:	4924      	ldr	r1, [pc, #144]	@ (80040a0 <HAL_RCC_OscConfig+0x62c>)
 8004010:	400a      	ands	r2, r1
 8004012:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004014:	f7ff f828 	bl	8003068 <HAL_GetTick>
 8004018:	0003      	movs	r3, r0
 800401a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401e:	f7ff f823 	bl	8003068 <HAL_GetTick>
 8004022:	0002      	movs	r2, r0
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e02c      	b.n	800408a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004030:	4b18      	ldr	r3, [pc, #96]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	2380      	movs	r3, #128	@ 0x80
 8004036:	049b      	lsls	r3, r3, #18
 8004038:	4013      	ands	r3, r2
 800403a:	d1f0      	bne.n	800401e <HAL_RCC_OscConfig+0x5aa>
 800403c:	e024      	b.n	8004088 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e01f      	b.n	800408a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800404a:	4b12      	ldr	r3, [pc, #72]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004050:	4b10      	ldr	r3, [pc, #64]	@ (8004094 <HAL_RCC_OscConfig+0x620>)
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	2380      	movs	r3, #128	@ 0x80
 800405a:	025b      	lsls	r3, r3, #9
 800405c:	401a      	ands	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	429a      	cmp	r2, r3
 8004064:	d10e      	bne.n	8004084 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	220f      	movs	r2, #15
 800406a:	401a      	ands	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d107      	bne.n	8004084 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	23f0      	movs	r3, #240	@ 0xf0
 8004078:	039b      	lsls	r3, r3, #14
 800407a:	401a      	ands	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004080:	429a      	cmp	r2, r3
 8004082:	d001      	beq.n	8004088 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	0018      	movs	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	b008      	add	sp, #32
 8004090:	bd80      	pop	{r7, pc}
 8004092:	46c0      	nop			@ (mov r8, r8)
 8004094:	40021000 	.word	0x40021000
 8004098:	00001388 	.word	0x00001388
 800409c:	efffffff 	.word	0xefffffff
 80040a0:	feffffff 	.word	0xfeffffff
 80040a4:	ffc2ffff 	.word	0xffc2ffff

080040a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0b3      	b.n	8004224 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040bc:	4b5b      	ldr	r3, [pc, #364]	@ (800422c <HAL_RCC_ClockConfig+0x184>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2201      	movs	r2, #1
 80040c2:	4013      	ands	r3, r2
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d911      	bls.n	80040ee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ca:	4b58      	ldr	r3, [pc, #352]	@ (800422c <HAL_RCC_ClockConfig+0x184>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2201      	movs	r2, #1
 80040d0:	4393      	bics	r3, r2
 80040d2:	0019      	movs	r1, r3
 80040d4:	4b55      	ldr	r3, [pc, #340]	@ (800422c <HAL_RCC_ClockConfig+0x184>)
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040dc:	4b53      	ldr	r3, [pc, #332]	@ (800422c <HAL_RCC_ClockConfig+0x184>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2201      	movs	r2, #1
 80040e2:	4013      	ands	r3, r2
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d001      	beq.n	80040ee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e09a      	b.n	8004224 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2202      	movs	r2, #2
 80040f4:	4013      	ands	r3, r2
 80040f6:	d015      	beq.n	8004124 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2204      	movs	r2, #4
 80040fe:	4013      	ands	r3, r2
 8004100:	d006      	beq.n	8004110 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004102:	4b4b      	ldr	r3, [pc, #300]	@ (8004230 <HAL_RCC_ClockConfig+0x188>)
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	4b4a      	ldr	r3, [pc, #296]	@ (8004230 <HAL_RCC_ClockConfig+0x188>)
 8004108:	21e0      	movs	r1, #224	@ 0xe0
 800410a:	00c9      	lsls	r1, r1, #3
 800410c:	430a      	orrs	r2, r1
 800410e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004110:	4b47      	ldr	r3, [pc, #284]	@ (8004230 <HAL_RCC_ClockConfig+0x188>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	22f0      	movs	r2, #240	@ 0xf0
 8004116:	4393      	bics	r3, r2
 8004118:	0019      	movs	r1, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	4b44      	ldr	r3, [pc, #272]	@ (8004230 <HAL_RCC_ClockConfig+0x188>)
 8004120:	430a      	orrs	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2201      	movs	r2, #1
 800412a:	4013      	ands	r3, r2
 800412c:	d040      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d107      	bne.n	8004146 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004136:	4b3e      	ldr	r3, [pc, #248]	@ (8004230 <HAL_RCC_ClockConfig+0x188>)
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	2380      	movs	r3, #128	@ 0x80
 800413c:	029b      	lsls	r3, r3, #10
 800413e:	4013      	ands	r3, r2
 8004140:	d114      	bne.n	800416c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e06e      	b.n	8004224 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414e:	4b38      	ldr	r3, [pc, #224]	@ (8004230 <HAL_RCC_ClockConfig+0x188>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	2380      	movs	r3, #128	@ 0x80
 8004154:	049b      	lsls	r3, r3, #18
 8004156:	4013      	ands	r3, r2
 8004158:	d108      	bne.n	800416c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e062      	b.n	8004224 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415e:	4b34      	ldr	r3, [pc, #208]	@ (8004230 <HAL_RCC_ClockConfig+0x188>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2202      	movs	r2, #2
 8004164:	4013      	ands	r3, r2
 8004166:	d101      	bne.n	800416c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e05b      	b.n	8004224 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800416c:	4b30      	ldr	r3, [pc, #192]	@ (8004230 <HAL_RCC_ClockConfig+0x188>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2203      	movs	r2, #3
 8004172:	4393      	bics	r3, r2
 8004174:	0019      	movs	r1, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	4b2d      	ldr	r3, [pc, #180]	@ (8004230 <HAL_RCC_ClockConfig+0x188>)
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004180:	f7fe ff72 	bl	8003068 <HAL_GetTick>
 8004184:	0003      	movs	r3, r0
 8004186:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004188:	e009      	b.n	800419e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800418a:	f7fe ff6d 	bl	8003068 <HAL_GetTick>
 800418e:	0002      	movs	r2, r0
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	4a27      	ldr	r2, [pc, #156]	@ (8004234 <HAL_RCC_ClockConfig+0x18c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e042      	b.n	8004224 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	4b24      	ldr	r3, [pc, #144]	@ (8004230 <HAL_RCC_ClockConfig+0x188>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	220c      	movs	r2, #12
 80041a4:	401a      	ands	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d1ec      	bne.n	800418a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041b0:	4b1e      	ldr	r3, [pc, #120]	@ (800422c <HAL_RCC_ClockConfig+0x184>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2201      	movs	r2, #1
 80041b6:	4013      	ands	r3, r2
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d211      	bcs.n	80041e2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041be:	4b1b      	ldr	r3, [pc, #108]	@ (800422c <HAL_RCC_ClockConfig+0x184>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2201      	movs	r2, #1
 80041c4:	4393      	bics	r3, r2
 80041c6:	0019      	movs	r1, r3
 80041c8:	4b18      	ldr	r3, [pc, #96]	@ (800422c <HAL_RCC_ClockConfig+0x184>)
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d0:	4b16      	ldr	r3, [pc, #88]	@ (800422c <HAL_RCC_ClockConfig+0x184>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2201      	movs	r2, #1
 80041d6:	4013      	ands	r3, r2
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d001      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e020      	b.n	8004224 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2204      	movs	r2, #4
 80041e8:	4013      	ands	r3, r2
 80041ea:	d009      	beq.n	8004200 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80041ec:	4b10      	ldr	r3, [pc, #64]	@ (8004230 <HAL_RCC_ClockConfig+0x188>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4a11      	ldr	r2, [pc, #68]	@ (8004238 <HAL_RCC_ClockConfig+0x190>)
 80041f2:	4013      	ands	r3, r2
 80041f4:	0019      	movs	r1, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004230 <HAL_RCC_ClockConfig+0x188>)
 80041fc:	430a      	orrs	r2, r1
 80041fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004200:	f000 f820 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 8004204:	0001      	movs	r1, r0
 8004206:	4b0a      	ldr	r3, [pc, #40]	@ (8004230 <HAL_RCC_ClockConfig+0x188>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	091b      	lsrs	r3, r3, #4
 800420c:	220f      	movs	r2, #15
 800420e:	4013      	ands	r3, r2
 8004210:	4a0a      	ldr	r2, [pc, #40]	@ (800423c <HAL_RCC_ClockConfig+0x194>)
 8004212:	5cd3      	ldrb	r3, [r2, r3]
 8004214:	000a      	movs	r2, r1
 8004216:	40da      	lsrs	r2, r3
 8004218:	4b09      	ldr	r3, [pc, #36]	@ (8004240 <HAL_RCC_ClockConfig+0x198>)
 800421a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800421c:	2003      	movs	r0, #3
 800421e:	f7fe fedd 	bl	8002fdc <HAL_InitTick>
  
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	0018      	movs	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	b004      	add	sp, #16
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40022000 	.word	0x40022000
 8004230:	40021000 	.word	0x40021000
 8004234:	00001388 	.word	0x00001388
 8004238:	fffff8ff 	.word	0xfffff8ff
 800423c:	08007900 	.word	0x08007900
 8004240:	20000008 	.word	0x20000008

08004244 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	2300      	movs	r3, #0
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800425e:	4b20      	ldr	r3, [pc, #128]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	220c      	movs	r2, #12
 8004268:	4013      	ands	r3, r2
 800426a:	2b04      	cmp	r3, #4
 800426c:	d002      	beq.n	8004274 <HAL_RCC_GetSysClockFreq+0x30>
 800426e:	2b08      	cmp	r3, #8
 8004270:	d003      	beq.n	800427a <HAL_RCC_GetSysClockFreq+0x36>
 8004272:	e02c      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004274:	4b1b      	ldr	r3, [pc, #108]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004276:	613b      	str	r3, [r7, #16]
      break;
 8004278:	e02c      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	0c9b      	lsrs	r3, r3, #18
 800427e:	220f      	movs	r2, #15
 8004280:	4013      	ands	r3, r2
 8004282:	4a19      	ldr	r2, [pc, #100]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004284:	5cd3      	ldrb	r3, [r2, r3]
 8004286:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004288:	4b15      	ldr	r3, [pc, #84]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800428a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428c:	220f      	movs	r2, #15
 800428e:	4013      	ands	r3, r2
 8004290:	4a16      	ldr	r2, [pc, #88]	@ (80042ec <HAL_RCC_GetSysClockFreq+0xa8>)
 8004292:	5cd3      	ldrb	r3, [r2, r3]
 8004294:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	2380      	movs	r3, #128	@ 0x80
 800429a:	025b      	lsls	r3, r3, #9
 800429c:	4013      	ands	r3, r2
 800429e:	d009      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80042a0:	68b9      	ldr	r1, [r7, #8]
 80042a2:	4810      	ldr	r0, [pc, #64]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042a4:	f7fb ff38 	bl	8000118 <__udivsi3>
 80042a8:	0003      	movs	r3, r0
 80042aa:	001a      	movs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4353      	muls	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	e009      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	000a      	movs	r2, r1
 80042b8:	0152      	lsls	r2, r2, #5
 80042ba:	1a52      	subs	r2, r2, r1
 80042bc:	0193      	lsls	r3, r2, #6
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	185b      	adds	r3, r3, r1
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	613b      	str	r3, [r7, #16]
      break;
 80042cc:	e002      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042ce:	4b05      	ldr	r3, [pc, #20]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042d0:	613b      	str	r3, [r7, #16]
      break;
 80042d2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80042d4:	693b      	ldr	r3, [r7, #16]
}
 80042d6:	0018      	movs	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	b006      	add	sp, #24
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	46c0      	nop			@ (mov r8, r8)
 80042e0:	40021000 	.word	0x40021000
 80042e4:	007a1200 	.word	0x007a1200
 80042e8:	08007918 	.word	0x08007918
 80042ec:	08007928 	.word	0x08007928

080042f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f4:	4b02      	ldr	r3, [pc, #8]	@ (8004300 <HAL_RCC_GetHCLKFreq+0x10>)
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	0018      	movs	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	46c0      	nop			@ (mov r8, r8)
 8004300:	20000008 	.word	0x20000008

08004304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004308:	f7ff fff2 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 800430c:	0001      	movs	r1, r0
 800430e:	4b06      	ldr	r3, [pc, #24]	@ (8004328 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	0a1b      	lsrs	r3, r3, #8
 8004314:	2207      	movs	r2, #7
 8004316:	4013      	ands	r3, r2
 8004318:	4a04      	ldr	r2, [pc, #16]	@ (800432c <HAL_RCC_GetPCLK1Freq+0x28>)
 800431a:	5cd3      	ldrb	r3, [r2, r3]
 800431c:	40d9      	lsrs	r1, r3
 800431e:	000b      	movs	r3, r1
}    
 8004320:	0018      	movs	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	46c0      	nop			@ (mov r8, r8)
 8004328:	40021000 	.word	0x40021000
 800432c:	08007910 	.word	0x08007910

08004330 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	2380      	movs	r3, #128	@ 0x80
 8004346:	025b      	lsls	r3, r3, #9
 8004348:	4013      	ands	r3, r2
 800434a:	d100      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800434c:	e08e      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800434e:	2017      	movs	r0, #23
 8004350:	183b      	adds	r3, r7, r0
 8004352:	2200      	movs	r2, #0
 8004354:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004356:	4b5f      	ldr	r3, [pc, #380]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004358:	69da      	ldr	r2, [r3, #28]
 800435a:	2380      	movs	r3, #128	@ 0x80
 800435c:	055b      	lsls	r3, r3, #21
 800435e:	4013      	ands	r3, r2
 8004360:	d110      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004362:	4b5c      	ldr	r3, [pc, #368]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004364:	69da      	ldr	r2, [r3, #28]
 8004366:	4b5b      	ldr	r3, [pc, #364]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004368:	2180      	movs	r1, #128	@ 0x80
 800436a:	0549      	lsls	r1, r1, #21
 800436c:	430a      	orrs	r2, r1
 800436e:	61da      	str	r2, [r3, #28]
 8004370:	4b58      	ldr	r3, [pc, #352]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004372:	69da      	ldr	r2, [r3, #28]
 8004374:	2380      	movs	r3, #128	@ 0x80
 8004376:	055b      	lsls	r3, r3, #21
 8004378:	4013      	ands	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800437e:	183b      	adds	r3, r7, r0
 8004380:	2201      	movs	r2, #1
 8004382:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004384:	4b54      	ldr	r3, [pc, #336]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	2380      	movs	r3, #128	@ 0x80
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	4013      	ands	r3, r2
 800438e:	d11a      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004390:	4b51      	ldr	r3, [pc, #324]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b50      	ldr	r3, [pc, #320]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004396:	2180      	movs	r1, #128	@ 0x80
 8004398:	0049      	lsls	r1, r1, #1
 800439a:	430a      	orrs	r2, r1
 800439c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800439e:	f7fe fe63 	bl	8003068 <HAL_GetTick>
 80043a2:	0003      	movs	r3, r0
 80043a4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a6:	e008      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a8:	f7fe fe5e 	bl	8003068 <HAL_GetTick>
 80043ac:	0002      	movs	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	@ 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e087      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ba:	4b47      	ldr	r3, [pc, #284]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	2380      	movs	r3, #128	@ 0x80
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4013      	ands	r3, r2
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043c6:	4b43      	ldr	r3, [pc, #268]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043c8:	6a1a      	ldr	r2, [r3, #32]
 80043ca:	23c0      	movs	r3, #192	@ 0xc0
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4013      	ands	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d034      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	23c0      	movs	r3, #192	@ 0xc0
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4013      	ands	r3, r2
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d02c      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043e8:	4b3a      	ldr	r3, [pc, #232]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	4a3b      	ldr	r2, [pc, #236]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043f2:	4b38      	ldr	r3, [pc, #224]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043f4:	6a1a      	ldr	r2, [r3, #32]
 80043f6:	4b37      	ldr	r3, [pc, #220]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043f8:	2180      	movs	r1, #128	@ 0x80
 80043fa:	0249      	lsls	r1, r1, #9
 80043fc:	430a      	orrs	r2, r1
 80043fe:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004400:	4b34      	ldr	r3, [pc, #208]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004402:	6a1a      	ldr	r2, [r3, #32]
 8004404:	4b33      	ldr	r3, [pc, #204]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004406:	4936      	ldr	r1, [pc, #216]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004408:	400a      	ands	r2, r1
 800440a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800440c:	4b31      	ldr	r3, [pc, #196]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2201      	movs	r2, #1
 8004416:	4013      	ands	r3, r2
 8004418:	d013      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441a:	f7fe fe25 	bl	8003068 <HAL_GetTick>
 800441e:	0003      	movs	r3, r0
 8004420:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004422:	e009      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004424:	f7fe fe20 	bl	8003068 <HAL_GetTick>
 8004428:	0002      	movs	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	4a2d      	ldr	r2, [pc, #180]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d901      	bls.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e048      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004438:	4b26      	ldr	r3, [pc, #152]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	2202      	movs	r2, #2
 800443e:	4013      	ands	r3, r2
 8004440:	d0f0      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004442:	4b24      	ldr	r3, [pc, #144]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	4a25      	ldr	r2, [pc, #148]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004448:	4013      	ands	r3, r2
 800444a:	0019      	movs	r1, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	4b20      	ldr	r3, [pc, #128]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004452:	430a      	orrs	r2, r1
 8004454:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004456:	2317      	movs	r3, #23
 8004458:	18fb      	adds	r3, r7, r3
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d105      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004460:	4b1c      	ldr	r3, [pc, #112]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	4b1b      	ldr	r3, [pc, #108]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004466:	4920      	ldr	r1, [pc, #128]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004468:	400a      	ands	r2, r1
 800446a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2201      	movs	r2, #1
 8004472:	4013      	ands	r3, r2
 8004474:	d009      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004476:	4b17      	ldr	r3, [pc, #92]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447a:	2203      	movs	r2, #3
 800447c:	4393      	bics	r3, r2
 800447e:	0019      	movs	r1, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	4b13      	ldr	r3, [pc, #76]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004486:	430a      	orrs	r2, r1
 8004488:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2220      	movs	r2, #32
 8004490:	4013      	ands	r3, r2
 8004492:	d009      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004494:	4b0f      	ldr	r3, [pc, #60]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004498:	2210      	movs	r2, #16
 800449a:	4393      	bics	r3, r2
 800449c:	0019      	movs	r1, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	4b0c      	ldr	r3, [pc, #48]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044a4:	430a      	orrs	r2, r1
 80044a6:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	2380      	movs	r3, #128	@ 0x80
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	4013      	ands	r3, r2
 80044b2:	d009      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044b4:	4b07      	ldr	r3, [pc, #28]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b8:	2240      	movs	r2, #64	@ 0x40
 80044ba:	4393      	bics	r3, r2
 80044bc:	0019      	movs	r1, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	4b04      	ldr	r3, [pc, #16]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80044c4:	430a      	orrs	r2, r1
 80044c6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	0018      	movs	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	b006      	add	sp, #24
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	40021000 	.word	0x40021000
 80044d8:	40007000 	.word	0x40007000
 80044dc:	fffffcff 	.word	0xfffffcff
 80044e0:	fffeffff 	.word	0xfffeffff
 80044e4:	00001388 	.word	0x00001388
 80044e8:	efffffff 	.word	0xefffffff

080044ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e042      	b.n	8004584 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	223d      	movs	r2, #61	@ 0x3d
 8004502:	5c9b      	ldrb	r3, [r3, r2]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d107      	bne.n	800451a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	223c      	movs	r2, #60	@ 0x3c
 800450e:	2100      	movs	r1, #0
 8004510:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	0018      	movs	r0, r3
 8004516:	f7fe fb73 	bl	8002c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	223d      	movs	r2, #61	@ 0x3d
 800451e:	2102      	movs	r1, #2
 8004520:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3304      	adds	r3, #4
 800452a:	0019      	movs	r1, r3
 800452c:	0010      	movs	r0, r2
 800452e:	f000 fcdb 	bl	8004ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2246      	movs	r2, #70	@ 0x46
 8004536:	2101      	movs	r1, #1
 8004538:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	223e      	movs	r2, #62	@ 0x3e
 800453e:	2101      	movs	r1, #1
 8004540:	5499      	strb	r1, [r3, r2]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	223f      	movs	r2, #63	@ 0x3f
 8004546:	2101      	movs	r1, #1
 8004548:	5499      	strb	r1, [r3, r2]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2240      	movs	r2, #64	@ 0x40
 800454e:	2101      	movs	r1, #1
 8004550:	5499      	strb	r1, [r3, r2]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2241      	movs	r2, #65	@ 0x41
 8004556:	2101      	movs	r1, #1
 8004558:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2242      	movs	r2, #66	@ 0x42
 800455e:	2101      	movs	r1, #1
 8004560:	5499      	strb	r1, [r3, r2]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2243      	movs	r2, #67	@ 0x43
 8004566:	2101      	movs	r1, #1
 8004568:	5499      	strb	r1, [r3, r2]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2244      	movs	r2, #68	@ 0x44
 800456e:	2101      	movs	r1, #1
 8004570:	5499      	strb	r1, [r3, r2]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2245      	movs	r2, #69	@ 0x45
 8004576:	2101      	movs	r1, #1
 8004578:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	223d      	movs	r2, #61	@ 0x3d
 800457e:	2101      	movs	r1, #1
 8004580:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	0018      	movs	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	b002      	add	sp, #8
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2101      	movs	r1, #1
 80045a0:	438a      	bics	r2, r1
 80045a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	4a0d      	ldr	r2, [pc, #52]	@ (80045e0 <HAL_TIM_Base_Stop_IT+0x54>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	d10d      	bne.n	80045cc <HAL_TIM_Base_Stop_IT+0x40>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	4a0b      	ldr	r2, [pc, #44]	@ (80045e4 <HAL_TIM_Base_Stop_IT+0x58>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	d107      	bne.n	80045cc <HAL_TIM_Base_Stop_IT+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2101      	movs	r1, #1
 80045c8:	438a      	bics	r2, r1
 80045ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	223d      	movs	r2, #61	@ 0x3d
 80045d0:	2101      	movs	r1, #1
 80045d2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	0018      	movs	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	b002      	add	sp, #8
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	46c0      	nop			@ (mov r8, r8)
 80045e0:	00001111 	.word	0x00001111
 80045e4:	00000444 	.word	0x00000444

080045e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e042      	b.n	8004680 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	223d      	movs	r2, #61	@ 0x3d
 80045fe:	5c9b      	ldrb	r3, [r3, r2]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d107      	bne.n	8004616 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	223c      	movs	r2, #60	@ 0x3c
 800460a:	2100      	movs	r1, #0
 800460c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	0018      	movs	r0, r3
 8004612:	f7fe fad9 	bl	8002bc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	223d      	movs	r2, #61	@ 0x3d
 800461a:	2102      	movs	r1, #2
 800461c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3304      	adds	r3, #4
 8004626:	0019      	movs	r1, r3
 8004628:	0010      	movs	r0, r2
 800462a:	f000 fc5d 	bl	8004ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2246      	movs	r2, #70	@ 0x46
 8004632:	2101      	movs	r1, #1
 8004634:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	223e      	movs	r2, #62	@ 0x3e
 800463a:	2101      	movs	r1, #1
 800463c:	5499      	strb	r1, [r3, r2]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	223f      	movs	r2, #63	@ 0x3f
 8004642:	2101      	movs	r1, #1
 8004644:	5499      	strb	r1, [r3, r2]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2240      	movs	r2, #64	@ 0x40
 800464a:	2101      	movs	r1, #1
 800464c:	5499      	strb	r1, [r3, r2]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2241      	movs	r2, #65	@ 0x41
 8004652:	2101      	movs	r1, #1
 8004654:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2242      	movs	r2, #66	@ 0x42
 800465a:	2101      	movs	r1, #1
 800465c:	5499      	strb	r1, [r3, r2]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2243      	movs	r2, #67	@ 0x43
 8004662:	2101      	movs	r1, #1
 8004664:	5499      	strb	r1, [r3, r2]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2244      	movs	r2, #68	@ 0x44
 800466a:	2101      	movs	r1, #1
 800466c:	5499      	strb	r1, [r3, r2]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2245      	movs	r2, #69	@ 0x45
 8004672:	2101      	movs	r1, #1
 8004674:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	223d      	movs	r2, #61	@ 0x3d
 800467a:	2101      	movs	r1, #1
 800467c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	0018      	movs	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	b002      	add	sp, #8
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d108      	bne.n	80046aa <HAL_TIM_PWM_Start+0x22>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	223e      	movs	r2, #62	@ 0x3e
 800469c:	5c9b      	ldrb	r3, [r3, r2]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	1e5a      	subs	r2, r3, #1
 80046a4:	4193      	sbcs	r3, r2
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	e01f      	b.n	80046ea <HAL_TIM_PWM_Start+0x62>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d108      	bne.n	80046c2 <HAL_TIM_PWM_Start+0x3a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	223f      	movs	r2, #63	@ 0x3f
 80046b4:	5c9b      	ldrb	r3, [r3, r2]
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	1e5a      	subs	r2, r3, #1
 80046bc:	4193      	sbcs	r3, r2
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	e013      	b.n	80046ea <HAL_TIM_PWM_Start+0x62>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d108      	bne.n	80046da <HAL_TIM_PWM_Start+0x52>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2240      	movs	r2, #64	@ 0x40
 80046cc:	5c9b      	ldrb	r3, [r3, r2]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	1e5a      	subs	r2, r3, #1
 80046d4:	4193      	sbcs	r3, r2
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	e007      	b.n	80046ea <HAL_TIM_PWM_Start+0x62>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2241      	movs	r2, #65	@ 0x41
 80046de:	5c9b      	ldrb	r3, [r3, r2]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	1e5a      	subs	r2, r3, #1
 80046e6:	4193      	sbcs	r3, r2
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e074      	b.n	80047dc <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d104      	bne.n	8004702 <HAL_TIM_PWM_Start+0x7a>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	223e      	movs	r2, #62	@ 0x3e
 80046fc:	2102      	movs	r1, #2
 80046fe:	5499      	strb	r1, [r3, r2]
 8004700:	e013      	b.n	800472a <HAL_TIM_PWM_Start+0xa2>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b04      	cmp	r3, #4
 8004706:	d104      	bne.n	8004712 <HAL_TIM_PWM_Start+0x8a>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	223f      	movs	r2, #63	@ 0x3f
 800470c:	2102      	movs	r1, #2
 800470e:	5499      	strb	r1, [r3, r2]
 8004710:	e00b      	b.n	800472a <HAL_TIM_PWM_Start+0xa2>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d104      	bne.n	8004722 <HAL_TIM_PWM_Start+0x9a>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2240      	movs	r2, #64	@ 0x40
 800471c:	2102      	movs	r1, #2
 800471e:	5499      	strb	r1, [r3, r2]
 8004720:	e003      	b.n	800472a <HAL_TIM_PWM_Start+0xa2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2241      	movs	r2, #65	@ 0x41
 8004726:	2102      	movs	r1, #2
 8004728:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6839      	ldr	r1, [r7, #0]
 8004730:	2201      	movs	r2, #1
 8004732:	0018      	movs	r0, r3
 8004734:	f000 fefc 	bl	8005530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a29      	ldr	r2, [pc, #164]	@ (80047e4 <HAL_TIM_PWM_Start+0x15c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00e      	beq.n	8004760 <HAL_TIM_PWM_Start+0xd8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a28      	ldr	r2, [pc, #160]	@ (80047e8 <HAL_TIM_PWM_Start+0x160>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d009      	beq.n	8004760 <HAL_TIM_PWM_Start+0xd8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a26      	ldr	r2, [pc, #152]	@ (80047ec <HAL_TIM_PWM_Start+0x164>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d004      	beq.n	8004760 <HAL_TIM_PWM_Start+0xd8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a25      	ldr	r2, [pc, #148]	@ (80047f0 <HAL_TIM_PWM_Start+0x168>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d101      	bne.n	8004764 <HAL_TIM_PWM_Start+0xdc>
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <HAL_TIM_PWM_Start+0xde>
 8004764:	2300      	movs	r3, #0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2180      	movs	r1, #128	@ 0x80
 8004776:	0209      	lsls	r1, r1, #8
 8004778:	430a      	orrs	r2, r1
 800477a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a18      	ldr	r2, [pc, #96]	@ (80047e4 <HAL_TIM_PWM_Start+0x15c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00f      	beq.n	80047a6 <HAL_TIM_PWM_Start+0x11e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	2380      	movs	r3, #128	@ 0x80
 800478c:	05db      	lsls	r3, r3, #23
 800478e:	429a      	cmp	r2, r3
 8004790:	d009      	beq.n	80047a6 <HAL_TIM_PWM_Start+0x11e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a17      	ldr	r2, [pc, #92]	@ (80047f4 <HAL_TIM_PWM_Start+0x16c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d004      	beq.n	80047a6 <HAL_TIM_PWM_Start+0x11e>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a11      	ldr	r2, [pc, #68]	@ (80047e8 <HAL_TIM_PWM_Start+0x160>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d111      	bne.n	80047ca <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2207      	movs	r2, #7
 80047ae:	4013      	ands	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b06      	cmp	r3, #6
 80047b6:	d010      	beq.n	80047da <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2101      	movs	r1, #1
 80047c4:	430a      	orrs	r2, r1
 80047c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c8:	e007      	b.n	80047da <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2101      	movs	r1, #1
 80047d6:	430a      	orrs	r2, r1
 80047d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	0018      	movs	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	b004      	add	sp, #16
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40012c00 	.word	0x40012c00
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40014400 	.word	0x40014400
 80047f0:	40014800 	.word	0x40014800
 80047f4:	40000400 	.word	0x40000400

080047f8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d104      	bne.n	8004812 <HAL_TIM_IC_Start+0x1a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	223e      	movs	r2, #62	@ 0x3e
 800480c:	5c9b      	ldrb	r3, [r3, r2]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	e013      	b.n	800483a <HAL_TIM_IC_Start+0x42>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b04      	cmp	r3, #4
 8004816:	d104      	bne.n	8004822 <HAL_TIM_IC_Start+0x2a>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	223f      	movs	r2, #63	@ 0x3f
 800481c:	5c9b      	ldrb	r3, [r3, r2]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	e00b      	b.n	800483a <HAL_TIM_IC_Start+0x42>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b08      	cmp	r3, #8
 8004826:	d104      	bne.n	8004832 <HAL_TIM_IC_Start+0x3a>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2240      	movs	r2, #64	@ 0x40
 800482c:	5c9b      	ldrb	r3, [r3, r2]
 800482e:	b2db      	uxtb	r3, r3
 8004830:	e003      	b.n	800483a <HAL_TIM_IC_Start+0x42>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2241      	movs	r2, #65	@ 0x41
 8004836:	5c9b      	ldrb	r3, [r3, r2]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	220f      	movs	r2, #15
 800483c:	18ba      	adds	r2, r7, r2
 800483e:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d104      	bne.n	8004850 <HAL_TIM_IC_Start+0x58>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2242      	movs	r2, #66	@ 0x42
 800484a:	5c9b      	ldrb	r3, [r3, r2]
 800484c:	b2db      	uxtb	r3, r3
 800484e:	e013      	b.n	8004878 <HAL_TIM_IC_Start+0x80>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b04      	cmp	r3, #4
 8004854:	d104      	bne.n	8004860 <HAL_TIM_IC_Start+0x68>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2243      	movs	r2, #67	@ 0x43
 800485a:	5c9b      	ldrb	r3, [r3, r2]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	e00b      	b.n	8004878 <HAL_TIM_IC_Start+0x80>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b08      	cmp	r3, #8
 8004864:	d104      	bne.n	8004870 <HAL_TIM_IC_Start+0x78>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2244      	movs	r2, #68	@ 0x44
 800486a:	5c9b      	ldrb	r3, [r3, r2]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	e003      	b.n	8004878 <HAL_TIM_IC_Start+0x80>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2245      	movs	r2, #69	@ 0x45
 8004874:	5c9b      	ldrb	r3, [r3, r2]
 8004876:	b2db      	uxtb	r3, r3
 8004878:	210e      	movs	r1, #14
 800487a:	187a      	adds	r2, r7, r1
 800487c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800487e:	230f      	movs	r3, #15
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d103      	bne.n	8004890 <HAL_TIM_IC_Start+0x98>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004888:	187b      	adds	r3, r7, r1
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d001      	beq.n	8004894 <HAL_TIM_IC_Start+0x9c>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e06e      	b.n	8004972 <HAL_TIM_IC_Start+0x17a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d104      	bne.n	80048a4 <HAL_TIM_IC_Start+0xac>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	223e      	movs	r2, #62	@ 0x3e
 800489e:	2102      	movs	r1, #2
 80048a0:	5499      	strb	r1, [r3, r2]
 80048a2:	e013      	b.n	80048cc <HAL_TIM_IC_Start+0xd4>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d104      	bne.n	80048b4 <HAL_TIM_IC_Start+0xbc>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	223f      	movs	r2, #63	@ 0x3f
 80048ae:	2102      	movs	r1, #2
 80048b0:	5499      	strb	r1, [r3, r2]
 80048b2:	e00b      	b.n	80048cc <HAL_TIM_IC_Start+0xd4>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d104      	bne.n	80048c4 <HAL_TIM_IC_Start+0xcc>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2240      	movs	r2, #64	@ 0x40
 80048be:	2102      	movs	r1, #2
 80048c0:	5499      	strb	r1, [r3, r2]
 80048c2:	e003      	b.n	80048cc <HAL_TIM_IC_Start+0xd4>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2241      	movs	r2, #65	@ 0x41
 80048c8:	2102      	movs	r1, #2
 80048ca:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d104      	bne.n	80048dc <HAL_TIM_IC_Start+0xe4>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2242      	movs	r2, #66	@ 0x42
 80048d6:	2102      	movs	r1, #2
 80048d8:	5499      	strb	r1, [r3, r2]
 80048da:	e013      	b.n	8004904 <HAL_TIM_IC_Start+0x10c>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d104      	bne.n	80048ec <HAL_TIM_IC_Start+0xf4>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2243      	movs	r2, #67	@ 0x43
 80048e6:	2102      	movs	r1, #2
 80048e8:	5499      	strb	r1, [r3, r2]
 80048ea:	e00b      	b.n	8004904 <HAL_TIM_IC_Start+0x10c>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d104      	bne.n	80048fc <HAL_TIM_IC_Start+0x104>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2244      	movs	r2, #68	@ 0x44
 80048f6:	2102      	movs	r1, #2
 80048f8:	5499      	strb	r1, [r3, r2]
 80048fa:	e003      	b.n	8004904 <HAL_TIM_IC_Start+0x10c>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2245      	movs	r2, #69	@ 0x45
 8004900:	2102      	movs	r1, #2
 8004902:	5499      	strb	r1, [r3, r2]

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6839      	ldr	r1, [r7, #0]
 800490a:	2201      	movs	r2, #1
 800490c:	0018      	movs	r0, r3
 800490e:	f000 fe0f 	bl	8005530 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a19      	ldr	r2, [pc, #100]	@ (800497c <HAL_TIM_IC_Start+0x184>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00f      	beq.n	800493c <HAL_TIM_IC_Start+0x144>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	2380      	movs	r3, #128	@ 0x80
 8004922:	05db      	lsls	r3, r3, #23
 8004924:	429a      	cmp	r2, r3
 8004926:	d009      	beq.n	800493c <HAL_TIM_IC_Start+0x144>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a14      	ldr	r2, [pc, #80]	@ (8004980 <HAL_TIM_IC_Start+0x188>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d004      	beq.n	800493c <HAL_TIM_IC_Start+0x144>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a13      	ldr	r2, [pc, #76]	@ (8004984 <HAL_TIM_IC_Start+0x18c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d111      	bne.n	8004960 <HAL_TIM_IC_Start+0x168>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2207      	movs	r2, #7
 8004944:	4013      	ands	r3, r2
 8004946:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b06      	cmp	r3, #6
 800494c:	d010      	beq.n	8004970 <HAL_TIM_IC_Start+0x178>
    {
      __HAL_TIM_ENABLE(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2101      	movs	r1, #1
 800495a:	430a      	orrs	r2, r1
 800495c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495e:	e007      	b.n	8004970 <HAL_TIM_IC_Start+0x178>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2101      	movs	r1, #1
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	0018      	movs	r0, r3
 8004974:	46bd      	mov	sp, r7
 8004976:	b004      	add	sp, #16
 8004978:	bd80      	pop	{r7, pc}
 800497a:	46c0      	nop			@ (mov r8, r8)
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40000400 	.word	0x40000400
 8004984:	40014000 	.word	0x40014000

08004988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2202      	movs	r2, #2
 80049a4:	4013      	ands	r3, r2
 80049a6:	d021      	beq.n	80049ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2202      	movs	r2, #2
 80049ac:	4013      	ands	r3, r2
 80049ae:	d01d      	beq.n	80049ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2203      	movs	r2, #3
 80049b6:	4252      	negs	r2, r2
 80049b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	2203      	movs	r2, #3
 80049c8:	4013      	ands	r3, r2
 80049ca:	d004      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	0018      	movs	r0, r3
 80049d0:	f000 fa72 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 80049d4:	e007      	b.n	80049e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	0018      	movs	r0, r3
 80049da:	f000 fa65 	bl	8004ea8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	0018      	movs	r0, r3
 80049e2:	f000 fa71 	bl	8004ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2204      	movs	r2, #4
 80049f0:	4013      	ands	r3, r2
 80049f2:	d022      	beq.n	8004a3a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2204      	movs	r2, #4
 80049f8:	4013      	ands	r3, r2
 80049fa:	d01e      	beq.n	8004a3a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2205      	movs	r2, #5
 8004a02:	4252      	negs	r2, r2
 8004a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	23c0      	movs	r3, #192	@ 0xc0
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4013      	ands	r3, r2
 8004a18:	d004      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f000 fa4b 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004a22:	e007      	b.n	8004a34 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	0018      	movs	r0, r3
 8004a28:	f000 fa3e 	bl	8004ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f000 fa4a 	bl	8004ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d021      	beq.n	8004a86 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2208      	movs	r2, #8
 8004a46:	4013      	ands	r3, r2
 8004a48:	d01d      	beq.n	8004a86 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2209      	movs	r2, #9
 8004a50:	4252      	negs	r2, r2
 8004a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2204      	movs	r2, #4
 8004a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	2203      	movs	r2, #3
 8004a62:	4013      	ands	r3, r2
 8004a64:	d004      	beq.n	8004a70 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f000 fa25 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004a6e:	e007      	b.n	8004a80 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	0018      	movs	r0, r3
 8004a74:	f000 fa18 	bl	8004ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f000 fa24 	bl	8004ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2210      	movs	r2, #16
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d022      	beq.n	8004ad4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2210      	movs	r2, #16
 8004a92:	4013      	ands	r3, r2
 8004a94:	d01e      	beq.n	8004ad4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2211      	movs	r2, #17
 8004a9c:	4252      	negs	r2, r2
 8004a9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2208      	movs	r2, #8
 8004aa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69da      	ldr	r2, [r3, #28]
 8004aac:	23c0      	movs	r3, #192	@ 0xc0
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	f000 f9fe 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004abc:	e007      	b.n	8004ace <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f000 f9f1 	bl	8004ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f000 f9fd 	bl	8004ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d00c      	beq.n	8004af6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	d008      	beq.n	8004af6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	4252      	negs	r2, r2
 8004aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	0018      	movs	r0, r3
 8004af2:	f000 f9d1 	bl	8004e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2280      	movs	r2, #128	@ 0x80
 8004afa:	4013      	ands	r3, r2
 8004afc:	d00c      	beq.n	8004b18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2280      	movs	r2, #128	@ 0x80
 8004b02:	4013      	ands	r3, r2
 8004b04:	d008      	beq.n	8004b18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2281      	movs	r2, #129	@ 0x81
 8004b0c:	4252      	negs	r2, r2
 8004b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	0018      	movs	r0, r3
 8004b14:	f000 fd96 	bl	8005644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2240      	movs	r2, #64	@ 0x40
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	d00c      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2240      	movs	r2, #64	@ 0x40
 8004b24:	4013      	ands	r3, r2
 8004b26:	d008      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2241      	movs	r2, #65	@ 0x41
 8004b2e:	4252      	negs	r2, r2
 8004b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	0018      	movs	r0, r3
 8004b36:	f000 f9cf 	bl	8004ed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d00c      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	4013      	ands	r3, r2
 8004b48:	d008      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2221      	movs	r2, #33	@ 0x21
 8004b50:	4252      	negs	r2, r2
 8004b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	0018      	movs	r0, r3
 8004b58:	f000 fd6c 	bl	8005634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b5c:	46c0      	nop			@ (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b004      	add	sp, #16
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b70:	2317      	movs	r3, #23
 8004b72:	18fb      	adds	r3, r7, r3
 8004b74:	2200      	movs	r2, #0
 8004b76:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	223c      	movs	r2, #60	@ 0x3c
 8004b7c:	5c9b      	ldrb	r3, [r3, r2]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d101      	bne.n	8004b86 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004b82:	2302      	movs	r3, #2
 8004b84:	e0ad      	b.n	8004ce2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	223c      	movs	r2, #60	@ 0x3c
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b0c      	cmp	r3, #12
 8004b92:	d100      	bne.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004b94:	e076      	b.n	8004c84 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b0c      	cmp	r3, #12
 8004b9a:	d900      	bls.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004b9c:	e095      	b.n	8004cca <HAL_TIM_PWM_ConfigChannel+0x166>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d04e      	beq.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d900      	bls.n	8004bac <HAL_TIM_PWM_ConfigChannel+0x48>
 8004baa:	e08e      	b.n	8004cca <HAL_TIM_PWM_ConfigChannel+0x166>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_PWM_ConfigChannel+0x56>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d021      	beq.n	8004bfc <HAL_TIM_PWM_ConfigChannel+0x98>
 8004bb8:	e087      	b.n	8004cca <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	0011      	movs	r1, r2
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f000 fa1e 	bl	8005004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2108      	movs	r1, #8
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2104      	movs	r1, #4
 8004be4:	438a      	bics	r2, r1
 8004be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6999      	ldr	r1, [r3, #24]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	619a      	str	r2, [r3, #24]
      break;
 8004bfa:	e06b      	b.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	0011      	movs	r1, r2
 8004c04:	0018      	movs	r0, r3
 8004c06:	f000 fa85 	bl	8005114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699a      	ldr	r2, [r3, #24]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2180      	movs	r1, #128	@ 0x80
 8004c16:	0109      	lsls	r1, r1, #4
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4931      	ldr	r1, [pc, #196]	@ (8004cec <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004c28:	400a      	ands	r2, r1
 8004c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6999      	ldr	r1, [r3, #24]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	021a      	lsls	r2, r3, #8
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	619a      	str	r2, [r3, #24]
      break;
 8004c40:	e048      	b.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	0011      	movs	r1, r2
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f000 fae6 	bl	800521c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69da      	ldr	r2, [r3, #28]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2108      	movs	r1, #8
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69da      	ldr	r2, [r3, #28]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2104      	movs	r1, #4
 8004c6c:	438a      	bics	r2, r1
 8004c6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69d9      	ldr	r1, [r3, #28]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	61da      	str	r2, [r3, #28]
      break;
 8004c82:	e027      	b.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	0011      	movs	r1, r2
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f000 fb4b 	bl	8005328 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69da      	ldr	r2, [r3, #28]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2180      	movs	r1, #128	@ 0x80
 8004c9e:	0109      	lsls	r1, r1, #4
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	490f      	ldr	r1, [pc, #60]	@ (8004cec <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	69d9      	ldr	r1, [r3, #28]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	021a      	lsls	r2, r3, #8
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	61da      	str	r2, [r3, #28]
      break;
 8004cc8:	e004      	b.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004cca:	2317      	movs	r3, #23
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
      break;
 8004cd2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	223c      	movs	r2, #60	@ 0x3c
 8004cd8:	2100      	movs	r1, #0
 8004cda:	5499      	strb	r1, [r3, r2]

  return status;
 8004cdc:	2317      	movs	r3, #23
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	781b      	ldrb	r3, [r3, #0]
}
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	b006      	add	sp, #24
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	46c0      	nop			@ (mov r8, r8)
 8004cec:	fffffbff 	.word	0xfffffbff

08004cf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfa:	230f      	movs	r3, #15
 8004cfc:	18fb      	adds	r3, r7, r3
 8004cfe:	2200      	movs	r2, #0
 8004d00:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	223c      	movs	r2, #60	@ 0x3c
 8004d06:	5c9b      	ldrb	r3, [r3, r2]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_TIM_ConfigClockSource+0x20>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e0bc      	b.n	8004e8a <HAL_TIM_ConfigClockSource+0x19a>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	223c      	movs	r2, #60	@ 0x3c
 8004d14:	2101      	movs	r1, #1
 8004d16:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	223d      	movs	r2, #61	@ 0x3d
 8004d1c:	2102      	movs	r1, #2
 8004d1e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2277      	movs	r2, #119	@ 0x77
 8004d2c:	4393      	bics	r3, r2
 8004d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4a58      	ldr	r2, [pc, #352]	@ (8004e94 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2280      	movs	r2, #128	@ 0x80
 8004d46:	0192      	lsls	r2, r2, #6
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d040      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0xde>
 8004d4c:	2280      	movs	r2, #128	@ 0x80
 8004d4e:	0192      	lsls	r2, r2, #6
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d900      	bls.n	8004d56 <HAL_TIM_ConfigClockSource+0x66>
 8004d54:	e088      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x178>
 8004d56:	2280      	movs	r2, #128	@ 0x80
 8004d58:	0152      	lsls	r2, r2, #5
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d100      	bne.n	8004d60 <HAL_TIM_ConfigClockSource+0x70>
 8004d5e:	e088      	b.n	8004e72 <HAL_TIM_ConfigClockSource+0x182>
 8004d60:	2280      	movs	r2, #128	@ 0x80
 8004d62:	0152      	lsls	r2, r2, #5
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d900      	bls.n	8004d6a <HAL_TIM_ConfigClockSource+0x7a>
 8004d68:	e07e      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x178>
 8004d6a:	2b70      	cmp	r3, #112	@ 0x70
 8004d6c:	d018      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0xb0>
 8004d6e:	d900      	bls.n	8004d72 <HAL_TIM_ConfigClockSource+0x82>
 8004d70:	e07a      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x178>
 8004d72:	2b60      	cmp	r3, #96	@ 0x60
 8004d74:	d04f      	beq.n	8004e16 <HAL_TIM_ConfigClockSource+0x126>
 8004d76:	d900      	bls.n	8004d7a <HAL_TIM_ConfigClockSource+0x8a>
 8004d78:	e076      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x178>
 8004d7a:	2b50      	cmp	r3, #80	@ 0x50
 8004d7c:	d03b      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0x106>
 8004d7e:	d900      	bls.n	8004d82 <HAL_TIM_ConfigClockSource+0x92>
 8004d80:	e072      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x178>
 8004d82:	2b40      	cmp	r3, #64	@ 0x40
 8004d84:	d057      	beq.n	8004e36 <HAL_TIM_ConfigClockSource+0x146>
 8004d86:	d900      	bls.n	8004d8a <HAL_TIM_ConfigClockSource+0x9a>
 8004d88:	e06e      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x178>
 8004d8a:	2b30      	cmp	r3, #48	@ 0x30
 8004d8c:	d063      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x166>
 8004d8e:	d86b      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x178>
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d060      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x166>
 8004d94:	d868      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x178>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d05d      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x166>
 8004d9a:	2b10      	cmp	r3, #16
 8004d9c:	d05b      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x166>
 8004d9e:	e063      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004db0:	f000 fb9e 	bl	80054f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2277      	movs	r2, #119	@ 0x77
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	609a      	str	r2, [r3, #8]
      break;
 8004dcc:	e052      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dde:	f000 fb87 	bl	80054f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2180      	movs	r1, #128	@ 0x80
 8004dee:	01c9      	lsls	r1, r1, #7
 8004df0:	430a      	orrs	r2, r1
 8004df2:	609a      	str	r2, [r3, #8]
      break;
 8004df4:	e03e      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e02:	001a      	movs	r2, r3
 8004e04:	f000 fafa 	bl	80053fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2150      	movs	r1, #80	@ 0x50
 8004e0e:	0018      	movs	r0, r3
 8004e10:	f000 fb54 	bl	80054bc <TIM_ITRx_SetConfig>
      break;
 8004e14:	e02e      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e22:	001a      	movs	r2, r3
 8004e24:	f000 fb18 	bl	8005458 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2160      	movs	r1, #96	@ 0x60
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f000 fb44 	bl	80054bc <TIM_ITRx_SetConfig>
      break;
 8004e34:	e01e      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e42:	001a      	movs	r2, r3
 8004e44:	f000 fada 	bl	80053fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2140      	movs	r1, #64	@ 0x40
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f000 fb34 	bl	80054bc <TIM_ITRx_SetConfig>
      break;
 8004e54:	e00e      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	0019      	movs	r1, r3
 8004e60:	0010      	movs	r0, r2
 8004e62:	f000 fb2b 	bl	80054bc <TIM_ITRx_SetConfig>
      break;
 8004e66:	e005      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004e68:	230f      	movs	r3, #15
 8004e6a:	18fb      	adds	r3, r7, r3
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	701a      	strb	r2, [r3, #0]
      break;
 8004e70:	e000      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004e72:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	223d      	movs	r2, #61	@ 0x3d
 8004e78:	2101      	movs	r1, #1
 8004e7a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	223c      	movs	r2, #60	@ 0x3c
 8004e80:	2100      	movs	r1, #0
 8004e82:	5499      	strb	r1, [r3, r2]

  return status;
 8004e84:	230f      	movs	r3, #15
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	781b      	ldrb	r3, [r3, #0]
}
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b004      	add	sp, #16
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			@ (mov r8, r8)
 8004e94:	ffff00ff 	.word	0xffff00ff

08004e98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ea0:	46c0      	nop			@ (mov r8, r8)
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	b002      	add	sp, #8
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eb0:	46c0      	nop			@ (mov r8, r8)
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b002      	add	sp, #8
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ec0:	46c0      	nop			@ (mov r8, r8)
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b002      	add	sp, #8
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ed0:	46c0      	nop			@ (mov r8, r8)
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b002      	add	sp, #8
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ee0:	46c0      	nop			@ (mov r8, r8)
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b002      	add	sp, #8
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a3b      	ldr	r2, [pc, #236]	@ (8004fe8 <TIM_Base_SetConfig+0x100>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d008      	beq.n	8004f12 <TIM_Base_SetConfig+0x2a>
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	2380      	movs	r3, #128	@ 0x80
 8004f04:	05db      	lsls	r3, r3, #23
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d003      	beq.n	8004f12 <TIM_Base_SetConfig+0x2a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a37      	ldr	r2, [pc, #220]	@ (8004fec <TIM_Base_SetConfig+0x104>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d108      	bne.n	8004f24 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2270      	movs	r2, #112	@ 0x70
 8004f16:	4393      	bics	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a30      	ldr	r2, [pc, #192]	@ (8004fe8 <TIM_Base_SetConfig+0x100>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <TIM_Base_SetConfig+0x76>
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	2380      	movs	r3, #128	@ 0x80
 8004f30:	05db      	lsls	r3, r3, #23
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d013      	beq.n	8004f5e <TIM_Base_SetConfig+0x76>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a2c      	ldr	r2, [pc, #176]	@ (8004fec <TIM_Base_SetConfig+0x104>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00f      	beq.n	8004f5e <TIM_Base_SetConfig+0x76>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a2b      	ldr	r2, [pc, #172]	@ (8004ff0 <TIM_Base_SetConfig+0x108>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00b      	beq.n	8004f5e <TIM_Base_SetConfig+0x76>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a2a      	ldr	r2, [pc, #168]	@ (8004ff4 <TIM_Base_SetConfig+0x10c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d007      	beq.n	8004f5e <TIM_Base_SetConfig+0x76>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a29      	ldr	r2, [pc, #164]	@ (8004ff8 <TIM_Base_SetConfig+0x110>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d003      	beq.n	8004f5e <TIM_Base_SetConfig+0x76>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a28      	ldr	r2, [pc, #160]	@ (8004ffc <TIM_Base_SetConfig+0x114>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d108      	bne.n	8004f70 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4a27      	ldr	r2, [pc, #156]	@ (8005000 <TIM_Base_SetConfig+0x118>)
 8004f62:	4013      	ands	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2280      	movs	r2, #128	@ 0x80
 8004f74:	4393      	bics	r3, r2
 8004f76:	001a      	movs	r2, r3
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a13      	ldr	r2, [pc, #76]	@ (8004fe8 <TIM_Base_SetConfig+0x100>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00b      	beq.n	8004fb6 <TIM_Base_SetConfig+0xce>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a14      	ldr	r2, [pc, #80]	@ (8004ff4 <TIM_Base_SetConfig+0x10c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d007      	beq.n	8004fb6 <TIM_Base_SetConfig+0xce>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a13      	ldr	r2, [pc, #76]	@ (8004ff8 <TIM_Base_SetConfig+0x110>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d003      	beq.n	8004fb6 <TIM_Base_SetConfig+0xce>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a12      	ldr	r2, [pc, #72]	@ (8004ffc <TIM_Base_SetConfig+0x114>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d103      	bne.n	8004fbe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d106      	bne.n	8004fde <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	4393      	bics	r3, r2
 8004fd8:	001a      	movs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	611a      	str	r2, [r3, #16]
  }
}
 8004fde:	46c0      	nop			@ (mov r8, r8)
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b004      	add	sp, #16
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	46c0      	nop			@ (mov r8, r8)
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	40000400 	.word	0x40000400
 8004ff0:	40002000 	.word	0x40002000
 8004ff4:	40014000 	.word	0x40014000
 8004ff8:	40014400 	.word	0x40014400
 8004ffc:	40014800 	.word	0x40014800
 8005000:	fffffcff 	.word	0xfffffcff

08005004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	2201      	movs	r2, #1
 800501a:	4393      	bics	r3, r2
 800501c:	001a      	movs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2270      	movs	r2, #112	@ 0x70
 8005032:	4393      	bics	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2203      	movs	r2, #3
 800503a:	4393      	bics	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2202      	movs	r2, #2
 800504c:	4393      	bics	r3, r2
 800504e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a27      	ldr	r2, [pc, #156]	@ (80050fc <TIM_OC1_SetConfig+0xf8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00b      	beq.n	800507a <TIM_OC1_SetConfig+0x76>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a26      	ldr	r2, [pc, #152]	@ (8005100 <TIM_OC1_SetConfig+0xfc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d007      	beq.n	800507a <TIM_OC1_SetConfig+0x76>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a25      	ldr	r2, [pc, #148]	@ (8005104 <TIM_OC1_SetConfig+0x100>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d003      	beq.n	800507a <TIM_OC1_SetConfig+0x76>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a24      	ldr	r2, [pc, #144]	@ (8005108 <TIM_OC1_SetConfig+0x104>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d10c      	bne.n	8005094 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2208      	movs	r2, #8
 800507e:	4393      	bics	r3, r2
 8005080:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2204      	movs	r2, #4
 8005090:	4393      	bics	r3, r2
 8005092:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a19      	ldr	r2, [pc, #100]	@ (80050fc <TIM_OC1_SetConfig+0xf8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00b      	beq.n	80050b4 <TIM_OC1_SetConfig+0xb0>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a18      	ldr	r2, [pc, #96]	@ (8005100 <TIM_OC1_SetConfig+0xfc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d007      	beq.n	80050b4 <TIM_OC1_SetConfig+0xb0>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a17      	ldr	r2, [pc, #92]	@ (8005104 <TIM_OC1_SetConfig+0x100>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d003      	beq.n	80050b4 <TIM_OC1_SetConfig+0xb0>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a16      	ldr	r2, [pc, #88]	@ (8005108 <TIM_OC1_SetConfig+0x104>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d111      	bne.n	80050d8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	4a15      	ldr	r2, [pc, #84]	@ (800510c <TIM_OC1_SetConfig+0x108>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	4a14      	ldr	r2, [pc, #80]	@ (8005110 <TIM_OC1_SetConfig+0x10c>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	46c0      	nop			@ (mov r8, r8)
 80050f4:	46bd      	mov	sp, r7
 80050f6:	b006      	add	sp, #24
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	46c0      	nop			@ (mov r8, r8)
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40014000 	.word	0x40014000
 8005104:	40014400 	.word	0x40014400
 8005108:	40014800 	.word	0x40014800
 800510c:	fffffeff 	.word	0xfffffeff
 8005110:	fffffdff 	.word	0xfffffdff

08005114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	2210      	movs	r2, #16
 800512a:	4393      	bics	r3, r2
 800512c:	001a      	movs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4a2e      	ldr	r2, [pc, #184]	@ (80051fc <TIM_OC2_SetConfig+0xe8>)
 8005142:	4013      	ands	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4a2d      	ldr	r2, [pc, #180]	@ (8005200 <TIM_OC2_SetConfig+0xec>)
 800514a:	4013      	ands	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2220      	movs	r2, #32
 800515e:	4393      	bics	r3, r2
 8005160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a24      	ldr	r2, [pc, #144]	@ (8005204 <TIM_OC2_SetConfig+0xf0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d10d      	bne.n	8005192 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2280      	movs	r2, #128	@ 0x80
 800517a:	4393      	bics	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2240      	movs	r2, #64	@ 0x40
 800518e:	4393      	bics	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a1b      	ldr	r2, [pc, #108]	@ (8005204 <TIM_OC2_SetConfig+0xf0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00b      	beq.n	80051b2 <TIM_OC2_SetConfig+0x9e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a1a      	ldr	r2, [pc, #104]	@ (8005208 <TIM_OC2_SetConfig+0xf4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <TIM_OC2_SetConfig+0x9e>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a19      	ldr	r2, [pc, #100]	@ (800520c <TIM_OC2_SetConfig+0xf8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_OC2_SetConfig+0x9e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a18      	ldr	r2, [pc, #96]	@ (8005210 <TIM_OC2_SetConfig+0xfc>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d113      	bne.n	80051da <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	4a17      	ldr	r2, [pc, #92]	@ (8005214 <TIM_OC2_SetConfig+0x100>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	4a16      	ldr	r2, [pc, #88]	@ (8005218 <TIM_OC2_SetConfig+0x104>)
 80051be:	4013      	ands	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	621a      	str	r2, [r3, #32]
}
 80051f4:	46c0      	nop			@ (mov r8, r8)
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b006      	add	sp, #24
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	ffff8fff 	.word	0xffff8fff
 8005200:	fffffcff 	.word	0xfffffcff
 8005204:	40012c00 	.word	0x40012c00
 8005208:	40014000 	.word	0x40014000
 800520c:	40014400 	.word	0x40014400
 8005210:	40014800 	.word	0x40014800
 8005214:	fffffbff 	.word	0xfffffbff
 8005218:	fffff7ff 	.word	0xfffff7ff

0800521c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	4a33      	ldr	r2, [pc, #204]	@ (8005300 <TIM_OC3_SetConfig+0xe4>)
 8005232:	401a      	ands	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2270      	movs	r2, #112	@ 0x70
 8005248:	4393      	bics	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2203      	movs	r2, #3
 8005250:	4393      	bics	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	4a28      	ldr	r2, [pc, #160]	@ (8005304 <TIM_OC3_SetConfig+0xe8>)
 8005262:	4013      	ands	r3, r2
 8005264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a24      	ldr	r2, [pc, #144]	@ (8005308 <TIM_OC3_SetConfig+0xec>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d10d      	bne.n	8005296 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	4a23      	ldr	r2, [pc, #140]	@ (800530c <TIM_OC3_SetConfig+0xf0>)
 800527e:	4013      	ands	r3, r2
 8005280:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	4a1f      	ldr	r2, [pc, #124]	@ (8005310 <TIM_OC3_SetConfig+0xf4>)
 8005292:	4013      	ands	r3, r2
 8005294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a1b      	ldr	r2, [pc, #108]	@ (8005308 <TIM_OC3_SetConfig+0xec>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00b      	beq.n	80052b6 <TIM_OC3_SetConfig+0x9a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005314 <TIM_OC3_SetConfig+0xf8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d007      	beq.n	80052b6 <TIM_OC3_SetConfig+0x9a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005318 <TIM_OC3_SetConfig+0xfc>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d003      	beq.n	80052b6 <TIM_OC3_SetConfig+0x9a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a1a      	ldr	r2, [pc, #104]	@ (800531c <TIM_OC3_SetConfig+0x100>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d113      	bne.n	80052de <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4a19      	ldr	r2, [pc, #100]	@ (8005320 <TIM_OC3_SetConfig+0x104>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	4a18      	ldr	r2, [pc, #96]	@ (8005324 <TIM_OC3_SetConfig+0x108>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	621a      	str	r2, [r3, #32]
}
 80052f8:	46c0      	nop			@ (mov r8, r8)
 80052fa:	46bd      	mov	sp, r7
 80052fc:	b006      	add	sp, #24
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	fffffeff 	.word	0xfffffeff
 8005304:	fffffdff 	.word	0xfffffdff
 8005308:	40012c00 	.word	0x40012c00
 800530c:	fffff7ff 	.word	0xfffff7ff
 8005310:	fffffbff 	.word	0xfffffbff
 8005314:	40014000 	.word	0x40014000
 8005318:	40014400 	.word	0x40014400
 800531c:	40014800 	.word	0x40014800
 8005320:	ffffefff 	.word	0xffffefff
 8005324:	ffffdfff 	.word	0xffffdfff

08005328 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	4a26      	ldr	r2, [pc, #152]	@ (80053d8 <TIM_OC4_SetConfig+0xb0>)
 800533e:	401a      	ands	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a22      	ldr	r2, [pc, #136]	@ (80053dc <TIM_OC4_SetConfig+0xb4>)
 8005354:	4013      	ands	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4a21      	ldr	r2, [pc, #132]	@ (80053e0 <TIM_OC4_SetConfig+0xb8>)
 800535c:	4013      	ands	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4a1d      	ldr	r2, [pc, #116]	@ (80053e4 <TIM_OC4_SetConfig+0xbc>)
 8005370:	4013      	ands	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	031b      	lsls	r3, r3, #12
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a19      	ldr	r2, [pc, #100]	@ (80053e8 <TIM_OC4_SetConfig+0xc0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00b      	beq.n	80053a0 <TIM_OC4_SetConfig+0x78>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a18      	ldr	r2, [pc, #96]	@ (80053ec <TIM_OC4_SetConfig+0xc4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d007      	beq.n	80053a0 <TIM_OC4_SetConfig+0x78>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a17      	ldr	r2, [pc, #92]	@ (80053f0 <TIM_OC4_SetConfig+0xc8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_OC4_SetConfig+0x78>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a16      	ldr	r2, [pc, #88]	@ (80053f4 <TIM_OC4_SetConfig+0xcc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d109      	bne.n	80053b4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	4a15      	ldr	r2, [pc, #84]	@ (80053f8 <TIM_OC4_SetConfig+0xd0>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	019b      	lsls	r3, r3, #6
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	46c0      	nop			@ (mov r8, r8)
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b006      	add	sp, #24
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	46c0      	nop			@ (mov r8, r8)
 80053d8:	ffffefff 	.word	0xffffefff
 80053dc:	ffff8fff 	.word	0xffff8fff
 80053e0:	fffffcff 	.word	0xfffffcff
 80053e4:	ffffdfff 	.word	0xffffdfff
 80053e8:	40012c00 	.word	0x40012c00
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40014400 	.word	0x40014400
 80053f4:	40014800 	.word	0x40014800
 80053f8:	ffffbfff 	.word	0xffffbfff

080053fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	2201      	movs	r2, #1
 8005414:	4393      	bics	r3, r2
 8005416:	001a      	movs	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	22f0      	movs	r2, #240	@ 0xf0
 8005426:	4393      	bics	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	220a      	movs	r2, #10
 8005438:	4393      	bics	r3, r2
 800543a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	4313      	orrs	r3, r2
 8005442:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	621a      	str	r2, [r3, #32]
}
 8005450:	46c0      	nop			@ (mov r8, r8)
 8005452:	46bd      	mov	sp, r7
 8005454:	b006      	add	sp, #24
 8005456:	bd80      	pop	{r7, pc}

08005458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	2210      	movs	r2, #16
 8005470:	4393      	bics	r3, r2
 8005472:	001a      	movs	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4a0d      	ldr	r2, [pc, #52]	@ (80054b8 <TIM_TI2_ConfigInputStage+0x60>)
 8005482:	4013      	ands	r3, r2
 8005484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	031b      	lsls	r3, r3, #12
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	22a0      	movs	r2, #160	@ 0xa0
 8005494:	4393      	bics	r3, r2
 8005496:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	621a      	str	r2, [r3, #32]
}
 80054ae:	46c0      	nop			@ (mov r8, r8)
 80054b0:	46bd      	mov	sp, r7
 80054b2:	b006      	add	sp, #24
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	46c0      	nop			@ (mov r8, r8)
 80054b8:	ffff0fff 	.word	0xffff0fff

080054bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2270      	movs	r2, #112	@ 0x70
 80054d0:	4393      	bics	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4313      	orrs	r3, r2
 80054da:	2207      	movs	r2, #7
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	609a      	str	r2, [r3, #8]
}
 80054e6:	46c0      	nop			@ (mov r8, r8)
 80054e8:	46bd      	mov	sp, r7
 80054ea:	b004      	add	sp, #16
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	4a09      	ldr	r2, [pc, #36]	@ (800552c <TIM_ETR_SetConfig+0x3c>)
 8005508:	4013      	ands	r3, r2
 800550a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	021a      	lsls	r2, r3, #8
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	431a      	orrs	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4313      	orrs	r3, r2
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	4313      	orrs	r3, r2
 800551c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	609a      	str	r2, [r3, #8]
}
 8005524:	46c0      	nop			@ (mov r8, r8)
 8005526:	46bd      	mov	sp, r7
 8005528:	b006      	add	sp, #24
 800552a:	bd80      	pop	{r7, pc}
 800552c:	ffff00ff 	.word	0xffff00ff

08005530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	221f      	movs	r2, #31
 8005540:	4013      	ands	r3, r2
 8005542:	2201      	movs	r2, #1
 8005544:	409a      	lsls	r2, r3
 8005546:	0013      	movs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	43d2      	mvns	r2, r2
 8005552:	401a      	ands	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a1a      	ldr	r2, [r3, #32]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	211f      	movs	r1, #31
 8005560:	400b      	ands	r3, r1
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	4099      	lsls	r1, r3
 8005566:	000b      	movs	r3, r1
 8005568:	431a      	orrs	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	46c0      	nop			@ (mov r8, r8)
 8005570:	46bd      	mov	sp, r7
 8005572:	b006      	add	sp, #24
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	223c      	movs	r2, #60	@ 0x3c
 8005586:	5c9b      	ldrb	r3, [r3, r2]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800558c:	2302      	movs	r3, #2
 800558e:	e047      	b.n	8005620 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	223c      	movs	r2, #60	@ 0x3c
 8005594:	2101      	movs	r1, #1
 8005596:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	223d      	movs	r2, #61	@ 0x3d
 800559c:	2102      	movs	r1, #2
 800559e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2270      	movs	r2, #112	@ 0x70
 80055b4:	4393      	bics	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a16      	ldr	r2, [pc, #88]	@ (8005628 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00f      	beq.n	80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	2380      	movs	r3, #128	@ 0x80
 80055da:	05db      	lsls	r3, r3, #23
 80055dc:	429a      	cmp	r2, r3
 80055de:	d009      	beq.n	80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a11      	ldr	r2, [pc, #68]	@ (800562c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d004      	beq.n	80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a10      	ldr	r2, [pc, #64]	@ (8005630 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d10c      	bne.n	800560e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2280      	movs	r2, #128	@ 0x80
 80055f8:	4393      	bics	r3, r2
 80055fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	4313      	orrs	r3, r2
 8005604:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	223d      	movs	r2, #61	@ 0x3d
 8005612:	2101      	movs	r1, #1
 8005614:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	223c      	movs	r2, #60	@ 0x3c
 800561a:	2100      	movs	r1, #0
 800561c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	0018      	movs	r0, r3
 8005622:	46bd      	mov	sp, r7
 8005624:	b004      	add	sp, #16
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40012c00 	.word	0x40012c00
 800562c:	40000400 	.word	0x40000400
 8005630:	40014000 	.word	0x40014000

08005634 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800563c:	46c0      	nop			@ (mov r8, r8)
 800563e:	46bd      	mov	sp, r7
 8005640:	b002      	add	sp, #8
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800564c:	46c0      	nop			@ (mov r8, r8)
 800564e:	46bd      	mov	sp, r7
 8005650:	b002      	add	sp, #8
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e044      	b.n	80056f0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800566a:	2b00      	cmp	r3, #0
 800566c:	d107      	bne.n	800567e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2278      	movs	r2, #120	@ 0x78
 8005672:	2100      	movs	r1, #0
 8005674:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	0018      	movs	r0, r3
 800567a:	f7fd fb67 	bl	8002d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2224      	movs	r2, #36	@ 0x24
 8005682:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2101      	movs	r1, #1
 8005690:	438a      	bics	r2, r1
 8005692:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	0018      	movs	r0, r3
 80056a0:	f000 fe8a 	bl	80063b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	0018      	movs	r0, r3
 80056a8:	f000 fd46 	bl	8006138 <UART_SetConfig>
 80056ac:	0003      	movs	r3, r0
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e01c      	b.n	80056f0 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	490d      	ldr	r1, [pc, #52]	@ (80056f8 <HAL_UART_Init+0xa4>)
 80056c2:	400a      	ands	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	212a      	movs	r1, #42	@ 0x2a
 80056d2:	438a      	bics	r2, r1
 80056d4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2101      	movs	r1, #1
 80056e2:	430a      	orrs	r2, r1
 80056e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	0018      	movs	r0, r3
 80056ea:	f000 ff19 	bl	8006520 <UART_CheckIdleState>
 80056ee:	0003      	movs	r3, r0
}
 80056f0:	0018      	movs	r0, r3
 80056f2:	46bd      	mov	sp, r7
 80056f4:	b002      	add	sp, #8
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	ffffb7ff 	.word	0xffffb7ff

080056fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08a      	sub	sp, #40	@ 0x28
 8005700:	af02      	add	r7, sp, #8
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	1dbb      	adds	r3, r7, #6
 800570a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005710:	2b20      	cmp	r3, #32
 8005712:	d000      	beq.n	8005716 <HAL_UART_Transmit+0x1a>
 8005714:	e08c      	b.n	8005830 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_UART_Transmit+0x28>
 800571c:	1dbb      	adds	r3, r7, #6
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e084      	b.n	8005832 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	2380      	movs	r3, #128	@ 0x80
 800572e:	015b      	lsls	r3, r3, #5
 8005730:	429a      	cmp	r2, r3
 8005732:	d109      	bne.n	8005748 <HAL_UART_Transmit+0x4c>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d105      	bne.n	8005748 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2201      	movs	r2, #1
 8005740:	4013      	ands	r3, r2
 8005742:	d001      	beq.n	8005748 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e074      	b.n	8005832 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2284      	movs	r2, #132	@ 0x84
 800574c:	2100      	movs	r1, #0
 800574e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2221      	movs	r2, #33	@ 0x21
 8005754:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005756:	f7fd fc87 	bl	8003068 <HAL_GetTick>
 800575a:	0003      	movs	r3, r0
 800575c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1dba      	adds	r2, r7, #6
 8005762:	2150      	movs	r1, #80	@ 0x50
 8005764:	8812      	ldrh	r2, [r2, #0]
 8005766:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	1dba      	adds	r2, r7, #6
 800576c:	2152      	movs	r1, #82	@ 0x52
 800576e:	8812      	ldrh	r2, [r2, #0]
 8005770:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	2380      	movs	r3, #128	@ 0x80
 8005778:	015b      	lsls	r3, r3, #5
 800577a:	429a      	cmp	r2, r3
 800577c:	d108      	bne.n	8005790 <HAL_UART_Transmit+0x94>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d104      	bne.n	8005790 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	61bb      	str	r3, [r7, #24]
 800578e:	e003      	b.n	8005798 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005794:	2300      	movs	r3, #0
 8005796:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005798:	e02f      	b.n	80057fa <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	0013      	movs	r3, r2
 80057a4:	2200      	movs	r2, #0
 80057a6:	2180      	movs	r1, #128	@ 0x80
 80057a8:	f000 ff62 	bl	8006670 <UART_WaitOnFlagUntilTimeout>
 80057ac:	1e03      	subs	r3, r0, #0
 80057ae:	d004      	beq.n	80057ba <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2220      	movs	r2, #32
 80057b4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e03b      	b.n	8005832 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10b      	bne.n	80057d8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	881a      	ldrh	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	05d2      	lsls	r2, r2, #23
 80057ca:	0dd2      	lsrs	r2, r2, #23
 80057cc:	b292      	uxth	r2, r2
 80057ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	3302      	adds	r3, #2
 80057d4:	61bb      	str	r3, [r7, #24]
 80057d6:	e007      	b.n	80057e8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	781a      	ldrb	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3301      	adds	r3, #1
 80057e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2252      	movs	r2, #82	@ 0x52
 80057ec:	5a9b      	ldrh	r3, [r3, r2]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b299      	uxth	r1, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2252      	movs	r2, #82	@ 0x52
 80057f8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2252      	movs	r2, #82	@ 0x52
 80057fe:	5a9b      	ldrh	r3, [r3, r2]
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1c9      	bne.n	800579a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	0013      	movs	r3, r2
 8005810:	2200      	movs	r2, #0
 8005812:	2140      	movs	r1, #64	@ 0x40
 8005814:	f000 ff2c 	bl	8006670 <UART_WaitOnFlagUntilTimeout>
 8005818:	1e03      	subs	r3, r0, #0
 800581a:	d004      	beq.n	8005826 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e005      	b.n	8005832 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2220      	movs	r2, #32
 800582a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	e000      	b.n	8005832 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005830:	2302      	movs	r3, #2
  }
}
 8005832:	0018      	movs	r0, r3
 8005834:	46bd      	mov	sp, r7
 8005836:	b008      	add	sp, #32
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08a      	sub	sp, #40	@ 0x28
 8005840:	af02      	add	r7, sp, #8
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	1dbb      	adds	r3, r7, #6
 800584a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2280      	movs	r2, #128	@ 0x80
 8005850:	589b      	ldr	r3, [r3, r2]
 8005852:	2b20      	cmp	r3, #32
 8005854:	d000      	beq.n	8005858 <HAL_UART_Receive+0x1c>
 8005856:	e0bd      	b.n	80059d4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_UART_Receive+0x2a>
 800585e:	1dbb      	adds	r3, r7, #6
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e0b5      	b.n	80059d6 <HAL_UART_Receive+0x19a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	689a      	ldr	r2, [r3, #8]
 800586e:	2380      	movs	r3, #128	@ 0x80
 8005870:	015b      	lsls	r3, r3, #5
 8005872:	429a      	cmp	r2, r3
 8005874:	d109      	bne.n	800588a <HAL_UART_Receive+0x4e>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d105      	bne.n	800588a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2201      	movs	r2, #1
 8005882:	4013      	ands	r3, r2
 8005884:	d001      	beq.n	800588a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e0a5      	b.n	80059d6 <HAL_UART_Receive+0x19a>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2284      	movs	r2, #132	@ 0x84
 800588e:	2100      	movs	r1, #0
 8005890:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2280      	movs	r2, #128	@ 0x80
 8005896:	2122      	movs	r1, #34	@ 0x22
 8005898:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058a0:	f7fd fbe2 	bl	8003068 <HAL_GetTick>
 80058a4:	0003      	movs	r3, r0
 80058a6:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	1dba      	adds	r2, r7, #6
 80058ac:	2158      	movs	r1, #88	@ 0x58
 80058ae:	8812      	ldrh	r2, [r2, #0]
 80058b0:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	1dba      	adds	r2, r7, #6
 80058b6:	215a      	movs	r1, #90	@ 0x5a
 80058b8:	8812      	ldrh	r2, [r2, #0]
 80058ba:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	2380      	movs	r3, #128	@ 0x80
 80058c2:	015b      	lsls	r3, r3, #5
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d10d      	bne.n	80058e4 <HAL_UART_Receive+0xa8>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <HAL_UART_Receive+0x9e>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	225c      	movs	r2, #92	@ 0x5c
 80058d4:	4942      	ldr	r1, [pc, #264]	@ (80059e0 <HAL_UART_Receive+0x1a4>)
 80058d6:	5299      	strh	r1, [r3, r2]
 80058d8:	e01a      	b.n	8005910 <HAL_UART_Receive+0xd4>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	225c      	movs	r2, #92	@ 0x5c
 80058de:	21ff      	movs	r1, #255	@ 0xff
 80058e0:	5299      	strh	r1, [r3, r2]
 80058e2:	e015      	b.n	8005910 <HAL_UART_Receive+0xd4>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10d      	bne.n	8005908 <HAL_UART_Receive+0xcc>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d104      	bne.n	80058fe <HAL_UART_Receive+0xc2>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	225c      	movs	r2, #92	@ 0x5c
 80058f8:	21ff      	movs	r1, #255	@ 0xff
 80058fa:	5299      	strh	r1, [r3, r2]
 80058fc:	e008      	b.n	8005910 <HAL_UART_Receive+0xd4>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	225c      	movs	r2, #92	@ 0x5c
 8005902:	217f      	movs	r1, #127	@ 0x7f
 8005904:	5299      	strh	r1, [r3, r2]
 8005906:	e003      	b.n	8005910 <HAL_UART_Receive+0xd4>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	225c      	movs	r2, #92	@ 0x5c
 800590c:	2100      	movs	r1, #0
 800590e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005910:	2312      	movs	r3, #18
 8005912:	18fb      	adds	r3, r7, r3
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	215c      	movs	r1, #92	@ 0x5c
 8005918:	5a52      	ldrh	r2, [r2, r1]
 800591a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	2380      	movs	r3, #128	@ 0x80
 8005922:	015b      	lsls	r3, r3, #5
 8005924:	429a      	cmp	r2, r3
 8005926:	d108      	bne.n	800593a <HAL_UART_Receive+0xfe>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d104      	bne.n	800593a <HAL_UART_Receive+0xfe>
    {
      pdata8bits  = NULL;
 8005930:	2300      	movs	r3, #0
 8005932:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	61bb      	str	r3, [r7, #24]
 8005938:	e003      	b.n	8005942 <HAL_UART_Receive+0x106>
    }
    else
    {
      pdata8bits  = pData;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800593e:	2300      	movs	r3, #0
 8005940:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005942:	e03b      	b.n	80059bc <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	0013      	movs	r3, r2
 800594e:	2200      	movs	r2, #0
 8005950:	2120      	movs	r1, #32
 8005952:	f000 fe8d 	bl	8006670 <UART_WaitOnFlagUntilTimeout>
 8005956:	1e03      	subs	r3, r0, #0
 8005958:	d005      	beq.n	8005966 <HAL_UART_Receive+0x12a>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2280      	movs	r2, #128	@ 0x80
 800595e:	2120      	movs	r1, #32
 8005960:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e037      	b.n	80059d6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10e      	bne.n	800598a <HAL_UART_Receive+0x14e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005972:	b29b      	uxth	r3, r3
 8005974:	2212      	movs	r2, #18
 8005976:	18ba      	adds	r2, r7, r2
 8005978:	8812      	ldrh	r2, [r2, #0]
 800597a:	4013      	ands	r3, r2
 800597c:	b29a      	uxth	r2, r3
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	3302      	adds	r3, #2
 8005986:	61bb      	str	r3, [r7, #24]
 8005988:	e00f      	b.n	80059aa <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005990:	b29b      	uxth	r3, r3
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2212      	movs	r2, #18
 8005996:	18ba      	adds	r2, r7, r2
 8005998:	8812      	ldrh	r2, [r2, #0]
 800599a:	b2d2      	uxtb	r2, r2
 800599c:	4013      	ands	r3, r2
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	3301      	adds	r3, #1
 80059a8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	225a      	movs	r2, #90	@ 0x5a
 80059ae:	5a9b      	ldrh	r3, [r3, r2]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b299      	uxth	r1, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	225a      	movs	r2, #90	@ 0x5a
 80059ba:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	225a      	movs	r2, #90	@ 0x5a
 80059c0:	5a9b      	ldrh	r3, [r3, r2]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1bd      	bne.n	8005944 <HAL_UART_Receive+0x108>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2280      	movs	r2, #128	@ 0x80
 80059cc:	2120      	movs	r1, #32
 80059ce:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	e000      	b.n	80059d6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80059d4:	2302      	movs	r3, #2
  }
}
 80059d6:	0018      	movs	r0, r3
 80059d8:	46bd      	mov	sp, r7
 80059da:	b008      	add	sp, #32
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	46c0      	nop			@ (mov r8, r8)
 80059e0:	000001ff 	.word	0x000001ff

080059e4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b092      	sub	sp, #72	@ 0x48
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ec:	f3ef 8310 	mrs	r3, PRIMASK
 80059f0:	623b      	str	r3, [r7, #32]
  return(result);
 80059f2:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80059f6:	2301      	movs	r3, #1
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	f383 8810 	msr	PRIMASK, r3
}
 8005a00:	46c0      	nop			@ (mov r8, r8)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	494b      	ldr	r1, [pc, #300]	@ (8005b3c <HAL_UART_AbortReceive+0x158>)
 8005a0e:	400a      	ands	r2, r1
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a18:	f383 8810 	msr	PRIMASK, r3
}
 8005a1c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a28:	2301      	movs	r3, #1
 8005a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2e:	f383 8810 	msr	PRIMASK, r3
}
 8005a32:	46c0      	nop			@ (mov r8, r8)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2101      	movs	r1, #1
 8005a40:	438a      	bics	r2, r1
 8005a42:	609a      	str	r2, [r3, #8]
 8005a44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a46:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4a:	f383 8810 	msr	PRIMASK, r3
}
 8005a4e:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d118      	bne.n	8005a8a <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a58:	f3ef 8310 	mrs	r3, PRIMASK
 8005a5c:	617b      	str	r3, [r7, #20]
  return(result);
 8005a5e:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a62:	2301      	movs	r3, #1
 8005a64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	f383 8810 	msr	PRIMASK, r3
}
 8005a6c:	46c0      	nop			@ (mov r8, r8)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2110      	movs	r1, #16
 8005a7a:	438a      	bics	r2, r1
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f383 8810 	msr	PRIMASK, r3
}
 8005a88:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	2240      	movs	r2, #64	@ 0x40
 8005a92:	4013      	ands	r3, r2
 8005a94:	2b40      	cmp	r3, #64	@ 0x40
 8005a96:	d135      	bne.n	8005b04 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a98:	f3ef 8310 	mrs	r3, PRIMASK
 8005a9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f383 8810 	msr	PRIMASK, r3
}
 8005aac:	46c0      	nop			@ (mov r8, r8)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2140      	movs	r1, #64	@ 0x40
 8005aba:	438a      	bics	r2, r1
 8005abc:	609a      	str	r2, [r3, #8]
 8005abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f383 8810 	msr	PRIMASK, r3
}
 8005ac8:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d018      	beq.n	8005b04 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f7fd fd12 	bl	8003508 <HAL_DMA_Abort>
 8005ae4:	1e03      	subs	r3, r0, #0
 8005ae6:	d00d      	beq.n	8005b04 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aec:	0018      	movs	r0, r3
 8005aee:	f7fd fe2a 	bl	8003746 <HAL_DMA_GetError>
 8005af2:	0003      	movs	r3, r0
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d105      	bne.n	8005b04 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2284      	movs	r2, #132	@ 0x84
 8005afc:	2110      	movs	r1, #16
 8005afe:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e017      	b.n	8005b34 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	225a      	movs	r2, #90	@ 0x5a
 8005b08:	2100      	movs	r1, #0
 8005b0a:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	220f      	movs	r2, #15
 8005b12:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2108      	movs	r1, #8
 8005b20:	430a      	orrs	r2, r1
 8005b22:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2280      	movs	r2, #128	@ 0x80
 8005b28:	2120      	movs	r1, #32
 8005b2a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	0018      	movs	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	b012      	add	sp, #72	@ 0x48
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	fffffedf 	.word	0xfffffedf

08005b40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b40:	b590      	push	{r4, r7, lr}
 8005b42:	b0ab      	sub	sp, #172	@ 0xac
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	22a4      	movs	r2, #164	@ 0xa4
 8005b50:	18b9      	adds	r1, r7, r2
 8005b52:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	20a0      	movs	r0, #160	@ 0xa0
 8005b5c:	1839      	adds	r1, r7, r0
 8005b5e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	219c      	movs	r1, #156	@ 0x9c
 8005b68:	1879      	adds	r1, r7, r1
 8005b6a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b6c:	0011      	movs	r1, r2
 8005b6e:	18bb      	adds	r3, r7, r2
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a99      	ldr	r2, [pc, #612]	@ (8005dd8 <HAL_UART_IRQHandler+0x298>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	2298      	movs	r2, #152	@ 0x98
 8005b78:	18bc      	adds	r4, r7, r2
 8005b7a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005b7c:	18bb      	adds	r3, r7, r2
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d114      	bne.n	8005bae <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b84:	187b      	adds	r3, r7, r1
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d00f      	beq.n	8005bae <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b8e:	183b      	adds	r3, r7, r0
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2220      	movs	r2, #32
 8005b94:	4013      	ands	r3, r2
 8005b96:	d00a      	beq.n	8005bae <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d100      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x62>
 8005ba0:	e29e      	b.n	80060e0 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	0010      	movs	r0, r2
 8005baa:	4798      	blx	r3
      }
      return;
 8005bac:	e298      	b.n	80060e0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005bae:	2398      	movs	r3, #152	@ 0x98
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d100      	bne.n	8005bba <HAL_UART_IRQHandler+0x7a>
 8005bb8:	e114      	b.n	8005de4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005bba:	239c      	movs	r3, #156	@ 0x9c
 8005bbc:	18fb      	adds	r3, r7, r3
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d106      	bne.n	8005bd4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005bc6:	23a0      	movs	r3, #160	@ 0xa0
 8005bc8:	18fb      	adds	r3, r7, r3
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a83      	ldr	r2, [pc, #524]	@ (8005ddc <HAL_UART_IRQHandler+0x29c>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d100      	bne.n	8005bd4 <HAL_UART_IRQHandler+0x94>
 8005bd2:	e107      	b.n	8005de4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bd4:	23a4      	movs	r3, #164	@ 0xa4
 8005bd6:	18fb      	adds	r3, r7, r3
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	4013      	ands	r3, r2
 8005bde:	d012      	beq.n	8005c06 <HAL_UART_IRQHandler+0xc6>
 8005be0:	23a0      	movs	r3, #160	@ 0xa0
 8005be2:	18fb      	adds	r3, r7, r3
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	2380      	movs	r3, #128	@ 0x80
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	4013      	ands	r3, r2
 8005bec:	d00b      	beq.n	8005c06 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2284      	movs	r2, #132	@ 0x84
 8005bfa:	589b      	ldr	r3, [r3, r2]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2184      	movs	r1, #132	@ 0x84
 8005c04:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c06:	23a4      	movs	r3, #164	@ 0xa4
 8005c08:	18fb      	adds	r3, r7, r3
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	4013      	ands	r3, r2
 8005c10:	d011      	beq.n	8005c36 <HAL_UART_IRQHandler+0xf6>
 8005c12:	239c      	movs	r3, #156	@ 0x9c
 8005c14:	18fb      	adds	r3, r7, r3
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d00b      	beq.n	8005c36 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2202      	movs	r2, #2
 8005c24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2284      	movs	r2, #132	@ 0x84
 8005c2a:	589b      	ldr	r3, [r3, r2]
 8005c2c:	2204      	movs	r2, #4
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2184      	movs	r1, #132	@ 0x84
 8005c34:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c36:	23a4      	movs	r3, #164	@ 0xa4
 8005c38:	18fb      	adds	r3, r7, r3
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2204      	movs	r2, #4
 8005c3e:	4013      	ands	r3, r2
 8005c40:	d011      	beq.n	8005c66 <HAL_UART_IRQHandler+0x126>
 8005c42:	239c      	movs	r3, #156	@ 0x9c
 8005c44:	18fb      	adds	r3, r7, r3
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	d00b      	beq.n	8005c66 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2204      	movs	r2, #4
 8005c54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2284      	movs	r2, #132	@ 0x84
 8005c5a:	589b      	ldr	r3, [r3, r2]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2184      	movs	r1, #132	@ 0x84
 8005c64:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c66:	23a4      	movs	r3, #164	@ 0xa4
 8005c68:	18fb      	adds	r3, r7, r3
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2208      	movs	r2, #8
 8005c6e:	4013      	ands	r3, r2
 8005c70:	d017      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c72:	23a0      	movs	r3, #160	@ 0xa0
 8005c74:	18fb      	adds	r3, r7, r3
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d105      	bne.n	8005c8a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c7e:	239c      	movs	r3, #156	@ 0x9c
 8005c80:	18fb      	adds	r3, r7, r3
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2201      	movs	r2, #1
 8005c86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c88:	d00b      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2208      	movs	r2, #8
 8005c90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2284      	movs	r2, #132	@ 0x84
 8005c96:	589b      	ldr	r3, [r3, r2]
 8005c98:	2208      	movs	r2, #8
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2184      	movs	r1, #132	@ 0x84
 8005ca0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ca2:	23a4      	movs	r3, #164	@ 0xa4
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	2380      	movs	r3, #128	@ 0x80
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	4013      	ands	r3, r2
 8005cae:	d013      	beq.n	8005cd8 <HAL_UART_IRQHandler+0x198>
 8005cb0:	23a0      	movs	r3, #160	@ 0xa0
 8005cb2:	18fb      	adds	r3, r7, r3
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	2380      	movs	r3, #128	@ 0x80
 8005cb8:	04db      	lsls	r3, r3, #19
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d00c      	beq.n	8005cd8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2280      	movs	r2, #128	@ 0x80
 8005cc4:	0112      	lsls	r2, r2, #4
 8005cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2284      	movs	r2, #132	@ 0x84
 8005ccc:	589b      	ldr	r3, [r3, r2]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2184      	movs	r1, #132	@ 0x84
 8005cd6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2284      	movs	r2, #132	@ 0x84
 8005cdc:	589b      	ldr	r3, [r3, r2]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d100      	bne.n	8005ce4 <HAL_UART_IRQHandler+0x1a4>
 8005ce2:	e1ff      	b.n	80060e4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ce4:	23a4      	movs	r3, #164	@ 0xa4
 8005ce6:	18fb      	adds	r3, r7, r3
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2220      	movs	r2, #32
 8005cec:	4013      	ands	r3, r2
 8005cee:	d00e      	beq.n	8005d0e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cf0:	23a0      	movs	r3, #160	@ 0xa0
 8005cf2:	18fb      	adds	r3, r7, r3
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	d008      	beq.n	8005d0e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	0010      	movs	r0, r2
 8005d0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2284      	movs	r2, #132	@ 0x84
 8005d12:	589b      	ldr	r3, [r3, r2]
 8005d14:	2194      	movs	r1, #148	@ 0x94
 8005d16:	187a      	adds	r2, r7, r1
 8005d18:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2240      	movs	r2, #64	@ 0x40
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b40      	cmp	r3, #64	@ 0x40
 8005d26:	d004      	beq.n	8005d32 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d28:	187b      	adds	r3, r7, r1
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2228      	movs	r2, #40	@ 0x28
 8005d2e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d30:	d047      	beq.n	8005dc2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	0018      	movs	r0, r3
 8005d36:	f000 fd0b 	bl	8006750 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	2240      	movs	r2, #64	@ 0x40
 8005d42:	4013      	ands	r3, r2
 8005d44:	2b40      	cmp	r3, #64	@ 0x40
 8005d46:	d137      	bne.n	8005db8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d48:	f3ef 8310 	mrs	r3, PRIMASK
 8005d4c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8005d4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d50:	2090      	movs	r0, #144	@ 0x90
 8005d52:	183a      	adds	r2, r7, r0
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	2301      	movs	r3, #1
 8005d58:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d5c:	f383 8810 	msr	PRIMASK, r3
}
 8005d60:	46c0      	nop			@ (mov r8, r8)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2140      	movs	r1, #64	@ 0x40
 8005d6e:	438a      	bics	r2, r1
 8005d70:	609a      	str	r2, [r3, #8]
 8005d72:	183b      	adds	r3, r7, r0
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d7a:	f383 8810 	msr	PRIMASK, r3
}
 8005d7e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d012      	beq.n	8005dae <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d8c:	4a14      	ldr	r2, [pc, #80]	@ (8005de0 <HAL_UART_IRQHandler+0x2a0>)
 8005d8e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d94:	0018      	movs	r0, r3
 8005d96:	f7fd fbef 	bl	8003578 <HAL_DMA_Abort_IT>
 8005d9a:	1e03      	subs	r3, r0, #0
 8005d9c:	d01a      	beq.n	8005dd4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005da2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005da8:	0018      	movs	r0, r3
 8005daa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dac:	e012      	b.n	8005dd4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	0018      	movs	r0, r3
 8005db2:	f000 f9ad 	bl	8006110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db6:	e00d      	b.n	8005dd4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	0018      	movs	r0, r3
 8005dbc:	f000 f9a8 	bl	8006110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc0:	e008      	b.n	8005dd4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f000 f9a3 	bl	8006110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2284      	movs	r2, #132	@ 0x84
 8005dce:	2100      	movs	r1, #0
 8005dd0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005dd2:	e187      	b.n	80060e4 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd4:	46c0      	nop			@ (mov r8, r8)
    return;
 8005dd6:	e185      	b.n	80060e4 <HAL_UART_IRQHandler+0x5a4>
 8005dd8:	0000080f 	.word	0x0000080f
 8005ddc:	04000120 	.word	0x04000120
 8005de0:	08006819 	.word	0x08006819

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d000      	beq.n	8005dee <HAL_UART_IRQHandler+0x2ae>
 8005dec:	e139      	b.n	8006062 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005dee:	23a4      	movs	r3, #164	@ 0xa4
 8005df0:	18fb      	adds	r3, r7, r3
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2210      	movs	r2, #16
 8005df6:	4013      	ands	r3, r2
 8005df8:	d100      	bne.n	8005dfc <HAL_UART_IRQHandler+0x2bc>
 8005dfa:	e132      	b.n	8006062 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005dfc:	23a0      	movs	r3, #160	@ 0xa0
 8005dfe:	18fb      	adds	r3, r7, r3
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2210      	movs	r2, #16
 8005e04:	4013      	ands	r3, r2
 8005e06:	d100      	bne.n	8005e0a <HAL_UART_IRQHandler+0x2ca>
 8005e08:	e12b      	b.n	8006062 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2210      	movs	r2, #16
 8005e10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	2240      	movs	r2, #64	@ 0x40
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	2b40      	cmp	r3, #64	@ 0x40
 8005e1e:	d000      	beq.n	8005e22 <HAL_UART_IRQHandler+0x2e2>
 8005e20:	e09f      	b.n	8005f62 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	217e      	movs	r1, #126	@ 0x7e
 8005e2c:	187b      	adds	r3, r7, r1
 8005e2e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005e30:	187b      	adds	r3, r7, r1
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d100      	bne.n	8005e3a <HAL_UART_IRQHandler+0x2fa>
 8005e38:	e156      	b.n	80060e8 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2258      	movs	r2, #88	@ 0x58
 8005e3e:	5a9b      	ldrh	r3, [r3, r2]
 8005e40:	187a      	adds	r2, r7, r1
 8005e42:	8812      	ldrh	r2, [r2, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d300      	bcc.n	8005e4a <HAL_UART_IRQHandler+0x30a>
 8005e48:	e14e      	b.n	80060e8 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	187a      	adds	r2, r7, r1
 8005e4e:	215a      	movs	r1, #90	@ 0x5a
 8005e50:	8812      	ldrh	r2, [r2, #0]
 8005e52:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d06f      	beq.n	8005f3e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e62:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e68:	2301      	movs	r3, #1
 8005e6a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e6e:	f383 8810 	msr	PRIMASK, r3
}
 8005e72:	46c0      	nop			@ (mov r8, r8)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	499e      	ldr	r1, [pc, #632]	@ (80060f8 <HAL_UART_IRQHandler+0x5b8>)
 8005e80:	400a      	ands	r2, r1
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e86:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e8a:	f383 8810 	msr	PRIMASK, r3
}
 8005e8e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e90:	f3ef 8310 	mrs	r3, PRIMASK
 8005e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e98:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ea0:	f383 8810 	msr	PRIMASK, r3
}
 8005ea4:	46c0      	nop			@ (mov r8, r8)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	438a      	bics	r2, r1
 8005eb4:	609a      	str	r2, [r3, #8]
 8005eb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005eb8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ebc:	f383 8810 	msr	PRIMASK, r3
}
 8005ec0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005ec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eca:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ecc:	2301      	movs	r3, #1
 8005ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ed2:	f383 8810 	msr	PRIMASK, r3
}
 8005ed6:	46c0      	nop			@ (mov r8, r8)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2140      	movs	r1, #64	@ 0x40
 8005ee4:	438a      	bics	r2, r1
 8005ee6:	609a      	str	r2, [r3, #8]
 8005ee8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005eea:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005eee:	f383 8810 	msr	PRIMASK, r3
}
 8005ef2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2280      	movs	r2, #128	@ 0x80
 8005ef8:	2120      	movs	r1, #32
 8005efa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f02:	f3ef 8310 	mrs	r3, PRIMASK
 8005f06:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f12:	f383 8810 	msr	PRIMASK, r3
}
 8005f16:	46c0      	nop			@ (mov r8, r8)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2110      	movs	r1, #16
 8005f24:	438a      	bics	r2, r1
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f2e:	f383 8810 	msr	PRIMASK, r3
}
 8005f32:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f7fd fae5 	bl	8003508 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2202      	movs	r2, #2
 8005f42:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2258      	movs	r2, #88	@ 0x58
 8005f48:	5a9a      	ldrh	r2, [r3, r2]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	215a      	movs	r1, #90	@ 0x5a
 8005f4e:	5a5b      	ldrh	r3, [r3, r1]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	0011      	movs	r1, r2
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	f000 f8e0 	bl	8006120 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f60:	e0c2      	b.n	80060e8 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2258      	movs	r2, #88	@ 0x58
 8005f66:	5a99      	ldrh	r1, [r3, r2]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	225a      	movs	r2, #90	@ 0x5a
 8005f6c:	5a9b      	ldrh	r3, [r3, r2]
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	208e      	movs	r0, #142	@ 0x8e
 8005f72:	183b      	adds	r3, r7, r0
 8005f74:	1a8a      	subs	r2, r1, r2
 8005f76:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	225a      	movs	r2, #90	@ 0x5a
 8005f7c:	5a9b      	ldrh	r3, [r3, r2]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d100      	bne.n	8005f86 <HAL_UART_IRQHandler+0x446>
 8005f84:	e0b2      	b.n	80060ec <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8005f86:	183b      	adds	r3, r7, r0
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d100      	bne.n	8005f90 <HAL_UART_IRQHandler+0x450>
 8005f8e:	e0ad      	b.n	80060ec <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f90:	f3ef 8310 	mrs	r3, PRIMASK
 8005f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f96:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f98:	2488      	movs	r4, #136	@ 0x88
 8005f9a:	193a      	adds	r2, r7, r4
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f383 8810 	msr	PRIMASK, r3
}
 8005fa8:	46c0      	nop			@ (mov r8, r8)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4951      	ldr	r1, [pc, #324]	@ (80060fc <HAL_UART_IRQHandler+0x5bc>)
 8005fb6:	400a      	ands	r2, r1
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	193b      	adds	r3, r7, r4
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f383 8810 	msr	PRIMASK, r3
}
 8005fc6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fcc:	61bb      	str	r3, [r7, #24]
  return(result);
 8005fce:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd0:	2484      	movs	r4, #132	@ 0x84
 8005fd2:	193a      	adds	r2, r7, r4
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	f383 8810 	msr	PRIMASK, r3
}
 8005fe0:	46c0      	nop			@ (mov r8, r8)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2101      	movs	r1, #1
 8005fee:	438a      	bics	r2, r1
 8005ff0:	609a      	str	r2, [r3, #8]
 8005ff2:	193b      	adds	r3, r7, r4
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	f383 8810 	msr	PRIMASK, r3
}
 8005ffe:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2280      	movs	r2, #128	@ 0x80
 8006004:	2120      	movs	r1, #32
 8006006:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006014:	f3ef 8310 	mrs	r3, PRIMASK
 8006018:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800601a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601c:	2480      	movs	r4, #128	@ 0x80
 800601e:	193a      	adds	r2, r7, r4
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	2301      	movs	r3, #1
 8006024:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006028:	f383 8810 	msr	PRIMASK, r3
}
 800602c:	46c0      	nop			@ (mov r8, r8)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2110      	movs	r1, #16
 800603a:	438a      	bics	r2, r1
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	193b      	adds	r3, r7, r4
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006046:	f383 8810 	msr	PRIMASK, r3
}
 800604a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006052:	183b      	adds	r3, r7, r0
 8006054:	881a      	ldrh	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	0011      	movs	r1, r2
 800605a:	0018      	movs	r0, r3
 800605c:	f000 f860 	bl	8006120 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006060:	e044      	b.n	80060ec <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006062:	23a4      	movs	r3, #164	@ 0xa4
 8006064:	18fb      	adds	r3, r7, r3
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	2380      	movs	r3, #128	@ 0x80
 800606a:	035b      	lsls	r3, r3, #13
 800606c:	4013      	ands	r3, r2
 800606e:	d010      	beq.n	8006092 <HAL_UART_IRQHandler+0x552>
 8006070:	239c      	movs	r3, #156	@ 0x9c
 8006072:	18fb      	adds	r3, r7, r3
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	2380      	movs	r3, #128	@ 0x80
 8006078:	03db      	lsls	r3, r3, #15
 800607a:	4013      	ands	r3, r2
 800607c:	d009      	beq.n	8006092 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2280      	movs	r2, #128	@ 0x80
 8006084:	0352      	lsls	r2, r2, #13
 8006086:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	0018      	movs	r0, r3
 800608c:	f000 fc06 	bl	800689c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006090:	e02f      	b.n	80060f2 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006092:	23a4      	movs	r3, #164	@ 0xa4
 8006094:	18fb      	adds	r3, r7, r3
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2280      	movs	r2, #128	@ 0x80
 800609a:	4013      	ands	r3, r2
 800609c:	d00f      	beq.n	80060be <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800609e:	23a0      	movs	r3, #160	@ 0xa0
 80060a0:	18fb      	adds	r3, r7, r3
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2280      	movs	r2, #128	@ 0x80
 80060a6:	4013      	ands	r3, r2
 80060a8:	d009      	beq.n	80060be <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01e      	beq.n	80060f0 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	0010      	movs	r0, r2
 80060ba:	4798      	blx	r3
    }
    return;
 80060bc:	e018      	b.n	80060f0 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060be:	23a4      	movs	r3, #164	@ 0xa4
 80060c0:	18fb      	adds	r3, r7, r3
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2240      	movs	r2, #64	@ 0x40
 80060c6:	4013      	ands	r3, r2
 80060c8:	d013      	beq.n	80060f2 <HAL_UART_IRQHandler+0x5b2>
 80060ca:	23a0      	movs	r3, #160	@ 0xa0
 80060cc:	18fb      	adds	r3, r7, r3
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2240      	movs	r2, #64	@ 0x40
 80060d2:	4013      	ands	r3, r2
 80060d4:	d00d      	beq.n	80060f2 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	0018      	movs	r0, r3
 80060da:	f000 fbb4 	bl	8006846 <UART_EndTransmit_IT>
    return;
 80060de:	e008      	b.n	80060f2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80060e0:	46c0      	nop			@ (mov r8, r8)
 80060e2:	e006      	b.n	80060f2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80060e4:	46c0      	nop			@ (mov r8, r8)
 80060e6:	e004      	b.n	80060f2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80060e8:	46c0      	nop			@ (mov r8, r8)
 80060ea:	e002      	b.n	80060f2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80060ec:	46c0      	nop			@ (mov r8, r8)
 80060ee:	e000      	b.n	80060f2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80060f0:	46c0      	nop			@ (mov r8, r8)
  }

}
 80060f2:	46bd      	mov	sp, r7
 80060f4:	b02b      	add	sp, #172	@ 0xac
 80060f6:	bd90      	pop	{r4, r7, pc}
 80060f8:	fffffeff 	.word	0xfffffeff
 80060fc:	fffffedf 	.word	0xfffffedf

08006100 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006108:	46c0      	nop			@ (mov r8, r8)
 800610a:	46bd      	mov	sp, r7
 800610c:	b002      	add	sp, #8
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006118:	46c0      	nop			@ (mov r8, r8)
 800611a:	46bd      	mov	sp, r7
 800611c:	b002      	add	sp, #8
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	000a      	movs	r2, r1
 800612a:	1cbb      	adds	r3, r7, #2
 800612c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800612e:	46c0      	nop			@ (mov r8, r8)
 8006130:	46bd      	mov	sp, r7
 8006132:	b002      	add	sp, #8
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006140:	231e      	movs	r3, #30
 8006142:	18fb      	adds	r3, r7, r3
 8006144:	2200      	movs	r2, #0
 8006146:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	431a      	orrs	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a8d      	ldr	r2, [pc, #564]	@ (800639c <UART_SetConfig+0x264>)
 8006168:	4013      	ands	r3, r2
 800616a:	0019      	movs	r1, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	430a      	orrs	r2, r1
 8006174:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	4a88      	ldr	r2, [pc, #544]	@ (80063a0 <UART_SetConfig+0x268>)
 800617e:	4013      	ands	r3, r2
 8006180:	0019      	movs	r1, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	4a7f      	ldr	r2, [pc, #508]	@ (80063a4 <UART_SetConfig+0x26c>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	0019      	movs	r1, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a7b      	ldr	r2, [pc, #492]	@ (80063a8 <UART_SetConfig+0x270>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d127      	bne.n	800620e <UART_SetConfig+0xd6>
 80061be:	4b7b      	ldr	r3, [pc, #492]	@ (80063ac <UART_SetConfig+0x274>)
 80061c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c2:	2203      	movs	r2, #3
 80061c4:	4013      	ands	r3, r2
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	d00d      	beq.n	80061e6 <UART_SetConfig+0xae>
 80061ca:	d81b      	bhi.n	8006204 <UART_SetConfig+0xcc>
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d014      	beq.n	80061fa <UART_SetConfig+0xc2>
 80061d0:	d818      	bhi.n	8006204 <UART_SetConfig+0xcc>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <UART_SetConfig+0xa4>
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d00a      	beq.n	80061f0 <UART_SetConfig+0xb8>
 80061da:	e013      	b.n	8006204 <UART_SetConfig+0xcc>
 80061dc:	231f      	movs	r3, #31
 80061de:	18fb      	adds	r3, r7, r3
 80061e0:	2200      	movs	r2, #0
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	e021      	b.n	800622a <UART_SetConfig+0xf2>
 80061e6:	231f      	movs	r3, #31
 80061e8:	18fb      	adds	r3, r7, r3
 80061ea:	2202      	movs	r2, #2
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	e01c      	b.n	800622a <UART_SetConfig+0xf2>
 80061f0:	231f      	movs	r3, #31
 80061f2:	18fb      	adds	r3, r7, r3
 80061f4:	2204      	movs	r2, #4
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	e017      	b.n	800622a <UART_SetConfig+0xf2>
 80061fa:	231f      	movs	r3, #31
 80061fc:	18fb      	adds	r3, r7, r3
 80061fe:	2208      	movs	r2, #8
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	e012      	b.n	800622a <UART_SetConfig+0xf2>
 8006204:	231f      	movs	r3, #31
 8006206:	18fb      	adds	r3, r7, r3
 8006208:	2210      	movs	r2, #16
 800620a:	701a      	strb	r2, [r3, #0]
 800620c:	e00d      	b.n	800622a <UART_SetConfig+0xf2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a67      	ldr	r2, [pc, #412]	@ (80063b0 <UART_SetConfig+0x278>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d104      	bne.n	8006222 <UART_SetConfig+0xea>
 8006218:	231f      	movs	r3, #31
 800621a:	18fb      	adds	r3, r7, r3
 800621c:	2200      	movs	r2, #0
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	e003      	b.n	800622a <UART_SetConfig+0xf2>
 8006222:	231f      	movs	r3, #31
 8006224:	18fb      	adds	r3, r7, r3
 8006226:	2210      	movs	r2, #16
 8006228:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69da      	ldr	r2, [r3, #28]
 800622e:	2380      	movs	r3, #128	@ 0x80
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	429a      	cmp	r2, r3
 8006234:	d15c      	bne.n	80062f0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8006236:	231f      	movs	r3, #31
 8006238:	18fb      	adds	r3, r7, r3
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b08      	cmp	r3, #8
 800623e:	d015      	beq.n	800626c <UART_SetConfig+0x134>
 8006240:	dc18      	bgt.n	8006274 <UART_SetConfig+0x13c>
 8006242:	2b04      	cmp	r3, #4
 8006244:	d00d      	beq.n	8006262 <UART_SetConfig+0x12a>
 8006246:	dc15      	bgt.n	8006274 <UART_SetConfig+0x13c>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <UART_SetConfig+0x11a>
 800624c:	2b02      	cmp	r3, #2
 800624e:	d005      	beq.n	800625c <UART_SetConfig+0x124>
 8006250:	e010      	b.n	8006274 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006252:	f7fe f857 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 8006256:	0003      	movs	r3, r0
 8006258:	61bb      	str	r3, [r7, #24]
        break;
 800625a:	e012      	b.n	8006282 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800625c:	4b55      	ldr	r3, [pc, #340]	@ (80063b4 <UART_SetConfig+0x27c>)
 800625e:	61bb      	str	r3, [r7, #24]
        break;
 8006260:	e00f      	b.n	8006282 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006262:	f7fd ffef 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 8006266:	0003      	movs	r3, r0
 8006268:	61bb      	str	r3, [r7, #24]
        break;
 800626a:	e00a      	b.n	8006282 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800626c:	2380      	movs	r3, #128	@ 0x80
 800626e:	021b      	lsls	r3, r3, #8
 8006270:	61bb      	str	r3, [r7, #24]
        break;
 8006272:	e006      	b.n	8006282 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006274:	2300      	movs	r3, #0
 8006276:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006278:	231e      	movs	r3, #30
 800627a:	18fb      	adds	r3, r7, r3
 800627c:	2201      	movs	r2, #1
 800627e:	701a      	strb	r2, [r3, #0]
        break;
 8006280:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d100      	bne.n	800628a <UART_SetConfig+0x152>
 8006288:	e07a      	b.n	8006380 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	005a      	lsls	r2, r3, #1
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	085b      	lsrs	r3, r3, #1
 8006294:	18d2      	adds	r2, r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	0019      	movs	r1, r3
 800629c:	0010      	movs	r0, r2
 800629e:	f7f9 ff3b 	bl	8000118 <__udivsi3>
 80062a2:	0003      	movs	r3, r0
 80062a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	2b0f      	cmp	r3, #15
 80062aa:	d91c      	bls.n	80062e6 <UART_SetConfig+0x1ae>
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	2380      	movs	r3, #128	@ 0x80
 80062b0:	025b      	lsls	r3, r3, #9
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d217      	bcs.n	80062e6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	200e      	movs	r0, #14
 80062bc:	183b      	adds	r3, r7, r0
 80062be:	210f      	movs	r1, #15
 80062c0:	438a      	bics	r2, r1
 80062c2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	085b      	lsrs	r3, r3, #1
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2207      	movs	r2, #7
 80062cc:	4013      	ands	r3, r2
 80062ce:	b299      	uxth	r1, r3
 80062d0:	183b      	adds	r3, r7, r0
 80062d2:	183a      	adds	r2, r7, r0
 80062d4:	8812      	ldrh	r2, [r2, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	183a      	adds	r2, r7, r0
 80062e0:	8812      	ldrh	r2, [r2, #0]
 80062e2:	60da      	str	r2, [r3, #12]
 80062e4:	e04c      	b.n	8006380 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80062e6:	231e      	movs	r3, #30
 80062e8:	18fb      	adds	r3, r7, r3
 80062ea:	2201      	movs	r2, #1
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	e047      	b.n	8006380 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062f0:	231f      	movs	r3, #31
 80062f2:	18fb      	adds	r3, r7, r3
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d015      	beq.n	8006326 <UART_SetConfig+0x1ee>
 80062fa:	dc18      	bgt.n	800632e <UART_SetConfig+0x1f6>
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d00d      	beq.n	800631c <UART_SetConfig+0x1e4>
 8006300:	dc15      	bgt.n	800632e <UART_SetConfig+0x1f6>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <UART_SetConfig+0x1d4>
 8006306:	2b02      	cmp	r3, #2
 8006308:	d005      	beq.n	8006316 <UART_SetConfig+0x1de>
 800630a:	e010      	b.n	800632e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800630c:	f7fd fffa 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 8006310:	0003      	movs	r3, r0
 8006312:	61bb      	str	r3, [r7, #24]
        break;
 8006314:	e012      	b.n	800633c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006316:	4b27      	ldr	r3, [pc, #156]	@ (80063b4 <UART_SetConfig+0x27c>)
 8006318:	61bb      	str	r3, [r7, #24]
        break;
 800631a:	e00f      	b.n	800633c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800631c:	f7fd ff92 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 8006320:	0003      	movs	r3, r0
 8006322:	61bb      	str	r3, [r7, #24]
        break;
 8006324:	e00a      	b.n	800633c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006326:	2380      	movs	r3, #128	@ 0x80
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	61bb      	str	r3, [r7, #24]
        break;
 800632c:	e006      	b.n	800633c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006332:	231e      	movs	r3, #30
 8006334:	18fb      	adds	r3, r7, r3
 8006336:	2201      	movs	r2, #1
 8006338:	701a      	strb	r2, [r3, #0]
        break;
 800633a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d01e      	beq.n	8006380 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	085a      	lsrs	r2, r3, #1
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	18d2      	adds	r2, r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	0019      	movs	r1, r3
 8006352:	0010      	movs	r0, r2
 8006354:	f7f9 fee0 	bl	8000118 <__udivsi3>
 8006358:	0003      	movs	r3, r0
 800635a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	2b0f      	cmp	r3, #15
 8006360:	d90a      	bls.n	8006378 <UART_SetConfig+0x240>
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	2380      	movs	r3, #128	@ 0x80
 8006366:	025b      	lsls	r3, r3, #9
 8006368:	429a      	cmp	r2, r3
 800636a:	d205      	bcs.n	8006378 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	b29a      	uxth	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	60da      	str	r2, [r3, #12]
 8006376:	e003      	b.n	8006380 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8006378:	231e      	movs	r3, #30
 800637a:	18fb      	adds	r3, r7, r3
 800637c:	2201      	movs	r2, #1
 800637e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800638c:	231e      	movs	r3, #30
 800638e:	18fb      	adds	r3, r7, r3
 8006390:	781b      	ldrb	r3, [r3, #0]
}
 8006392:	0018      	movs	r0, r3
 8006394:	46bd      	mov	sp, r7
 8006396:	b008      	add	sp, #32
 8006398:	bd80      	pop	{r7, pc}
 800639a:	46c0      	nop			@ (mov r8, r8)
 800639c:	ffff69f3 	.word	0xffff69f3
 80063a0:	ffffcfff 	.word	0xffffcfff
 80063a4:	fffff4ff 	.word	0xfffff4ff
 80063a8:	40013800 	.word	0x40013800
 80063ac:	40021000 	.word	0x40021000
 80063b0:	40004400 	.word	0x40004400
 80063b4:	007a1200 	.word	0x007a1200

080063b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c4:	2208      	movs	r2, #8
 80063c6:	4013      	ands	r3, r2
 80063c8:	d00b      	beq.n	80063e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	4a4a      	ldr	r2, [pc, #296]	@ (80064fc <UART_AdvFeatureConfig+0x144>)
 80063d2:	4013      	ands	r3, r2
 80063d4:	0019      	movs	r1, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e6:	2201      	movs	r2, #1
 80063e8:	4013      	ands	r3, r2
 80063ea:	d00b      	beq.n	8006404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	4a43      	ldr	r2, [pc, #268]	@ (8006500 <UART_AdvFeatureConfig+0x148>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	0019      	movs	r1, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006408:	2202      	movs	r2, #2
 800640a:	4013      	ands	r3, r2
 800640c:	d00b      	beq.n	8006426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	4a3b      	ldr	r2, [pc, #236]	@ (8006504 <UART_AdvFeatureConfig+0x14c>)
 8006416:	4013      	ands	r3, r2
 8006418:	0019      	movs	r1, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	2204      	movs	r2, #4
 800642c:	4013      	ands	r3, r2
 800642e:	d00b      	beq.n	8006448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	4a34      	ldr	r2, [pc, #208]	@ (8006508 <UART_AdvFeatureConfig+0x150>)
 8006438:	4013      	ands	r3, r2
 800643a:	0019      	movs	r1, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644c:	2210      	movs	r2, #16
 800644e:	4013      	ands	r3, r2
 8006450:	d00b      	beq.n	800646a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	4a2c      	ldr	r2, [pc, #176]	@ (800650c <UART_AdvFeatureConfig+0x154>)
 800645a:	4013      	ands	r3, r2
 800645c:	0019      	movs	r1, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646e:	2220      	movs	r2, #32
 8006470:	4013      	ands	r3, r2
 8006472:	d00b      	beq.n	800648c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	4a25      	ldr	r2, [pc, #148]	@ (8006510 <UART_AdvFeatureConfig+0x158>)
 800647c:	4013      	ands	r3, r2
 800647e:	0019      	movs	r1, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006490:	2240      	movs	r2, #64	@ 0x40
 8006492:	4013      	ands	r3, r2
 8006494:	d01d      	beq.n	80064d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	4a1d      	ldr	r2, [pc, #116]	@ (8006514 <UART_AdvFeatureConfig+0x15c>)
 800649e:	4013      	ands	r3, r2
 80064a0:	0019      	movs	r1, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064b2:	2380      	movs	r3, #128	@ 0x80
 80064b4:	035b      	lsls	r3, r3, #13
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d10b      	bne.n	80064d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	4a15      	ldr	r2, [pc, #84]	@ (8006518 <UART_AdvFeatureConfig+0x160>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	0019      	movs	r1, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d6:	2280      	movs	r2, #128	@ 0x80
 80064d8:	4013      	ands	r3, r2
 80064da:	d00b      	beq.n	80064f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	4a0e      	ldr	r2, [pc, #56]	@ (800651c <UART_AdvFeatureConfig+0x164>)
 80064e4:	4013      	ands	r3, r2
 80064e6:	0019      	movs	r1, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	605a      	str	r2, [r3, #4]
  }
}
 80064f4:	46c0      	nop			@ (mov r8, r8)
 80064f6:	46bd      	mov	sp, r7
 80064f8:	b002      	add	sp, #8
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	ffff7fff 	.word	0xffff7fff
 8006500:	fffdffff 	.word	0xfffdffff
 8006504:	fffeffff 	.word	0xfffeffff
 8006508:	fffbffff 	.word	0xfffbffff
 800650c:	ffffefff 	.word	0xffffefff
 8006510:	ffffdfff 	.word	0xffffdfff
 8006514:	ffefffff 	.word	0xffefffff
 8006518:	ff9fffff 	.word	0xff9fffff
 800651c:	fff7ffff 	.word	0xfff7ffff

08006520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b092      	sub	sp, #72	@ 0x48
 8006524:	af02      	add	r7, sp, #8
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2284      	movs	r2, #132	@ 0x84
 800652c:	2100      	movs	r1, #0
 800652e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006530:	f7fc fd9a 	bl	8003068 <HAL_GetTick>
 8006534:	0003      	movs	r3, r0
 8006536:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2208      	movs	r2, #8
 8006540:	4013      	ands	r3, r2
 8006542:	2b08      	cmp	r3, #8
 8006544:	d12c      	bne.n	80065a0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006548:	2280      	movs	r2, #128	@ 0x80
 800654a:	0391      	lsls	r1, r2, #14
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	4a46      	ldr	r2, [pc, #280]	@ (8006668 <UART_CheckIdleState+0x148>)
 8006550:	9200      	str	r2, [sp, #0]
 8006552:	2200      	movs	r2, #0
 8006554:	f000 f88c 	bl	8006670 <UART_WaitOnFlagUntilTimeout>
 8006558:	1e03      	subs	r3, r0, #0
 800655a:	d021      	beq.n	80065a0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800655c:	f3ef 8310 	mrs	r3, PRIMASK
 8006560:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006564:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006566:	2301      	movs	r3, #1
 8006568:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800656a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800656c:	f383 8810 	msr	PRIMASK, r3
}
 8006570:	46c0      	nop			@ (mov r8, r8)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2180      	movs	r1, #128	@ 0x80
 800657e:	438a      	bics	r2, r1
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006584:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006588:	f383 8810 	msr	PRIMASK, r3
}
 800658c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2220      	movs	r2, #32
 8006592:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2278      	movs	r2, #120	@ 0x78
 8006598:	2100      	movs	r1, #0
 800659a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e05f      	b.n	8006660 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2204      	movs	r2, #4
 80065a8:	4013      	ands	r3, r2
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d146      	bne.n	800663c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b0:	2280      	movs	r2, #128	@ 0x80
 80065b2:	03d1      	lsls	r1, r2, #15
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006668 <UART_CheckIdleState+0x148>)
 80065b8:	9200      	str	r2, [sp, #0]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f000 f858 	bl	8006670 <UART_WaitOnFlagUntilTimeout>
 80065c0:	1e03      	subs	r3, r0, #0
 80065c2:	d03b      	beq.n	800663c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065c4:	f3ef 8310 	mrs	r3, PRIMASK
 80065c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80065ca:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ce:	2301      	movs	r3, #1
 80065d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f383 8810 	msr	PRIMASK, r3
}
 80065d8:	46c0      	nop			@ (mov r8, r8)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4921      	ldr	r1, [pc, #132]	@ (800666c <UART_CheckIdleState+0x14c>)
 80065e6:	400a      	ands	r2, r1
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f383 8810 	msr	PRIMASK, r3
}
 80065f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065f6:	f3ef 8310 	mrs	r3, PRIMASK
 80065fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80065fc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006600:	2301      	movs	r3, #1
 8006602:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	f383 8810 	msr	PRIMASK, r3
}
 800660a:	46c0      	nop			@ (mov r8, r8)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2101      	movs	r1, #1
 8006618:	438a      	bics	r2, r1
 800661a:	609a      	str	r2, [r3, #8]
 800661c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	f383 8810 	msr	PRIMASK, r3
}
 8006626:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2280      	movs	r2, #128	@ 0x80
 800662c:	2120      	movs	r1, #32
 800662e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2278      	movs	r2, #120	@ 0x78
 8006634:	2100      	movs	r1, #0
 8006636:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e011      	b.n	8006660 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2220      	movs	r2, #32
 8006640:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2280      	movs	r2, #128	@ 0x80
 8006646:	2120      	movs	r1, #32
 8006648:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2278      	movs	r2, #120	@ 0x78
 800665a:	2100      	movs	r1, #0
 800665c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	0018      	movs	r0, r3
 8006662:	46bd      	mov	sp, r7
 8006664:	b010      	add	sp, #64	@ 0x40
 8006666:	bd80      	pop	{r7, pc}
 8006668:	01ffffff 	.word	0x01ffffff
 800666c:	fffffedf 	.word	0xfffffedf

08006670 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	603b      	str	r3, [r7, #0]
 800667c:	1dfb      	adds	r3, r7, #7
 800667e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006680:	e051      	b.n	8006726 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	3301      	adds	r3, #1
 8006686:	d04e      	beq.n	8006726 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006688:	f7fc fcee 	bl	8003068 <HAL_GetTick>
 800668c:	0002      	movs	r2, r0
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	429a      	cmp	r2, r3
 8006696:	d302      	bcc.n	800669e <UART_WaitOnFlagUntilTimeout+0x2e>
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e051      	b.n	8006746 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2204      	movs	r2, #4
 80066aa:	4013      	ands	r3, r2
 80066ac:	d03b      	beq.n	8006726 <UART_WaitOnFlagUntilTimeout+0xb6>
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b80      	cmp	r3, #128	@ 0x80
 80066b2:	d038      	beq.n	8006726 <UART_WaitOnFlagUntilTimeout+0xb6>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b40      	cmp	r3, #64	@ 0x40
 80066b8:	d035      	beq.n	8006726 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	2208      	movs	r2, #8
 80066c2:	4013      	ands	r3, r2
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d111      	bne.n	80066ec <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2208      	movs	r2, #8
 80066ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	0018      	movs	r0, r3
 80066d4:	f000 f83c 	bl	8006750 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2284      	movs	r2, #132	@ 0x84
 80066dc:	2108      	movs	r1, #8
 80066de:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2278      	movs	r2, #120	@ 0x78
 80066e4:	2100      	movs	r1, #0
 80066e6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e02c      	b.n	8006746 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	69da      	ldr	r2, [r3, #28]
 80066f2:	2380      	movs	r3, #128	@ 0x80
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	401a      	ands	r2, r3
 80066f8:	2380      	movs	r3, #128	@ 0x80
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d112      	bne.n	8006726 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2280      	movs	r2, #128	@ 0x80
 8006706:	0112      	lsls	r2, r2, #4
 8006708:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	0018      	movs	r0, r3
 800670e:	f000 f81f 	bl	8006750 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2284      	movs	r2, #132	@ 0x84
 8006716:	2120      	movs	r1, #32
 8006718:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2278      	movs	r2, #120	@ 0x78
 800671e:	2100      	movs	r1, #0
 8006720:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e00f      	b.n	8006746 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69db      	ldr	r3, [r3, #28]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	4013      	ands	r3, r2
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	425a      	negs	r2, r3
 8006736:	4153      	adcs	r3, r2
 8006738:	b2db      	uxtb	r3, r3
 800673a:	001a      	movs	r2, r3
 800673c:	1dfb      	adds	r3, r7, #7
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	429a      	cmp	r2, r3
 8006742:	d09e      	beq.n	8006682 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	0018      	movs	r0, r3
 8006748:	46bd      	mov	sp, r7
 800674a:	b004      	add	sp, #16
 800674c:	bd80      	pop	{r7, pc}
	...

08006750 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b08e      	sub	sp, #56	@ 0x38
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006758:	f3ef 8310 	mrs	r3, PRIMASK
 800675c:	617b      	str	r3, [r7, #20]
  return(result);
 800675e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006760:	637b      	str	r3, [r7, #52]	@ 0x34
 8006762:	2301      	movs	r3, #1
 8006764:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	f383 8810 	msr	PRIMASK, r3
}
 800676c:	46c0      	nop			@ (mov r8, r8)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4926      	ldr	r1, [pc, #152]	@ (8006814 <UART_EndRxTransfer+0xc4>)
 800677a:	400a      	ands	r2, r1
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006780:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	f383 8810 	msr	PRIMASK, r3
}
 8006788:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800678a:	f3ef 8310 	mrs	r3, PRIMASK
 800678e:	623b      	str	r3, [r7, #32]
  return(result);
 8006790:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006792:	633b      	str	r3, [r7, #48]	@ 0x30
 8006794:	2301      	movs	r3, #1
 8006796:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	f383 8810 	msr	PRIMASK, r3
}
 800679e:	46c0      	nop			@ (mov r8, r8)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2101      	movs	r1, #1
 80067ac:	438a      	bics	r2, r1
 80067ae:	609a      	str	r2, [r3, #8]
 80067b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b6:	f383 8810 	msr	PRIMASK, r3
}
 80067ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d118      	bne.n	80067f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067c4:	f3ef 8310 	mrs	r3, PRIMASK
 80067c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80067ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067ce:	2301      	movs	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f383 8810 	msr	PRIMASK, r3
}
 80067d8:	46c0      	nop			@ (mov r8, r8)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2110      	movs	r1, #16
 80067e6:	438a      	bics	r2, r1
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f383 8810 	msr	PRIMASK, r3
}
 80067f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2280      	movs	r2, #128	@ 0x80
 80067fa:	2120      	movs	r1, #32
 80067fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800680a:	46c0      	nop			@ (mov r8, r8)
 800680c:	46bd      	mov	sp, r7
 800680e:	b00e      	add	sp, #56	@ 0x38
 8006810:	bd80      	pop	{r7, pc}
 8006812:	46c0      	nop			@ (mov r8, r8)
 8006814:	fffffedf 	.word	0xfffffedf

08006818 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006824:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	225a      	movs	r2, #90	@ 0x5a
 800682a:	2100      	movs	r1, #0
 800682c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2252      	movs	r2, #82	@ 0x52
 8006832:	2100      	movs	r1, #0
 8006834:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	0018      	movs	r0, r3
 800683a:	f7ff fc69 	bl	8006110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800683e:	46c0      	nop			@ (mov r8, r8)
 8006840:	46bd      	mov	sp, r7
 8006842:	b004      	add	sp, #16
 8006844:	bd80      	pop	{r7, pc}

08006846 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b086      	sub	sp, #24
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800684e:	f3ef 8310 	mrs	r3, PRIMASK
 8006852:	60bb      	str	r3, [r7, #8]
  return(result);
 8006854:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	2301      	movs	r3, #1
 800685a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f383 8810 	msr	PRIMASK, r3
}
 8006862:	46c0      	nop			@ (mov r8, r8)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2140      	movs	r1, #64	@ 0x40
 8006870:	438a      	bics	r2, r1
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f383 8810 	msr	PRIMASK, r3
}
 800687e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2220      	movs	r2, #32
 8006884:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	0018      	movs	r0, r3
 8006890:	f7ff fc36 	bl	8006100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006894:	46c0      	nop			@ (mov r8, r8)
 8006896:	46bd      	mov	sp, r7
 8006898:	b006      	add	sp, #24
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80068a4:	46c0      	nop			@ (mov r8, r8)
 80068a6:	46bd      	mov	sp, r7
 80068a8:	b002      	add	sp, #8
 80068aa:	bd80      	pop	{r7, pc}

080068ac <memset>:
 80068ac:	0003      	movs	r3, r0
 80068ae:	1882      	adds	r2, r0, r2
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d100      	bne.n	80068b6 <memset+0xa>
 80068b4:	4770      	bx	lr
 80068b6:	7019      	strb	r1, [r3, #0]
 80068b8:	3301      	adds	r3, #1
 80068ba:	e7f9      	b.n	80068b0 <memset+0x4>

080068bc <__libc_init_array>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	2600      	movs	r6, #0
 80068c0:	4c0c      	ldr	r4, [pc, #48]	@ (80068f4 <__libc_init_array+0x38>)
 80068c2:	4d0d      	ldr	r5, [pc, #52]	@ (80068f8 <__libc_init_array+0x3c>)
 80068c4:	1b64      	subs	r4, r4, r5
 80068c6:	10a4      	asrs	r4, r4, #2
 80068c8:	42a6      	cmp	r6, r4
 80068ca:	d109      	bne.n	80068e0 <__libc_init_array+0x24>
 80068cc:	2600      	movs	r6, #0
 80068ce:	f000 ffe3 	bl	8007898 <_init>
 80068d2:	4c0a      	ldr	r4, [pc, #40]	@ (80068fc <__libc_init_array+0x40>)
 80068d4:	4d0a      	ldr	r5, [pc, #40]	@ (8006900 <__libc_init_array+0x44>)
 80068d6:	1b64      	subs	r4, r4, r5
 80068d8:	10a4      	asrs	r4, r4, #2
 80068da:	42a6      	cmp	r6, r4
 80068dc:	d105      	bne.n	80068ea <__libc_init_array+0x2e>
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	00b3      	lsls	r3, r6, #2
 80068e2:	58eb      	ldr	r3, [r5, r3]
 80068e4:	4798      	blx	r3
 80068e6:	3601      	adds	r6, #1
 80068e8:	e7ee      	b.n	80068c8 <__libc_init_array+0xc>
 80068ea:	00b3      	lsls	r3, r6, #2
 80068ec:	58eb      	ldr	r3, [r5, r3]
 80068ee:	4798      	blx	r3
 80068f0:	3601      	adds	r6, #1
 80068f2:	e7f2      	b.n	80068da <__libc_init_array+0x1e>
 80068f4:	08007b10 	.word	0x08007b10
 80068f8:	08007b10 	.word	0x08007b10
 80068fc:	08007b14 	.word	0x08007b14
 8006900:	08007b10 	.word	0x08007b10

08006904 <sin>:
 8006904:	b530      	push	{r4, r5, lr}
 8006906:	4a1f      	ldr	r2, [pc, #124]	@ (8006984 <sin+0x80>)
 8006908:	004b      	lsls	r3, r1, #1
 800690a:	b087      	sub	sp, #28
 800690c:	085b      	lsrs	r3, r3, #1
 800690e:	4293      	cmp	r3, r2
 8006910:	d806      	bhi.n	8006920 <sin+0x1c>
 8006912:	2300      	movs	r3, #0
 8006914:	2200      	movs	r2, #0
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	2300      	movs	r3, #0
 800691a:	f000 f8f7 	bl	8006b0c <__kernel_sin>
 800691e:	e006      	b.n	800692e <sin+0x2a>
 8006920:	4a19      	ldr	r2, [pc, #100]	@ (8006988 <sin+0x84>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d905      	bls.n	8006932 <sin+0x2e>
 8006926:	0002      	movs	r2, r0
 8006928:	000b      	movs	r3, r1
 800692a:	f7fb f837 	bl	800199c <__aeabi_dsub>
 800692e:	b007      	add	sp, #28
 8006930:	bd30      	pop	{r4, r5, pc}
 8006932:	aa02      	add	r2, sp, #8
 8006934:	f000 f996 	bl	8006c64 <__ieee754_rem_pio2>
 8006938:	9c04      	ldr	r4, [sp, #16]
 800693a:	9d05      	ldr	r5, [sp, #20]
 800693c:	2303      	movs	r3, #3
 800693e:	4003      	ands	r3, r0
 8006940:	9802      	ldr	r0, [sp, #8]
 8006942:	9903      	ldr	r1, [sp, #12]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d008      	beq.n	800695a <sin+0x56>
 8006948:	2b02      	cmp	r3, #2
 800694a:	d00b      	beq.n	8006964 <sin+0x60>
 800694c:	2b00      	cmp	r3, #0
 800694e:	d113      	bne.n	8006978 <sin+0x74>
 8006950:	3301      	adds	r3, #1
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	0022      	movs	r2, r4
 8006956:	002b      	movs	r3, r5
 8006958:	e7df      	b.n	800691a <sin+0x16>
 800695a:	0022      	movs	r2, r4
 800695c:	002b      	movs	r3, r5
 800695e:	f000 f815 	bl	800698c <__kernel_cos>
 8006962:	e7e4      	b.n	800692e <sin+0x2a>
 8006964:	2301      	movs	r3, #1
 8006966:	0022      	movs	r2, r4
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	002b      	movs	r3, r5
 800696c:	f000 f8ce 	bl	8006b0c <__kernel_sin>
 8006970:	2380      	movs	r3, #128	@ 0x80
 8006972:	061b      	lsls	r3, r3, #24
 8006974:	18c9      	adds	r1, r1, r3
 8006976:	e7da      	b.n	800692e <sin+0x2a>
 8006978:	0022      	movs	r2, r4
 800697a:	002b      	movs	r3, r5
 800697c:	f000 f806 	bl	800698c <__kernel_cos>
 8006980:	e7f6      	b.n	8006970 <sin+0x6c>
 8006982:	46c0      	nop			@ (mov r8, r8)
 8006984:	3fe921fb 	.word	0x3fe921fb
 8006988:	7fefffff 	.word	0x7fefffff

0800698c <__kernel_cos>:
 800698c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800698e:	b087      	sub	sp, #28
 8006990:	9204      	str	r2, [sp, #16]
 8006992:	9305      	str	r3, [sp, #20]
 8006994:	004b      	lsls	r3, r1, #1
 8006996:	085b      	lsrs	r3, r3, #1
 8006998:	9301      	str	r3, [sp, #4]
 800699a:	23f9      	movs	r3, #249	@ 0xf9
 800699c:	9a01      	ldr	r2, [sp, #4]
 800699e:	0004      	movs	r4, r0
 80069a0:	000d      	movs	r5, r1
 80069a2:	059b      	lsls	r3, r3, #22
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d204      	bcs.n	80069b2 <__kernel_cos+0x26>
 80069a8:	f7fb fb94 	bl	80020d4 <__aeabi_d2iz>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	d100      	bne.n	80069b2 <__kernel_cos+0x26>
 80069b0:	e084      	b.n	8006abc <__kernel_cos+0x130>
 80069b2:	0022      	movs	r2, r4
 80069b4:	002b      	movs	r3, r5
 80069b6:	0020      	movs	r0, r4
 80069b8:	0029      	movs	r1, r5
 80069ba:	f7fa fd27 	bl	800140c <__aeabi_dmul>
 80069be:	2200      	movs	r2, #0
 80069c0:	4b40      	ldr	r3, [pc, #256]	@ (8006ac4 <__kernel_cos+0x138>)
 80069c2:	0006      	movs	r6, r0
 80069c4:	000f      	movs	r7, r1
 80069c6:	f7fa fd21 	bl	800140c <__aeabi_dmul>
 80069ca:	4a3f      	ldr	r2, [pc, #252]	@ (8006ac8 <__kernel_cos+0x13c>)
 80069cc:	9002      	str	r0, [sp, #8]
 80069ce:	9103      	str	r1, [sp, #12]
 80069d0:	4b3e      	ldr	r3, [pc, #248]	@ (8006acc <__kernel_cos+0x140>)
 80069d2:	0030      	movs	r0, r6
 80069d4:	0039      	movs	r1, r7
 80069d6:	f7fa fd19 	bl	800140c <__aeabi_dmul>
 80069da:	4a3d      	ldr	r2, [pc, #244]	@ (8006ad0 <__kernel_cos+0x144>)
 80069dc:	4b3d      	ldr	r3, [pc, #244]	@ (8006ad4 <__kernel_cos+0x148>)
 80069de:	f7f9 fd6d 	bl	80004bc <__aeabi_dadd>
 80069e2:	0032      	movs	r2, r6
 80069e4:	003b      	movs	r3, r7
 80069e6:	f7fa fd11 	bl	800140c <__aeabi_dmul>
 80069ea:	4a3b      	ldr	r2, [pc, #236]	@ (8006ad8 <__kernel_cos+0x14c>)
 80069ec:	4b3b      	ldr	r3, [pc, #236]	@ (8006adc <__kernel_cos+0x150>)
 80069ee:	f7fa ffd5 	bl	800199c <__aeabi_dsub>
 80069f2:	0032      	movs	r2, r6
 80069f4:	003b      	movs	r3, r7
 80069f6:	f7fa fd09 	bl	800140c <__aeabi_dmul>
 80069fa:	4a39      	ldr	r2, [pc, #228]	@ (8006ae0 <__kernel_cos+0x154>)
 80069fc:	4b39      	ldr	r3, [pc, #228]	@ (8006ae4 <__kernel_cos+0x158>)
 80069fe:	f7f9 fd5d 	bl	80004bc <__aeabi_dadd>
 8006a02:	0032      	movs	r2, r6
 8006a04:	003b      	movs	r3, r7
 8006a06:	f7fa fd01 	bl	800140c <__aeabi_dmul>
 8006a0a:	4a37      	ldr	r2, [pc, #220]	@ (8006ae8 <__kernel_cos+0x15c>)
 8006a0c:	4b37      	ldr	r3, [pc, #220]	@ (8006aec <__kernel_cos+0x160>)
 8006a0e:	f7fa ffc5 	bl	800199c <__aeabi_dsub>
 8006a12:	0032      	movs	r2, r6
 8006a14:	003b      	movs	r3, r7
 8006a16:	f7fa fcf9 	bl	800140c <__aeabi_dmul>
 8006a1a:	4a35      	ldr	r2, [pc, #212]	@ (8006af0 <__kernel_cos+0x164>)
 8006a1c:	4b35      	ldr	r3, [pc, #212]	@ (8006af4 <__kernel_cos+0x168>)
 8006a1e:	f7f9 fd4d 	bl	80004bc <__aeabi_dadd>
 8006a22:	0032      	movs	r2, r6
 8006a24:	003b      	movs	r3, r7
 8006a26:	f7fa fcf1 	bl	800140c <__aeabi_dmul>
 8006a2a:	0032      	movs	r2, r6
 8006a2c:	003b      	movs	r3, r7
 8006a2e:	f7fa fced 	bl	800140c <__aeabi_dmul>
 8006a32:	9a04      	ldr	r2, [sp, #16]
 8006a34:	9b05      	ldr	r3, [sp, #20]
 8006a36:	0006      	movs	r6, r0
 8006a38:	000f      	movs	r7, r1
 8006a3a:	0020      	movs	r0, r4
 8006a3c:	0029      	movs	r1, r5
 8006a3e:	f7fa fce5 	bl	800140c <__aeabi_dmul>
 8006a42:	0002      	movs	r2, r0
 8006a44:	000b      	movs	r3, r1
 8006a46:	0030      	movs	r0, r6
 8006a48:	0039      	movs	r1, r7
 8006a4a:	f7fa ffa7 	bl	800199c <__aeabi_dsub>
 8006a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8006af8 <__kernel_cos+0x16c>)
 8006a50:	9a01      	ldr	r2, [sp, #4]
 8006a52:	9004      	str	r0, [sp, #16]
 8006a54:	9105      	str	r1, [sp, #20]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d80d      	bhi.n	8006a76 <__kernel_cos+0xea>
 8006a5a:	0002      	movs	r2, r0
 8006a5c:	000b      	movs	r3, r1
 8006a5e:	9802      	ldr	r0, [sp, #8]
 8006a60:	9903      	ldr	r1, [sp, #12]
 8006a62:	f7fa ff9b 	bl	800199c <__aeabi_dsub>
 8006a66:	0002      	movs	r2, r0
 8006a68:	2000      	movs	r0, #0
 8006a6a:	000b      	movs	r3, r1
 8006a6c:	4923      	ldr	r1, [pc, #140]	@ (8006afc <__kernel_cos+0x170>)
 8006a6e:	f7fa ff95 	bl	800199c <__aeabi_dsub>
 8006a72:	b007      	add	sp, #28
 8006a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a76:	4b22      	ldr	r3, [pc, #136]	@ (8006b00 <__kernel_cos+0x174>)
 8006a78:	9a01      	ldr	r2, [sp, #4]
 8006a7a:	2600      	movs	r6, #0
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d81b      	bhi.n	8006ab8 <__kernel_cos+0x12c>
 8006a80:	0013      	movs	r3, r2
 8006a82:	4a20      	ldr	r2, [pc, #128]	@ (8006b04 <__kernel_cos+0x178>)
 8006a84:	4694      	mov	ip, r2
 8006a86:	4463      	add	r3, ip
 8006a88:	001f      	movs	r7, r3
 8006a8a:	0032      	movs	r2, r6
 8006a8c:	003b      	movs	r3, r7
 8006a8e:	2000      	movs	r0, #0
 8006a90:	491a      	ldr	r1, [pc, #104]	@ (8006afc <__kernel_cos+0x170>)
 8006a92:	f7fa ff83 	bl	800199c <__aeabi_dsub>
 8006a96:	0032      	movs	r2, r6
 8006a98:	0004      	movs	r4, r0
 8006a9a:	000d      	movs	r5, r1
 8006a9c:	9802      	ldr	r0, [sp, #8]
 8006a9e:	9903      	ldr	r1, [sp, #12]
 8006aa0:	003b      	movs	r3, r7
 8006aa2:	f7fa ff7b 	bl	800199c <__aeabi_dsub>
 8006aa6:	9a04      	ldr	r2, [sp, #16]
 8006aa8:	9b05      	ldr	r3, [sp, #20]
 8006aaa:	f7fa ff77 	bl	800199c <__aeabi_dsub>
 8006aae:	0002      	movs	r2, r0
 8006ab0:	000b      	movs	r3, r1
 8006ab2:	0020      	movs	r0, r4
 8006ab4:	0029      	movs	r1, r5
 8006ab6:	e7da      	b.n	8006a6e <__kernel_cos+0xe2>
 8006ab8:	4f13      	ldr	r7, [pc, #76]	@ (8006b08 <__kernel_cos+0x17c>)
 8006aba:	e7e6      	b.n	8006a8a <__kernel_cos+0xfe>
 8006abc:	2000      	movs	r0, #0
 8006abe:	490f      	ldr	r1, [pc, #60]	@ (8006afc <__kernel_cos+0x170>)
 8006ac0:	e7d7      	b.n	8006a72 <__kernel_cos+0xe6>
 8006ac2:	46c0      	nop			@ (mov r8, r8)
 8006ac4:	3fe00000 	.word	0x3fe00000
 8006ac8:	be8838d4 	.word	0xbe8838d4
 8006acc:	bda8fae9 	.word	0xbda8fae9
 8006ad0:	bdb4b1c4 	.word	0xbdb4b1c4
 8006ad4:	3e21ee9e 	.word	0x3e21ee9e
 8006ad8:	809c52ad 	.word	0x809c52ad
 8006adc:	3e927e4f 	.word	0x3e927e4f
 8006ae0:	19cb1590 	.word	0x19cb1590
 8006ae4:	3efa01a0 	.word	0x3efa01a0
 8006ae8:	16c15177 	.word	0x16c15177
 8006aec:	3f56c16c 	.word	0x3f56c16c
 8006af0:	5555554c 	.word	0x5555554c
 8006af4:	3fa55555 	.word	0x3fa55555
 8006af8:	3fd33332 	.word	0x3fd33332
 8006afc:	3ff00000 	.word	0x3ff00000
 8006b00:	3fe90000 	.word	0x3fe90000
 8006b04:	ffe00000 	.word	0xffe00000
 8006b08:	3fd20000 	.word	0x3fd20000

08006b0c <__kernel_sin>:
 8006b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b0e:	b089      	sub	sp, #36	@ 0x24
 8006b10:	9202      	str	r2, [sp, #8]
 8006b12:	9303      	str	r3, [sp, #12]
 8006b14:	22f9      	movs	r2, #249	@ 0xf9
 8006b16:	004b      	lsls	r3, r1, #1
 8006b18:	0006      	movs	r6, r0
 8006b1a:	000f      	movs	r7, r1
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	0592      	lsls	r2, r2, #22
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d203      	bcs.n	8006b2c <__kernel_sin+0x20>
 8006b24:	f7fb fad6 	bl	80020d4 <__aeabi_d2iz>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d04c      	beq.n	8006bc6 <__kernel_sin+0xba>
 8006b2c:	0032      	movs	r2, r6
 8006b2e:	003b      	movs	r3, r7
 8006b30:	0030      	movs	r0, r6
 8006b32:	0039      	movs	r1, r7
 8006b34:	f7fa fc6a 	bl	800140c <__aeabi_dmul>
 8006b38:	0004      	movs	r4, r0
 8006b3a:	000d      	movs	r5, r1
 8006b3c:	0002      	movs	r2, r0
 8006b3e:	000b      	movs	r3, r1
 8006b40:	0030      	movs	r0, r6
 8006b42:	0039      	movs	r1, r7
 8006b44:	f7fa fc62 	bl	800140c <__aeabi_dmul>
 8006b48:	4a39      	ldr	r2, [pc, #228]	@ (8006c30 <__kernel_sin+0x124>)
 8006b4a:	9000      	str	r0, [sp, #0]
 8006b4c:	9101      	str	r1, [sp, #4]
 8006b4e:	4b39      	ldr	r3, [pc, #228]	@ (8006c34 <__kernel_sin+0x128>)
 8006b50:	0020      	movs	r0, r4
 8006b52:	0029      	movs	r1, r5
 8006b54:	f7fa fc5a 	bl	800140c <__aeabi_dmul>
 8006b58:	4a37      	ldr	r2, [pc, #220]	@ (8006c38 <__kernel_sin+0x12c>)
 8006b5a:	4b38      	ldr	r3, [pc, #224]	@ (8006c3c <__kernel_sin+0x130>)
 8006b5c:	f7fa ff1e 	bl	800199c <__aeabi_dsub>
 8006b60:	0022      	movs	r2, r4
 8006b62:	002b      	movs	r3, r5
 8006b64:	f7fa fc52 	bl	800140c <__aeabi_dmul>
 8006b68:	4a35      	ldr	r2, [pc, #212]	@ (8006c40 <__kernel_sin+0x134>)
 8006b6a:	4b36      	ldr	r3, [pc, #216]	@ (8006c44 <__kernel_sin+0x138>)
 8006b6c:	f7f9 fca6 	bl	80004bc <__aeabi_dadd>
 8006b70:	0022      	movs	r2, r4
 8006b72:	002b      	movs	r3, r5
 8006b74:	f7fa fc4a 	bl	800140c <__aeabi_dmul>
 8006b78:	4a33      	ldr	r2, [pc, #204]	@ (8006c48 <__kernel_sin+0x13c>)
 8006b7a:	4b34      	ldr	r3, [pc, #208]	@ (8006c4c <__kernel_sin+0x140>)
 8006b7c:	f7fa ff0e 	bl	800199c <__aeabi_dsub>
 8006b80:	0022      	movs	r2, r4
 8006b82:	002b      	movs	r3, r5
 8006b84:	f7fa fc42 	bl	800140c <__aeabi_dmul>
 8006b88:	4b31      	ldr	r3, [pc, #196]	@ (8006c50 <__kernel_sin+0x144>)
 8006b8a:	4a32      	ldr	r2, [pc, #200]	@ (8006c54 <__kernel_sin+0x148>)
 8006b8c:	f7f9 fc96 	bl	80004bc <__aeabi_dadd>
 8006b90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b92:	9004      	str	r0, [sp, #16]
 8006b94:	9105      	str	r1, [sp, #20]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d119      	bne.n	8006bce <__kernel_sin+0xc2>
 8006b9a:	0002      	movs	r2, r0
 8006b9c:	000b      	movs	r3, r1
 8006b9e:	0020      	movs	r0, r4
 8006ba0:	0029      	movs	r1, r5
 8006ba2:	f7fa fc33 	bl	800140c <__aeabi_dmul>
 8006ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8006c58 <__kernel_sin+0x14c>)
 8006ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8006c5c <__kernel_sin+0x150>)
 8006baa:	f7fa fef7 	bl	800199c <__aeabi_dsub>
 8006bae:	9a00      	ldr	r2, [sp, #0]
 8006bb0:	9b01      	ldr	r3, [sp, #4]
 8006bb2:	f7fa fc2b 	bl	800140c <__aeabi_dmul>
 8006bb6:	0002      	movs	r2, r0
 8006bb8:	000b      	movs	r3, r1
 8006bba:	0030      	movs	r0, r6
 8006bbc:	0039      	movs	r1, r7
 8006bbe:	f7f9 fc7d 	bl	80004bc <__aeabi_dadd>
 8006bc2:	0006      	movs	r6, r0
 8006bc4:	000f      	movs	r7, r1
 8006bc6:	0030      	movs	r0, r6
 8006bc8:	0039      	movs	r1, r7
 8006bca:	b009      	add	sp, #36	@ 0x24
 8006bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bce:	2200      	movs	r2, #0
 8006bd0:	9802      	ldr	r0, [sp, #8]
 8006bd2:	9903      	ldr	r1, [sp, #12]
 8006bd4:	4b22      	ldr	r3, [pc, #136]	@ (8006c60 <__kernel_sin+0x154>)
 8006bd6:	f7fa fc19 	bl	800140c <__aeabi_dmul>
 8006bda:	9a04      	ldr	r2, [sp, #16]
 8006bdc:	9b05      	ldr	r3, [sp, #20]
 8006bde:	9006      	str	r0, [sp, #24]
 8006be0:	9107      	str	r1, [sp, #28]
 8006be2:	9800      	ldr	r0, [sp, #0]
 8006be4:	9901      	ldr	r1, [sp, #4]
 8006be6:	f7fa fc11 	bl	800140c <__aeabi_dmul>
 8006bea:	0002      	movs	r2, r0
 8006bec:	000b      	movs	r3, r1
 8006bee:	9806      	ldr	r0, [sp, #24]
 8006bf0:	9907      	ldr	r1, [sp, #28]
 8006bf2:	f7fa fed3 	bl	800199c <__aeabi_dsub>
 8006bf6:	0022      	movs	r2, r4
 8006bf8:	002b      	movs	r3, r5
 8006bfa:	f7fa fc07 	bl	800140c <__aeabi_dmul>
 8006bfe:	9a02      	ldr	r2, [sp, #8]
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	f7fa fecb 	bl	800199c <__aeabi_dsub>
 8006c06:	4a14      	ldr	r2, [pc, #80]	@ (8006c58 <__kernel_sin+0x14c>)
 8006c08:	0004      	movs	r4, r0
 8006c0a:	000d      	movs	r5, r1
 8006c0c:	9800      	ldr	r0, [sp, #0]
 8006c0e:	9901      	ldr	r1, [sp, #4]
 8006c10:	4b12      	ldr	r3, [pc, #72]	@ (8006c5c <__kernel_sin+0x150>)
 8006c12:	f7fa fbfb 	bl	800140c <__aeabi_dmul>
 8006c16:	0002      	movs	r2, r0
 8006c18:	000b      	movs	r3, r1
 8006c1a:	0020      	movs	r0, r4
 8006c1c:	0029      	movs	r1, r5
 8006c1e:	f7f9 fc4d 	bl	80004bc <__aeabi_dadd>
 8006c22:	0002      	movs	r2, r0
 8006c24:	000b      	movs	r3, r1
 8006c26:	0030      	movs	r0, r6
 8006c28:	0039      	movs	r1, r7
 8006c2a:	f7fa feb7 	bl	800199c <__aeabi_dsub>
 8006c2e:	e7c8      	b.n	8006bc2 <__kernel_sin+0xb6>
 8006c30:	5acfd57c 	.word	0x5acfd57c
 8006c34:	3de5d93a 	.word	0x3de5d93a
 8006c38:	8a2b9ceb 	.word	0x8a2b9ceb
 8006c3c:	3e5ae5e6 	.word	0x3e5ae5e6
 8006c40:	57b1fe7d 	.word	0x57b1fe7d
 8006c44:	3ec71de3 	.word	0x3ec71de3
 8006c48:	19c161d5 	.word	0x19c161d5
 8006c4c:	3f2a01a0 	.word	0x3f2a01a0
 8006c50:	3f811111 	.word	0x3f811111
 8006c54:	1110f8a6 	.word	0x1110f8a6
 8006c58:	55555549 	.word	0x55555549
 8006c5c:	3fc55555 	.word	0x3fc55555
 8006c60:	3fe00000 	.word	0x3fe00000

08006c64 <__ieee754_rem_pio2>:
 8006c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c66:	4baf      	ldr	r3, [pc, #700]	@ (8006f24 <__ieee754_rem_pio2+0x2c0>)
 8006c68:	b095      	sub	sp, #84	@ 0x54
 8006c6a:	004d      	lsls	r5, r1, #1
 8006c6c:	0017      	movs	r7, r2
 8006c6e:	910d      	str	r1, [sp, #52]	@ 0x34
 8006c70:	086d      	lsrs	r5, r5, #1
 8006c72:	429d      	cmp	r5, r3
 8006c74:	d807      	bhi.n	8006c86 <__ieee754_rem_pio2+0x22>
 8006c76:	6010      	str	r0, [r2, #0]
 8006c78:	6051      	str	r1, [r2, #4]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	60ba      	str	r2, [r7, #8]
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	2300      	movs	r3, #0
 8006c84:	e024      	b.n	8006cd0 <__ieee754_rem_pio2+0x6c>
 8006c86:	4ba8      	ldr	r3, [pc, #672]	@ (8006f28 <__ieee754_rem_pio2+0x2c4>)
 8006c88:	429d      	cmp	r5, r3
 8006c8a:	d900      	bls.n	8006c8e <__ieee754_rem_pio2+0x2a>
 8006c8c:	e072      	b.n	8006d74 <__ieee754_rem_pio2+0x110>
 8006c8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c90:	4ca6      	ldr	r4, [pc, #664]	@ (8006f2c <__ieee754_rem_pio2+0x2c8>)
 8006c92:	4aa7      	ldr	r2, [pc, #668]	@ (8006f30 <__ieee754_rem_pio2+0x2cc>)
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	dd37      	ble.n	8006d08 <__ieee754_rem_pio2+0xa4>
 8006c98:	4ba4      	ldr	r3, [pc, #656]	@ (8006f2c <__ieee754_rem_pio2+0x2c8>)
 8006c9a:	f7fa fe7f 	bl	800199c <__aeabi_dsub>
 8006c9e:	9002      	str	r0, [sp, #8]
 8006ca0:	9103      	str	r1, [sp, #12]
 8006ca2:	42a5      	cmp	r5, r4
 8006ca4:	d018      	beq.n	8006cd8 <__ieee754_rem_pio2+0x74>
 8006ca6:	4aa3      	ldr	r2, [pc, #652]	@ (8006f34 <__ieee754_rem_pio2+0x2d0>)
 8006ca8:	4ba3      	ldr	r3, [pc, #652]	@ (8006f38 <__ieee754_rem_pio2+0x2d4>)
 8006caa:	f7fa fe77 	bl	800199c <__aeabi_dsub>
 8006cae:	0002      	movs	r2, r0
 8006cb0:	000b      	movs	r3, r1
 8006cb2:	0004      	movs	r4, r0
 8006cb4:	000d      	movs	r5, r1
 8006cb6:	9802      	ldr	r0, [sp, #8]
 8006cb8:	9903      	ldr	r1, [sp, #12]
 8006cba:	f7fa fe6f 	bl	800199c <__aeabi_dsub>
 8006cbe:	4a9d      	ldr	r2, [pc, #628]	@ (8006f34 <__ieee754_rem_pio2+0x2d0>)
 8006cc0:	4b9d      	ldr	r3, [pc, #628]	@ (8006f38 <__ieee754_rem_pio2+0x2d4>)
 8006cc2:	f7fa fe6b 	bl	800199c <__aeabi_dsub>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	603c      	str	r4, [r7, #0]
 8006cca:	607d      	str	r5, [r7, #4]
 8006ccc:	60b8      	str	r0, [r7, #8]
 8006cce:	60f9      	str	r1, [r7, #12]
 8006cd0:	9302      	str	r3, [sp, #8]
 8006cd2:	9802      	ldr	r0, [sp, #8]
 8006cd4:	b015      	add	sp, #84	@ 0x54
 8006cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cd8:	22d3      	movs	r2, #211	@ 0xd3
 8006cda:	9802      	ldr	r0, [sp, #8]
 8006cdc:	9903      	ldr	r1, [sp, #12]
 8006cde:	4b96      	ldr	r3, [pc, #600]	@ (8006f38 <__ieee754_rem_pio2+0x2d4>)
 8006ce0:	0552      	lsls	r2, r2, #21
 8006ce2:	f7fa fe5b 	bl	800199c <__aeabi_dsub>
 8006ce6:	4a95      	ldr	r2, [pc, #596]	@ (8006f3c <__ieee754_rem_pio2+0x2d8>)
 8006ce8:	4b95      	ldr	r3, [pc, #596]	@ (8006f40 <__ieee754_rem_pio2+0x2dc>)
 8006cea:	9002      	str	r0, [sp, #8]
 8006cec:	9103      	str	r1, [sp, #12]
 8006cee:	f7fa fe55 	bl	800199c <__aeabi_dsub>
 8006cf2:	0002      	movs	r2, r0
 8006cf4:	000b      	movs	r3, r1
 8006cf6:	0004      	movs	r4, r0
 8006cf8:	000d      	movs	r5, r1
 8006cfa:	9802      	ldr	r0, [sp, #8]
 8006cfc:	9903      	ldr	r1, [sp, #12]
 8006cfe:	f7fa fe4d 	bl	800199c <__aeabi_dsub>
 8006d02:	4a8e      	ldr	r2, [pc, #568]	@ (8006f3c <__ieee754_rem_pio2+0x2d8>)
 8006d04:	4b8e      	ldr	r3, [pc, #568]	@ (8006f40 <__ieee754_rem_pio2+0x2dc>)
 8006d06:	e7dc      	b.n	8006cc2 <__ieee754_rem_pio2+0x5e>
 8006d08:	4b88      	ldr	r3, [pc, #544]	@ (8006f2c <__ieee754_rem_pio2+0x2c8>)
 8006d0a:	f7f9 fbd7 	bl	80004bc <__aeabi_dadd>
 8006d0e:	9002      	str	r0, [sp, #8]
 8006d10:	9103      	str	r1, [sp, #12]
 8006d12:	42a5      	cmp	r5, r4
 8006d14:	d016      	beq.n	8006d44 <__ieee754_rem_pio2+0xe0>
 8006d16:	4a87      	ldr	r2, [pc, #540]	@ (8006f34 <__ieee754_rem_pio2+0x2d0>)
 8006d18:	4b87      	ldr	r3, [pc, #540]	@ (8006f38 <__ieee754_rem_pio2+0x2d4>)
 8006d1a:	f7f9 fbcf 	bl	80004bc <__aeabi_dadd>
 8006d1e:	0002      	movs	r2, r0
 8006d20:	000b      	movs	r3, r1
 8006d22:	0004      	movs	r4, r0
 8006d24:	000d      	movs	r5, r1
 8006d26:	9802      	ldr	r0, [sp, #8]
 8006d28:	9903      	ldr	r1, [sp, #12]
 8006d2a:	f7fa fe37 	bl	800199c <__aeabi_dsub>
 8006d2e:	4a81      	ldr	r2, [pc, #516]	@ (8006f34 <__ieee754_rem_pio2+0x2d0>)
 8006d30:	4b81      	ldr	r3, [pc, #516]	@ (8006f38 <__ieee754_rem_pio2+0x2d4>)
 8006d32:	f7f9 fbc3 	bl	80004bc <__aeabi_dadd>
 8006d36:	2301      	movs	r3, #1
 8006d38:	603c      	str	r4, [r7, #0]
 8006d3a:	607d      	str	r5, [r7, #4]
 8006d3c:	60b8      	str	r0, [r7, #8]
 8006d3e:	60f9      	str	r1, [r7, #12]
 8006d40:	425b      	negs	r3, r3
 8006d42:	e7c5      	b.n	8006cd0 <__ieee754_rem_pio2+0x6c>
 8006d44:	22d3      	movs	r2, #211	@ 0xd3
 8006d46:	9802      	ldr	r0, [sp, #8]
 8006d48:	9903      	ldr	r1, [sp, #12]
 8006d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8006f38 <__ieee754_rem_pio2+0x2d4>)
 8006d4c:	0552      	lsls	r2, r2, #21
 8006d4e:	f7f9 fbb5 	bl	80004bc <__aeabi_dadd>
 8006d52:	4a7a      	ldr	r2, [pc, #488]	@ (8006f3c <__ieee754_rem_pio2+0x2d8>)
 8006d54:	4b7a      	ldr	r3, [pc, #488]	@ (8006f40 <__ieee754_rem_pio2+0x2dc>)
 8006d56:	9002      	str	r0, [sp, #8]
 8006d58:	9103      	str	r1, [sp, #12]
 8006d5a:	f7f9 fbaf 	bl	80004bc <__aeabi_dadd>
 8006d5e:	0002      	movs	r2, r0
 8006d60:	000b      	movs	r3, r1
 8006d62:	0004      	movs	r4, r0
 8006d64:	000d      	movs	r5, r1
 8006d66:	9802      	ldr	r0, [sp, #8]
 8006d68:	9903      	ldr	r1, [sp, #12]
 8006d6a:	f7fa fe17 	bl	800199c <__aeabi_dsub>
 8006d6e:	4a73      	ldr	r2, [pc, #460]	@ (8006f3c <__ieee754_rem_pio2+0x2d8>)
 8006d70:	4b73      	ldr	r3, [pc, #460]	@ (8006f40 <__ieee754_rem_pio2+0x2dc>)
 8006d72:	e7de      	b.n	8006d32 <__ieee754_rem_pio2+0xce>
 8006d74:	4b73      	ldr	r3, [pc, #460]	@ (8006f44 <__ieee754_rem_pio2+0x2e0>)
 8006d76:	429d      	cmp	r5, r3
 8006d78:	d900      	bls.n	8006d7c <__ieee754_rem_pio2+0x118>
 8006d7a:	e0c6      	b.n	8006f0a <__ieee754_rem_pio2+0x2a6>
 8006d7c:	f000 f94e 	bl	800701c <fabs>
 8006d80:	4a71      	ldr	r2, [pc, #452]	@ (8006f48 <__ieee754_rem_pio2+0x2e4>)
 8006d82:	4b72      	ldr	r3, [pc, #456]	@ (8006f4c <__ieee754_rem_pio2+0x2e8>)
 8006d84:	9004      	str	r0, [sp, #16]
 8006d86:	9105      	str	r1, [sp, #20]
 8006d88:	f7fa fb40 	bl	800140c <__aeabi_dmul>
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	4b70      	ldr	r3, [pc, #448]	@ (8006f50 <__ieee754_rem_pio2+0x2ec>)
 8006d90:	f7f9 fb94 	bl	80004bc <__aeabi_dadd>
 8006d94:	f7fb f99e 	bl	80020d4 <__aeabi_d2iz>
 8006d98:	9002      	str	r0, [sp, #8]
 8006d9a:	f7fb f9d7 	bl	800214c <__aeabi_i2d>
 8006d9e:	4a64      	ldr	r2, [pc, #400]	@ (8006f30 <__ieee754_rem_pio2+0x2cc>)
 8006da0:	4b62      	ldr	r3, [pc, #392]	@ (8006f2c <__ieee754_rem_pio2+0x2c8>)
 8006da2:	9008      	str	r0, [sp, #32]
 8006da4:	9109      	str	r1, [sp, #36]	@ 0x24
 8006da6:	f7fa fb31 	bl	800140c <__aeabi_dmul>
 8006daa:	0002      	movs	r2, r0
 8006dac:	000b      	movs	r3, r1
 8006dae:	9804      	ldr	r0, [sp, #16]
 8006db0:	9905      	ldr	r1, [sp, #20]
 8006db2:	f7fa fdf3 	bl	800199c <__aeabi_dsub>
 8006db6:	4b60      	ldr	r3, [pc, #384]	@ (8006f38 <__ieee754_rem_pio2+0x2d4>)
 8006db8:	9004      	str	r0, [sp, #16]
 8006dba:	9105      	str	r1, [sp, #20]
 8006dbc:	9808      	ldr	r0, [sp, #32]
 8006dbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006dc0:	4a5c      	ldr	r2, [pc, #368]	@ (8006f34 <__ieee754_rem_pio2+0x2d0>)
 8006dc2:	f7fa fb23 	bl	800140c <__aeabi_dmul>
 8006dc6:	9b02      	ldr	r3, [sp, #8]
 8006dc8:	9006      	str	r0, [sp, #24]
 8006dca:	9107      	str	r1, [sp, #28]
 8006dcc:	2b1f      	cmp	r3, #31
 8006dce:	dc0d      	bgt.n	8006dec <__ieee754_rem_pio2+0x188>
 8006dd0:	9a02      	ldr	r2, [sp, #8]
 8006dd2:	4b60      	ldr	r3, [pc, #384]	@ (8006f54 <__ieee754_rem_pio2+0x2f0>)
 8006dd4:	3a01      	subs	r2, #1
 8006dd6:	0092      	lsls	r2, r2, #2
 8006dd8:	58d3      	ldr	r3, [r2, r3]
 8006dda:	42ab      	cmp	r3, r5
 8006ddc:	d006      	beq.n	8006dec <__ieee754_rem_pio2+0x188>
 8006dde:	0002      	movs	r2, r0
 8006de0:	000b      	movs	r3, r1
 8006de2:	9804      	ldr	r0, [sp, #16]
 8006de4:	9905      	ldr	r1, [sp, #20]
 8006de6:	f7fa fdd9 	bl	800199c <__aeabi_dsub>
 8006dea:	e00b      	b.n	8006e04 <__ieee754_rem_pio2+0x1a0>
 8006dec:	9a06      	ldr	r2, [sp, #24]
 8006dee:	9b07      	ldr	r3, [sp, #28]
 8006df0:	9804      	ldr	r0, [sp, #16]
 8006df2:	9905      	ldr	r1, [sp, #20]
 8006df4:	f7fa fdd2 	bl	800199c <__aeabi_dsub>
 8006df8:	004b      	lsls	r3, r1, #1
 8006dfa:	152e      	asrs	r6, r5, #20
 8006dfc:	0d5b      	lsrs	r3, r3, #21
 8006dfe:	1af3      	subs	r3, r6, r3
 8006e00:	2b10      	cmp	r3, #16
 8006e02:	dc02      	bgt.n	8006e0a <__ieee754_rem_pio2+0x1a6>
 8006e04:	6038      	str	r0, [r7, #0]
 8006e06:	6079      	str	r1, [r7, #4]
 8006e08:	e039      	b.n	8006e7e <__ieee754_rem_pio2+0x21a>
 8006e0a:	22d3      	movs	r2, #211	@ 0xd3
 8006e0c:	9808      	ldr	r0, [sp, #32]
 8006e0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e10:	4b49      	ldr	r3, [pc, #292]	@ (8006f38 <__ieee754_rem_pio2+0x2d4>)
 8006e12:	0552      	lsls	r2, r2, #21
 8006e14:	f7fa fafa 	bl	800140c <__aeabi_dmul>
 8006e18:	0004      	movs	r4, r0
 8006e1a:	000d      	movs	r5, r1
 8006e1c:	0002      	movs	r2, r0
 8006e1e:	000b      	movs	r3, r1
 8006e20:	9804      	ldr	r0, [sp, #16]
 8006e22:	9905      	ldr	r1, [sp, #20]
 8006e24:	f7fa fdba 	bl	800199c <__aeabi_dsub>
 8006e28:	0002      	movs	r2, r0
 8006e2a:	000b      	movs	r3, r1
 8006e2c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e2e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006e30:	9804      	ldr	r0, [sp, #16]
 8006e32:	9905      	ldr	r1, [sp, #20]
 8006e34:	f7fa fdb2 	bl	800199c <__aeabi_dsub>
 8006e38:	0022      	movs	r2, r4
 8006e3a:	002b      	movs	r3, r5
 8006e3c:	f7fa fdae 	bl	800199c <__aeabi_dsub>
 8006e40:	0004      	movs	r4, r0
 8006e42:	000d      	movs	r5, r1
 8006e44:	9808      	ldr	r0, [sp, #32]
 8006e46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e48:	4a3c      	ldr	r2, [pc, #240]	@ (8006f3c <__ieee754_rem_pio2+0x2d8>)
 8006e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8006f40 <__ieee754_rem_pio2+0x2dc>)
 8006e4c:	f7fa fade 	bl	800140c <__aeabi_dmul>
 8006e50:	0022      	movs	r2, r4
 8006e52:	002b      	movs	r3, r5
 8006e54:	f7fa fda2 	bl	800199c <__aeabi_dsub>
 8006e58:	000b      	movs	r3, r1
 8006e5a:	0002      	movs	r2, r0
 8006e5c:	9006      	str	r0, [sp, #24]
 8006e5e:	9107      	str	r1, [sp, #28]
 8006e60:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006e62:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e64:	f7fa fd9a 	bl	800199c <__aeabi_dsub>
 8006e68:	004b      	lsls	r3, r1, #1
 8006e6a:	0d5b      	lsrs	r3, r3, #21
 8006e6c:	1af3      	subs	r3, r6, r3
 8006e6e:	2b31      	cmp	r3, #49	@ 0x31
 8006e70:	dc21      	bgt.n	8006eb6 <__ieee754_rem_pio2+0x252>
 8006e72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e74:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006e76:	6038      	str	r0, [r7, #0]
 8006e78:	6079      	str	r1, [r7, #4]
 8006e7a:	9304      	str	r3, [sp, #16]
 8006e7c:	9405      	str	r4, [sp, #20]
 8006e7e:	683c      	ldr	r4, [r7, #0]
 8006e80:	687d      	ldr	r5, [r7, #4]
 8006e82:	9804      	ldr	r0, [sp, #16]
 8006e84:	9905      	ldr	r1, [sp, #20]
 8006e86:	0022      	movs	r2, r4
 8006e88:	002b      	movs	r3, r5
 8006e8a:	f7fa fd87 	bl	800199c <__aeabi_dsub>
 8006e8e:	9a06      	ldr	r2, [sp, #24]
 8006e90:	9b07      	ldr	r3, [sp, #28]
 8006e92:	f7fa fd83 	bl	800199c <__aeabi_dsub>
 8006e96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e98:	60b8      	str	r0, [r7, #8]
 8006e9a:	60f9      	str	r1, [r7, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	db00      	blt.n	8006ea2 <__ieee754_rem_pio2+0x23e>
 8006ea0:	e717      	b.n	8006cd2 <__ieee754_rem_pio2+0x6e>
 8006ea2:	2280      	movs	r2, #128	@ 0x80
 8006ea4:	0612      	lsls	r2, r2, #24
 8006ea6:	18ab      	adds	r3, r5, r2
 8006ea8:	607b      	str	r3, [r7, #4]
 8006eaa:	188b      	adds	r3, r1, r2
 8006eac:	603c      	str	r4, [r7, #0]
 8006eae:	60b8      	str	r0, [r7, #8]
 8006eb0:	60fb      	str	r3, [r7, #12]
 8006eb2:	9b02      	ldr	r3, [sp, #8]
 8006eb4:	e744      	b.n	8006d40 <__ieee754_rem_pio2+0xdc>
 8006eb6:	22b8      	movs	r2, #184	@ 0xb8
 8006eb8:	9808      	ldr	r0, [sp, #32]
 8006eba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ebc:	4b20      	ldr	r3, [pc, #128]	@ (8006f40 <__ieee754_rem_pio2+0x2dc>)
 8006ebe:	0592      	lsls	r2, r2, #22
 8006ec0:	f7fa faa4 	bl	800140c <__aeabi_dmul>
 8006ec4:	0004      	movs	r4, r0
 8006ec6:	000d      	movs	r5, r1
 8006ec8:	0002      	movs	r2, r0
 8006eca:	000b      	movs	r3, r1
 8006ecc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006ece:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ed0:	f7fa fd64 	bl	800199c <__aeabi_dsub>
 8006ed4:	0002      	movs	r2, r0
 8006ed6:	000b      	movs	r3, r1
 8006ed8:	9004      	str	r0, [sp, #16]
 8006eda:	9105      	str	r1, [sp, #20]
 8006edc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006ede:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ee0:	f7fa fd5c 	bl	800199c <__aeabi_dsub>
 8006ee4:	0022      	movs	r2, r4
 8006ee6:	002b      	movs	r3, r5
 8006ee8:	f7fa fd58 	bl	800199c <__aeabi_dsub>
 8006eec:	0004      	movs	r4, r0
 8006eee:	000d      	movs	r5, r1
 8006ef0:	9808      	ldr	r0, [sp, #32]
 8006ef2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ef4:	4a18      	ldr	r2, [pc, #96]	@ (8006f58 <__ieee754_rem_pio2+0x2f4>)
 8006ef6:	4b19      	ldr	r3, [pc, #100]	@ (8006f5c <__ieee754_rem_pio2+0x2f8>)
 8006ef8:	f7fa fa88 	bl	800140c <__aeabi_dmul>
 8006efc:	0022      	movs	r2, r4
 8006efe:	002b      	movs	r3, r5
 8006f00:	f7fa fd4c 	bl	800199c <__aeabi_dsub>
 8006f04:	9006      	str	r0, [sp, #24]
 8006f06:	9107      	str	r1, [sp, #28]
 8006f08:	e769      	b.n	8006dde <__ieee754_rem_pio2+0x17a>
 8006f0a:	4b15      	ldr	r3, [pc, #84]	@ (8006f60 <__ieee754_rem_pio2+0x2fc>)
 8006f0c:	429d      	cmp	r5, r3
 8006f0e:	d929      	bls.n	8006f64 <__ieee754_rem_pio2+0x300>
 8006f10:	0002      	movs	r2, r0
 8006f12:	000b      	movs	r3, r1
 8006f14:	f7fa fd42 	bl	800199c <__aeabi_dsub>
 8006f18:	60b8      	str	r0, [r7, #8]
 8006f1a:	60f9      	str	r1, [r7, #12]
 8006f1c:	6038      	str	r0, [r7, #0]
 8006f1e:	6079      	str	r1, [r7, #4]
 8006f20:	e6af      	b.n	8006c82 <__ieee754_rem_pio2+0x1e>
 8006f22:	46c0      	nop			@ (mov r8, r8)
 8006f24:	3fe921fb 	.word	0x3fe921fb
 8006f28:	4002d97b 	.word	0x4002d97b
 8006f2c:	3ff921fb 	.word	0x3ff921fb
 8006f30:	54400000 	.word	0x54400000
 8006f34:	1a626331 	.word	0x1a626331
 8006f38:	3dd0b461 	.word	0x3dd0b461
 8006f3c:	2e037073 	.word	0x2e037073
 8006f40:	3ba3198a 	.word	0x3ba3198a
 8006f44:	413921fb 	.word	0x413921fb
 8006f48:	6dc9c883 	.word	0x6dc9c883
 8006f4c:	3fe45f30 	.word	0x3fe45f30
 8006f50:	3fe00000 	.word	0x3fe00000
 8006f54:	08007938 	.word	0x08007938
 8006f58:	252049c1 	.word	0x252049c1
 8006f5c:	397b839a 	.word	0x397b839a
 8006f60:	7fefffff 	.word	0x7fefffff
 8006f64:	4b2a      	ldr	r3, [pc, #168]	@ (8007010 <__ieee754_rem_pio2+0x3ac>)
 8006f66:	152e      	asrs	r6, r5, #20
 8006f68:	18f6      	adds	r6, r6, r3
 8006f6a:	0531      	lsls	r1, r6, #20
 8006f6c:	1a6b      	subs	r3, r5, r1
 8006f6e:	0019      	movs	r1, r3
 8006f70:	001d      	movs	r5, r3
 8006f72:	0004      	movs	r4, r0
 8006f74:	f7fb f8ae 	bl	80020d4 <__aeabi_d2iz>
 8006f78:	f7fb f8e8 	bl	800214c <__aeabi_i2d>
 8006f7c:	0002      	movs	r2, r0
 8006f7e:	000b      	movs	r3, r1
 8006f80:	0020      	movs	r0, r4
 8006f82:	0029      	movs	r1, r5
 8006f84:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f86:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f88:	f7fa fd08 	bl	800199c <__aeabi_dsub>
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	4b21      	ldr	r3, [pc, #132]	@ (8007014 <__ieee754_rem_pio2+0x3b0>)
 8006f90:	f7fa fa3c 	bl	800140c <__aeabi_dmul>
 8006f94:	000d      	movs	r5, r1
 8006f96:	0004      	movs	r4, r0
 8006f98:	f7fb f89c 	bl	80020d4 <__aeabi_d2iz>
 8006f9c:	f7fb f8d6 	bl	800214c <__aeabi_i2d>
 8006fa0:	0002      	movs	r2, r0
 8006fa2:	000b      	movs	r3, r1
 8006fa4:	0020      	movs	r0, r4
 8006fa6:	0029      	movs	r1, r5
 8006fa8:	9210      	str	r2, [sp, #64]	@ 0x40
 8006faa:	9311      	str	r3, [sp, #68]	@ 0x44
 8006fac:	f7fa fcf6 	bl	800199c <__aeabi_dsub>
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	4b18      	ldr	r3, [pc, #96]	@ (8007014 <__ieee754_rem_pio2+0x3b0>)
 8006fb4:	f7fa fa2a 	bl	800140c <__aeabi_dmul>
 8006fb8:	2503      	movs	r5, #3
 8006fba:	9012      	str	r0, [sp, #72]	@ 0x48
 8006fbc:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006fbe:	ac0e      	add	r4, sp, #56	@ 0x38
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	6920      	ldr	r0, [r4, #16]
 8006fc4:	6961      	ldr	r1, [r4, #20]
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	9502      	str	r5, [sp, #8]
 8006fca:	3c08      	subs	r4, #8
 8006fcc:	3d01      	subs	r5, #1
 8006fce:	f7f9 fa29 	bl	8000424 <__aeabi_dcmpeq>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d1f4      	bne.n	8006fc0 <__ieee754_rem_pio2+0x35c>
 8006fd6:	4b10      	ldr	r3, [pc, #64]	@ (8007018 <__ieee754_rem_pio2+0x3b4>)
 8006fd8:	0032      	movs	r2, r6
 8006fda:	9301      	str	r3, [sp, #4]
 8006fdc:	2302      	movs	r3, #2
 8006fde:	0039      	movs	r1, r7
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	a80e      	add	r0, sp, #56	@ 0x38
 8006fe4:	9b02      	ldr	r3, [sp, #8]
 8006fe6:	f000 f81d 	bl	8007024 <__kernel_rem_pio2>
 8006fea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fec:	9002      	str	r0, [sp, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	db00      	blt.n	8006ff4 <__ieee754_rem_pio2+0x390>
 8006ff2:	e66e      	b.n	8006cd2 <__ieee754_rem_pio2+0x6e>
 8006ff4:	2080      	movs	r0, #128	@ 0x80
 8006ff6:	6879      	ldr	r1, [r7, #4]
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	0600      	lsls	r0, r0, #24
 8006ffc:	180b      	adds	r3, r1, r0
 8006ffe:	68f9      	ldr	r1, [r7, #12]
 8007000:	603a      	str	r2, [r7, #0]
 8007002:	607b      	str	r3, [r7, #4]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	180b      	adds	r3, r1, r0
 8007008:	60ba      	str	r2, [r7, #8]
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	e751      	b.n	8006eb2 <__ieee754_rem_pio2+0x24e>
 800700e:	46c0      	nop			@ (mov r8, r8)
 8007010:	fffffbea 	.word	0xfffffbea
 8007014:	41700000 	.word	0x41700000
 8007018:	080079b8 	.word	0x080079b8

0800701c <fabs>:
 800701c:	0049      	lsls	r1, r1, #1
 800701e:	084b      	lsrs	r3, r1, #1
 8007020:	0019      	movs	r1, r3
 8007022:	4770      	bx	lr

08007024 <__kernel_rem_pio2>:
 8007024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007026:	4cc6      	ldr	r4, [pc, #792]	@ (8007340 <__kernel_rem_pio2+0x31c>)
 8007028:	44a5      	add	sp, r4
 800702a:	0014      	movs	r4, r2
 800702c:	9aa4      	ldr	r2, [sp, #656]	@ 0x290
 800702e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007030:	4bc4      	ldr	r3, [pc, #784]	@ (8007344 <__kernel_rem_pio2+0x320>)
 8007032:	0092      	lsls	r2, r2, #2
 8007034:	58d3      	ldr	r3, [r2, r3]
 8007036:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007038:	9308      	str	r3, [sp, #32]
 800703a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800703c:	9105      	str	r1, [sp, #20]
 800703e:	3b01      	subs	r3, #1
 8007040:	930d      	str	r3, [sp, #52]	@ 0x34
 8007042:	2300      	movs	r3, #0
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	0023      	movs	r3, r4
 8007048:	3314      	adds	r3, #20
 800704a:	db04      	blt.n	8007056 <__kernel_rem_pio2+0x32>
 800704c:	2118      	movs	r1, #24
 800704e:	1ee0      	subs	r0, r4, #3
 8007050:	f7f9 f8ec 	bl	800022c <__divsi3>
 8007054:	9000      	str	r0, [sp, #0]
 8007056:	9b00      	ldr	r3, [sp, #0]
 8007058:	ae26      	add	r6, sp, #152	@ 0x98
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	2318      	movs	r3, #24
 800705e:	425b      	negs	r3, r3
 8007060:	4353      	muls	r3, r2
 8007062:	191b      	adds	r3, r3, r4
 8007064:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007066:	9302      	str	r3, [sp, #8]
 8007068:	9b00      	ldr	r3, [sp, #0]
 800706a:	1a9d      	subs	r5, r3, r2
 800706c:	002c      	movs	r4, r5
 800706e:	9b08      	ldr	r3, [sp, #32]
 8007070:	189f      	adds	r7, r3, r2
 8007072:	1b63      	subs	r3, r4, r5
 8007074:	429f      	cmp	r7, r3
 8007076:	da0f      	bge.n	8007098 <__kernel_rem_pio2+0x74>
 8007078:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 800707a:	af76      	add	r7, sp, #472	@ 0x1d8
 800707c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800707e:	9a08      	ldr	r2, [sp, #32]
 8007080:	1aeb      	subs	r3, r5, r3
 8007082:	429a      	cmp	r2, r3
 8007084:	db30      	blt.n	80070e8 <__kernel_rem_pio2+0xc4>
 8007086:	00eb      	lsls	r3, r5, #3
 8007088:	aa26      	add	r2, sp, #152	@ 0x98
 800708a:	2400      	movs	r4, #0
 800708c:	189e      	adds	r6, r3, r2
 800708e:	2300      	movs	r3, #0
 8007090:	9306      	str	r3, [sp, #24]
 8007092:	9407      	str	r4, [sp, #28]
 8007094:	2400      	movs	r4, #0
 8007096:	e01e      	b.n	80070d6 <__kernel_rem_pio2+0xb2>
 8007098:	2c00      	cmp	r4, #0
 800709a:	db07      	blt.n	80070ac <__kernel_rem_pio2+0x88>
 800709c:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 800709e:	00a3      	lsls	r3, r4, #2
 80070a0:	58d0      	ldr	r0, [r2, r3]
 80070a2:	f7fb f853 	bl	800214c <__aeabi_i2d>
 80070a6:	c603      	stmia	r6!, {r0, r1}
 80070a8:	3401      	adds	r4, #1
 80070aa:	e7e2      	b.n	8007072 <__kernel_rem_pio2+0x4e>
 80070ac:	2000      	movs	r0, #0
 80070ae:	2100      	movs	r1, #0
 80070b0:	e7f9      	b.n	80070a6 <__kernel_rem_pio2+0x82>
 80070b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070b4:	00e1      	lsls	r1, r4, #3
 80070b6:	1859      	adds	r1, r3, r1
 80070b8:	6808      	ldr	r0, [r1, #0]
 80070ba:	6849      	ldr	r1, [r1, #4]
 80070bc:	6832      	ldr	r2, [r6, #0]
 80070be:	6873      	ldr	r3, [r6, #4]
 80070c0:	f7fa f9a4 	bl	800140c <__aeabi_dmul>
 80070c4:	0002      	movs	r2, r0
 80070c6:	000b      	movs	r3, r1
 80070c8:	9806      	ldr	r0, [sp, #24]
 80070ca:	9907      	ldr	r1, [sp, #28]
 80070cc:	f7f9 f9f6 	bl	80004bc <__aeabi_dadd>
 80070d0:	9006      	str	r0, [sp, #24]
 80070d2:	9107      	str	r1, [sp, #28]
 80070d4:	3401      	adds	r4, #1
 80070d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070d8:	3e08      	subs	r6, #8
 80070da:	429c      	cmp	r4, r3
 80070dc:	dde9      	ble.n	80070b2 <__kernel_rem_pio2+0x8e>
 80070de:	9b06      	ldr	r3, [sp, #24]
 80070e0:	9c07      	ldr	r4, [sp, #28]
 80070e2:	3501      	adds	r5, #1
 80070e4:	c718      	stmia	r7!, {r3, r4}
 80070e6:	e7c9      	b.n	800707c <__kernel_rem_pio2+0x58>
 80070e8:	9b08      	ldr	r3, [sp, #32]
 80070ea:	aa12      	add	r2, sp, #72	@ 0x48
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	189b      	adds	r3, r3, r2
 80070f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80070f2:	9b00      	ldr	r3, [sp, #0]
 80070f4:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	18d3      	adds	r3, r2, r3
 80070fa:	9310      	str	r3, [sp, #64]	@ 0x40
 80070fc:	9b08      	ldr	r3, [sp, #32]
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	9b00      	ldr	r3, [sp, #0]
 8007102:	aa76      	add	r2, sp, #472	@ 0x1d8
 8007104:	00db      	lsls	r3, r3, #3
 8007106:	18d3      	adds	r3, r2, r3
 8007108:	681e      	ldr	r6, [r3, #0]
 800710a:	685f      	ldr	r7, [r3, #4]
 800710c:	ab12      	add	r3, sp, #72	@ 0x48
 800710e:	001d      	movs	r5, r3
 8007110:	9c00      	ldr	r4, [sp, #0]
 8007112:	930a      	str	r3, [sp, #40]	@ 0x28
 8007114:	2c00      	cmp	r4, #0
 8007116:	dc73      	bgt.n	8007200 <__kernel_rem_pio2+0x1dc>
 8007118:	0030      	movs	r0, r6
 800711a:	0039      	movs	r1, r7
 800711c:	9a02      	ldr	r2, [sp, #8]
 800711e:	f000 fad3 	bl	80076c8 <scalbn>
 8007122:	23ff      	movs	r3, #255	@ 0xff
 8007124:	2200      	movs	r2, #0
 8007126:	059b      	lsls	r3, r3, #22
 8007128:	0004      	movs	r4, r0
 800712a:	000d      	movs	r5, r1
 800712c:	f7fa f96e 	bl	800140c <__aeabi_dmul>
 8007130:	f000 fb36 	bl	80077a0 <floor>
 8007134:	2200      	movs	r2, #0
 8007136:	4b84      	ldr	r3, [pc, #528]	@ (8007348 <__kernel_rem_pio2+0x324>)
 8007138:	f7fa f968 	bl	800140c <__aeabi_dmul>
 800713c:	0002      	movs	r2, r0
 800713e:	000b      	movs	r3, r1
 8007140:	0020      	movs	r0, r4
 8007142:	0029      	movs	r1, r5
 8007144:	f7fa fc2a 	bl	800199c <__aeabi_dsub>
 8007148:	000d      	movs	r5, r1
 800714a:	0004      	movs	r4, r0
 800714c:	f7fa ffc2 	bl	80020d4 <__aeabi_d2iz>
 8007150:	900c      	str	r0, [sp, #48]	@ 0x30
 8007152:	f7fa fffb 	bl	800214c <__aeabi_i2d>
 8007156:	000b      	movs	r3, r1
 8007158:	0002      	movs	r2, r0
 800715a:	0029      	movs	r1, r5
 800715c:	0020      	movs	r0, r4
 800715e:	f7fa fc1d 	bl	800199c <__aeabi_dsub>
 8007162:	9b02      	ldr	r3, [sp, #8]
 8007164:	0006      	movs	r6, r0
 8007166:	000f      	movs	r7, r1
 8007168:	2b00      	cmp	r3, #0
 800716a:	dd6f      	ble.n	800724c <__kernel_rem_pio2+0x228>
 800716c:	2018      	movs	r0, #24
 800716e:	9b00      	ldr	r3, [sp, #0]
 8007170:	aa12      	add	r2, sp, #72	@ 0x48
 8007172:	3b01      	subs	r3, #1
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	589a      	ldr	r2, [r3, r2]
 8007178:	9902      	ldr	r1, [sp, #8]
 800717a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800717c:	1a40      	subs	r0, r0, r1
 800717e:	0011      	movs	r1, r2
 8007180:	4101      	asrs	r1, r0
 8007182:	1864      	adds	r4, r4, r1
 8007184:	4081      	lsls	r1, r0
 8007186:	1a52      	subs	r2, r2, r1
 8007188:	a912      	add	r1, sp, #72	@ 0x48
 800718a:	505a      	str	r2, [r3, r1]
 800718c:	2317      	movs	r3, #23
 800718e:	9902      	ldr	r1, [sp, #8]
 8007190:	940c      	str	r4, [sp, #48]	@ 0x30
 8007192:	1a5b      	subs	r3, r3, r1
 8007194:	411a      	asrs	r2, r3
 8007196:	9206      	str	r2, [sp, #24]
 8007198:	9b06      	ldr	r3, [sp, #24]
 800719a:	2b00      	cmp	r3, #0
 800719c:	dd68      	ble.n	8007270 <__kernel_rem_pio2+0x24c>
 800719e:	2200      	movs	r2, #0
 80071a0:	2580      	movs	r5, #128	@ 0x80
 80071a2:	0014      	movs	r4, r2
 80071a4:	2001      	movs	r0, #1
 80071a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80071a8:	4968      	ldr	r1, [pc, #416]	@ (800734c <__kernel_rem_pio2+0x328>)
 80071aa:	3301      	adds	r3, #1
 80071ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80071ae:	046d      	lsls	r5, r5, #17
 80071b0:	9b00      	ldr	r3, [sp, #0]
 80071b2:	4293      	cmp	r3, r2
 80071b4:	dd00      	ble.n	80071b8 <__kernel_rem_pio2+0x194>
 80071b6:	e098      	b.n	80072ea <__kernel_rem_pio2+0x2c6>
 80071b8:	9b02      	ldr	r3, [sp, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	dd05      	ble.n	80071ca <__kernel_rem_pio2+0x1a6>
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d100      	bne.n	80071c4 <__kernel_rem_pio2+0x1a0>
 80071c2:	e0a4      	b.n	800730e <__kernel_rem_pio2+0x2ea>
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d100      	bne.n	80071ca <__kernel_rem_pio2+0x1a6>
 80071c8:	e0ab      	b.n	8007322 <__kernel_rem_pio2+0x2fe>
 80071ca:	9b06      	ldr	r3, [sp, #24]
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d14f      	bne.n	8007270 <__kernel_rem_pio2+0x24c>
 80071d0:	0032      	movs	r2, r6
 80071d2:	003b      	movs	r3, r7
 80071d4:	2000      	movs	r0, #0
 80071d6:	495e      	ldr	r1, [pc, #376]	@ (8007350 <__kernel_rem_pio2+0x32c>)
 80071d8:	f7fa fbe0 	bl	800199c <__aeabi_dsub>
 80071dc:	0006      	movs	r6, r0
 80071de:	000f      	movs	r7, r1
 80071e0:	2c00      	cmp	r4, #0
 80071e2:	d045      	beq.n	8007270 <__kernel_rem_pio2+0x24c>
 80071e4:	9a02      	ldr	r2, [sp, #8]
 80071e6:	2000      	movs	r0, #0
 80071e8:	4959      	ldr	r1, [pc, #356]	@ (8007350 <__kernel_rem_pio2+0x32c>)
 80071ea:	f000 fa6d 	bl	80076c8 <scalbn>
 80071ee:	0002      	movs	r2, r0
 80071f0:	000b      	movs	r3, r1
 80071f2:	0030      	movs	r0, r6
 80071f4:	0039      	movs	r1, r7
 80071f6:	f7fa fbd1 	bl	800199c <__aeabi_dsub>
 80071fa:	0006      	movs	r6, r0
 80071fc:	000f      	movs	r7, r1
 80071fe:	e037      	b.n	8007270 <__kernel_rem_pio2+0x24c>
 8007200:	2200      	movs	r2, #0
 8007202:	4b54      	ldr	r3, [pc, #336]	@ (8007354 <__kernel_rem_pio2+0x330>)
 8007204:	0030      	movs	r0, r6
 8007206:	0039      	movs	r1, r7
 8007208:	f7fa f900 	bl	800140c <__aeabi_dmul>
 800720c:	f7fa ff62 	bl	80020d4 <__aeabi_d2iz>
 8007210:	f7fa ff9c 	bl	800214c <__aeabi_i2d>
 8007214:	2200      	movs	r2, #0
 8007216:	4b50      	ldr	r3, [pc, #320]	@ (8007358 <__kernel_rem_pio2+0x334>)
 8007218:	9006      	str	r0, [sp, #24]
 800721a:	9107      	str	r1, [sp, #28]
 800721c:	f7fa f8f6 	bl	800140c <__aeabi_dmul>
 8007220:	0002      	movs	r2, r0
 8007222:	000b      	movs	r3, r1
 8007224:	0030      	movs	r0, r6
 8007226:	0039      	movs	r1, r7
 8007228:	f7fa fbb8 	bl	800199c <__aeabi_dsub>
 800722c:	f7fa ff52 	bl	80020d4 <__aeabi_d2iz>
 8007230:	3c01      	subs	r4, #1
 8007232:	aa76      	add	r2, sp, #472	@ 0x1d8
 8007234:	00e3      	lsls	r3, r4, #3
 8007236:	18d3      	adds	r3, r2, r3
 8007238:	c501      	stmia	r5!, {r0}
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	9806      	ldr	r0, [sp, #24]
 8007240:	9907      	ldr	r1, [sp, #28]
 8007242:	f7f9 f93b 	bl	80004bc <__aeabi_dadd>
 8007246:	0006      	movs	r6, r0
 8007248:	000f      	movs	r7, r1
 800724a:	e763      	b.n	8007114 <__kernel_rem_pio2+0xf0>
 800724c:	9b02      	ldr	r3, [sp, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d107      	bne.n	8007262 <__kernel_rem_pio2+0x23e>
 8007252:	9b00      	ldr	r3, [sp, #0]
 8007254:	aa12      	add	r2, sp, #72	@ 0x48
 8007256:	3b01      	subs	r3, #1
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	589b      	ldr	r3, [r3, r2]
 800725c:	15db      	asrs	r3, r3, #23
 800725e:	9306      	str	r3, [sp, #24]
 8007260:	e79a      	b.n	8007198 <__kernel_rem_pio2+0x174>
 8007262:	2200      	movs	r2, #0
 8007264:	4b3d      	ldr	r3, [pc, #244]	@ (800735c <__kernel_rem_pio2+0x338>)
 8007266:	f7f9 f901 	bl	800046c <__aeabi_dcmpge>
 800726a:	2800      	cmp	r0, #0
 800726c:	d13a      	bne.n	80072e4 <__kernel_rem_pio2+0x2c0>
 800726e:	9006      	str	r0, [sp, #24]
 8007270:	2200      	movs	r2, #0
 8007272:	2300      	movs	r3, #0
 8007274:	0030      	movs	r0, r6
 8007276:	0039      	movs	r1, r7
 8007278:	f7f9 f8d4 	bl	8000424 <__aeabi_dcmpeq>
 800727c:	2800      	cmp	r0, #0
 800727e:	d100      	bne.n	8007282 <__kernel_rem_pio2+0x25e>
 8007280:	e0b5      	b.n	80073ee <__kernel_rem_pio2+0x3ca>
 8007282:	2200      	movs	r2, #0
 8007284:	9b00      	ldr	r3, [sp, #0]
 8007286:	3b01      	subs	r3, #1
 8007288:	9908      	ldr	r1, [sp, #32]
 800728a:	428b      	cmp	r3, r1
 800728c:	da51      	bge.n	8007332 <__kernel_rem_pio2+0x30e>
 800728e:	2a00      	cmp	r2, #0
 8007290:	d100      	bne.n	8007294 <__kernel_rem_pio2+0x270>
 8007292:	e096      	b.n	80073c2 <__kernel_rem_pio2+0x39e>
 8007294:	9b00      	ldr	r3, [sp, #0]
 8007296:	aa12      	add	r2, sp, #72	@ 0x48
 8007298:	3b01      	subs	r3, #1
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	9b02      	ldr	r3, [sp, #8]
 800729e:	3b18      	subs	r3, #24
 80072a0:	9302      	str	r3, [sp, #8]
 80072a2:	9b00      	ldr	r3, [sp, #0]
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	589b      	ldr	r3, [r3, r2]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0f3      	beq.n	8007294 <__kernel_rem_pio2+0x270>
 80072ac:	2000      	movs	r0, #0
 80072ae:	9a02      	ldr	r2, [sp, #8]
 80072b0:	4927      	ldr	r1, [pc, #156]	@ (8007350 <__kernel_rem_pio2+0x32c>)
 80072b2:	f000 fa09 	bl	80076c8 <scalbn>
 80072b6:	0004      	movs	r4, r0
 80072b8:	000d      	movs	r5, r1
 80072ba:	9e00      	ldr	r6, [sp, #0]
 80072bc:	2e00      	cmp	r6, #0
 80072be:	db00      	blt.n	80072c2 <__kernel_rem_pio2+0x29e>
 80072c0:	e0d2      	b.n	8007468 <__kernel_rem_pio2+0x444>
 80072c2:	4b27      	ldr	r3, [pc, #156]	@ (8007360 <__kernel_rem_pio2+0x33c>)
 80072c4:	9c00      	ldr	r4, [sp, #0]
 80072c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80072c8:	2c00      	cmp	r4, #0
 80072ca:	da00      	bge.n	80072ce <__kernel_rem_pio2+0x2aa>
 80072cc:	e103      	b.n	80074d6 <__kernel_rem_pio2+0x4b2>
 80072ce:	00e3      	lsls	r3, r4, #3
 80072d0:	aa76      	add	r2, sp, #472	@ 0x1d8
 80072d2:	189f      	adds	r7, r3, r2
 80072d4:	2300      	movs	r3, #0
 80072d6:	2200      	movs	r2, #0
 80072d8:	9202      	str	r2, [sp, #8]
 80072da:	9303      	str	r3, [sp, #12]
 80072dc:	9b00      	ldr	r3, [sp, #0]
 80072de:	2500      	movs	r5, #0
 80072e0:	1b1e      	subs	r6, r3, r4
 80072e2:	e0ea      	b.n	80074ba <__kernel_rem_pio2+0x496>
 80072e4:	2302      	movs	r3, #2
 80072e6:	9306      	str	r3, [sp, #24]
 80072e8:	e759      	b.n	800719e <__kernel_rem_pio2+0x17a>
 80072ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2c00      	cmp	r4, #0
 80072f0:	d10b      	bne.n	800730a <__kernel_rem_pio2+0x2e6>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <__kernel_rem_pio2+0x2da>
 80072f6:	1aeb      	subs	r3, r5, r3
 80072f8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072fa:	6023      	str	r3, [r4, #0]
 80072fc:	0003      	movs	r3, r0
 80072fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007300:	3201      	adds	r2, #1
 8007302:	3404      	adds	r4, #4
 8007304:	940a      	str	r4, [sp, #40]	@ 0x28
 8007306:	001c      	movs	r4, r3
 8007308:	e752      	b.n	80071b0 <__kernel_rem_pio2+0x18c>
 800730a:	1acb      	subs	r3, r1, r3
 800730c:	e7f4      	b.n	80072f8 <__kernel_rem_pio2+0x2d4>
 800730e:	9b00      	ldr	r3, [sp, #0]
 8007310:	aa12      	add	r2, sp, #72	@ 0x48
 8007312:	3b01      	subs	r3, #1
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	589a      	ldr	r2, [r3, r2]
 8007318:	0252      	lsls	r2, r2, #9
 800731a:	0a52      	lsrs	r2, r2, #9
 800731c:	a912      	add	r1, sp, #72	@ 0x48
 800731e:	505a      	str	r2, [r3, r1]
 8007320:	e753      	b.n	80071ca <__kernel_rem_pio2+0x1a6>
 8007322:	9b00      	ldr	r3, [sp, #0]
 8007324:	aa12      	add	r2, sp, #72	@ 0x48
 8007326:	3b01      	subs	r3, #1
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	589a      	ldr	r2, [r3, r2]
 800732c:	0292      	lsls	r2, r2, #10
 800732e:	0a92      	lsrs	r2, r2, #10
 8007330:	e7f4      	b.n	800731c <__kernel_rem_pio2+0x2f8>
 8007332:	0099      	lsls	r1, r3, #2
 8007334:	a812      	add	r0, sp, #72	@ 0x48
 8007336:	5809      	ldr	r1, [r1, r0]
 8007338:	3b01      	subs	r3, #1
 800733a:	430a      	orrs	r2, r1
 800733c:	e7a4      	b.n	8007288 <__kernel_rem_pio2+0x264>
 800733e:	46c0      	nop			@ (mov r8, r8)
 8007340:	fffffd84 	.word	0xfffffd84
 8007344:	08007b00 	.word	0x08007b00
 8007348:	40200000 	.word	0x40200000
 800734c:	00ffffff 	.word	0x00ffffff
 8007350:	3ff00000 	.word	0x3ff00000
 8007354:	3e700000 	.word	0x3e700000
 8007358:	41700000 	.word	0x41700000
 800735c:	3fe00000 	.word	0x3fe00000
 8007360:	08007ac0 	.word	0x08007ac0
 8007364:	3301      	adds	r3, #1
 8007366:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007368:	009a      	lsls	r2, r3, #2
 800736a:	4252      	negs	r2, r2
 800736c:	588a      	ldr	r2, [r1, r2]
 800736e:	2a00      	cmp	r2, #0
 8007370:	d0f8      	beq.n	8007364 <__kernel_rem_pio2+0x340>
 8007372:	9a00      	ldr	r2, [sp, #0]
 8007374:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007376:	1c55      	adds	r5, r2, #1
 8007378:	1852      	adds	r2, r2, r1
 800737a:	00d2      	lsls	r2, r2, #3
 800737c:	a926      	add	r1, sp, #152	@ 0x98
 800737e:	188c      	adds	r4, r1, r2
 8007380:	9a00      	ldr	r2, [sp, #0]
 8007382:	18d3      	adds	r3, r2, r3
 8007384:	9306      	str	r3, [sp, #24]
 8007386:	9b06      	ldr	r3, [sp, #24]
 8007388:	42ab      	cmp	r3, r5
 800738a:	da00      	bge.n	800738e <__kernel_rem_pio2+0x36a>
 800738c:	e6b7      	b.n	80070fe <__kernel_rem_pio2+0xda>
 800738e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007390:	00ab      	lsls	r3, r5, #2
 8007392:	58d0      	ldr	r0, [r2, r3]
 8007394:	f7fa feda 	bl	800214c <__aeabi_i2d>
 8007398:	2200      	movs	r2, #0
 800739a:	2300      	movs	r3, #0
 800739c:	0027      	movs	r7, r4
 800739e:	2600      	movs	r6, #0
 80073a0:	6020      	str	r0, [r4, #0]
 80073a2:	6061      	str	r1, [r4, #4]
 80073a4:	9200      	str	r2, [sp, #0]
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073aa:	429e      	cmp	r6, r3
 80073ac:	dd0b      	ble.n	80073c6 <__kernel_rem_pio2+0x3a2>
 80073ae:	00eb      	lsls	r3, r5, #3
 80073b0:	aa76      	add	r2, sp, #472	@ 0x1d8
 80073b2:	18d3      	adds	r3, r2, r3
 80073b4:	3501      	adds	r5, #1
 80073b6:	9900      	ldr	r1, [sp, #0]
 80073b8:	9a01      	ldr	r2, [sp, #4]
 80073ba:	3408      	adds	r4, #8
 80073bc:	6019      	str	r1, [r3, #0]
 80073be:	605a      	str	r2, [r3, #4]
 80073c0:	e7e1      	b.n	8007386 <__kernel_rem_pio2+0x362>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e7cf      	b.n	8007366 <__kernel_rem_pio2+0x342>
 80073c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073c8:	00f1      	lsls	r1, r6, #3
 80073ca:	1859      	adds	r1, r3, r1
 80073cc:	6808      	ldr	r0, [r1, #0]
 80073ce:	6849      	ldr	r1, [r1, #4]
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f7fa f81a 	bl	800140c <__aeabi_dmul>
 80073d8:	0002      	movs	r2, r0
 80073da:	000b      	movs	r3, r1
 80073dc:	9800      	ldr	r0, [sp, #0]
 80073de:	9901      	ldr	r1, [sp, #4]
 80073e0:	f7f9 f86c 	bl	80004bc <__aeabi_dadd>
 80073e4:	3601      	adds	r6, #1
 80073e6:	9000      	str	r0, [sp, #0]
 80073e8:	9101      	str	r1, [sp, #4]
 80073ea:	3f08      	subs	r7, #8
 80073ec:	e7dc      	b.n	80073a8 <__kernel_rem_pio2+0x384>
 80073ee:	9b02      	ldr	r3, [sp, #8]
 80073f0:	0030      	movs	r0, r6
 80073f2:	425a      	negs	r2, r3
 80073f4:	0039      	movs	r1, r7
 80073f6:	f000 f967 	bl	80076c8 <scalbn>
 80073fa:	2200      	movs	r2, #0
 80073fc:	4bb0      	ldr	r3, [pc, #704]	@ (80076c0 <__kernel_rem_pio2+0x69c>)
 80073fe:	0006      	movs	r6, r0
 8007400:	000f      	movs	r7, r1
 8007402:	f7f9 f833 	bl	800046c <__aeabi_dcmpge>
 8007406:	2800      	cmp	r0, #0
 8007408:	d025      	beq.n	8007456 <__kernel_rem_pio2+0x432>
 800740a:	2200      	movs	r2, #0
 800740c:	4bad      	ldr	r3, [pc, #692]	@ (80076c4 <__kernel_rem_pio2+0x6a0>)
 800740e:	0030      	movs	r0, r6
 8007410:	0039      	movs	r1, r7
 8007412:	f7f9 fffb 	bl	800140c <__aeabi_dmul>
 8007416:	f7fa fe5d 	bl	80020d4 <__aeabi_d2iz>
 800741a:	9b00      	ldr	r3, [sp, #0]
 800741c:	0004      	movs	r4, r0
 800741e:	009d      	lsls	r5, r3, #2
 8007420:	f7fa fe94 	bl	800214c <__aeabi_i2d>
 8007424:	2200      	movs	r2, #0
 8007426:	4ba6      	ldr	r3, [pc, #664]	@ (80076c0 <__kernel_rem_pio2+0x69c>)
 8007428:	f7f9 fff0 	bl	800140c <__aeabi_dmul>
 800742c:	0002      	movs	r2, r0
 800742e:	000b      	movs	r3, r1
 8007430:	0030      	movs	r0, r6
 8007432:	0039      	movs	r1, r7
 8007434:	f7fa fab2 	bl	800199c <__aeabi_dsub>
 8007438:	f7fa fe4c 	bl	80020d4 <__aeabi_d2iz>
 800743c:	ab12      	add	r3, sp, #72	@ 0x48
 800743e:	5158      	str	r0, [r3, r5]
 8007440:	9b00      	ldr	r3, [sp, #0]
 8007442:	aa12      	add	r2, sp, #72	@ 0x48
 8007444:	3301      	adds	r3, #1
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	9b02      	ldr	r3, [sp, #8]
 800744a:	3318      	adds	r3, #24
 800744c:	9302      	str	r3, [sp, #8]
 800744e:	9b00      	ldr	r3, [sp, #0]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	509c      	str	r4, [r3, r2]
 8007454:	e72a      	b.n	80072ac <__kernel_rem_pio2+0x288>
 8007456:	9b00      	ldr	r3, [sp, #0]
 8007458:	0030      	movs	r0, r6
 800745a:	0039      	movs	r1, r7
 800745c:	009c      	lsls	r4, r3, #2
 800745e:	f7fa fe39 	bl	80020d4 <__aeabi_d2iz>
 8007462:	ab12      	add	r3, sp, #72	@ 0x48
 8007464:	5118      	str	r0, [r3, r4]
 8007466:	e721      	b.n	80072ac <__kernel_rem_pio2+0x288>
 8007468:	00f3      	lsls	r3, r6, #3
 800746a:	aa76      	add	r2, sp, #472	@ 0x1d8
 800746c:	18d7      	adds	r7, r2, r3
 800746e:	00b3      	lsls	r3, r6, #2
 8007470:	aa12      	add	r2, sp, #72	@ 0x48
 8007472:	5898      	ldr	r0, [r3, r2]
 8007474:	f7fa fe6a 	bl	800214c <__aeabi_i2d>
 8007478:	0022      	movs	r2, r4
 800747a:	002b      	movs	r3, r5
 800747c:	f7f9 ffc6 	bl	800140c <__aeabi_dmul>
 8007480:	2200      	movs	r2, #0
 8007482:	6038      	str	r0, [r7, #0]
 8007484:	6079      	str	r1, [r7, #4]
 8007486:	4b8f      	ldr	r3, [pc, #572]	@ (80076c4 <__kernel_rem_pio2+0x6a0>)
 8007488:	0020      	movs	r0, r4
 800748a:	0029      	movs	r1, r5
 800748c:	f7f9 ffbe 	bl	800140c <__aeabi_dmul>
 8007490:	3e01      	subs	r6, #1
 8007492:	0004      	movs	r4, r0
 8007494:	000d      	movs	r5, r1
 8007496:	e711      	b.n	80072bc <__kernel_rem_pio2+0x298>
 8007498:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800749a:	00e9      	lsls	r1, r5, #3
 800749c:	18c9      	adds	r1, r1, r3
 800749e:	6808      	ldr	r0, [r1, #0]
 80074a0:	6849      	ldr	r1, [r1, #4]
 80074a2:	cf0c      	ldmia	r7!, {r2, r3}
 80074a4:	f7f9 ffb2 	bl	800140c <__aeabi_dmul>
 80074a8:	0002      	movs	r2, r0
 80074aa:	000b      	movs	r3, r1
 80074ac:	9802      	ldr	r0, [sp, #8]
 80074ae:	9903      	ldr	r1, [sp, #12]
 80074b0:	f7f9 f804 	bl	80004bc <__aeabi_dadd>
 80074b4:	9002      	str	r0, [sp, #8]
 80074b6:	9103      	str	r1, [sp, #12]
 80074b8:	3501      	adds	r5, #1
 80074ba:	9b08      	ldr	r3, [sp, #32]
 80074bc:	429d      	cmp	r5, r3
 80074be:	dc01      	bgt.n	80074c4 <__kernel_rem_pio2+0x4a0>
 80074c0:	42ae      	cmp	r6, r5
 80074c2:	dae9      	bge.n	8007498 <__kernel_rem_pio2+0x474>
 80074c4:	00f6      	lsls	r6, r6, #3
 80074c6:	ab4e      	add	r3, sp, #312	@ 0x138
 80074c8:	199b      	adds	r3, r3, r6
 80074ca:	9902      	ldr	r1, [sp, #8]
 80074cc:	9a03      	ldr	r2, [sp, #12]
 80074ce:	3c01      	subs	r4, #1
 80074d0:	6019      	str	r1, [r3, #0]
 80074d2:	605a      	str	r2, [r3, #4]
 80074d4:	e6f8      	b.n	80072c8 <__kernel_rem_pio2+0x2a4>
 80074d6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80074d8:	2b02      	cmp	r3, #2
 80074da:	dc0b      	bgt.n	80074f4 <__kernel_rem_pio2+0x4d0>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	dd00      	ble.n	80074e2 <__kernel_rem_pio2+0x4be>
 80074e0:	e084      	b.n	80075ec <__kernel_rem_pio2+0x5c8>
 80074e2:	d052      	beq.n	800758a <__kernel_rem_pio2+0x566>
 80074e4:	2007      	movs	r0, #7
 80074e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074e8:	4003      	ands	r3, r0
 80074ea:	0018      	movs	r0, r3
 80074ec:	239f      	movs	r3, #159	@ 0x9f
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	449d      	add	sp, r3
 80074f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074f4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d1f4      	bne.n	80074e4 <__kernel_rem_pio2+0x4c0>
 80074fa:	9b00      	ldr	r3, [sp, #0]
 80074fc:	aa4e      	add	r2, sp, #312	@ 0x138
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	18d4      	adds	r4, r2, r3
 8007502:	0025      	movs	r5, r4
 8007504:	9b00      	ldr	r3, [sp, #0]
 8007506:	9302      	str	r3, [sp, #8]
 8007508:	9b02      	ldr	r3, [sp, #8]
 800750a:	3d08      	subs	r5, #8
 800750c:	2b00      	cmp	r3, #0
 800750e:	dd00      	ble.n	8007512 <__kernel_rem_pio2+0x4ee>
 8007510:	e07a      	b.n	8007608 <__kernel_rem_pio2+0x5e4>
 8007512:	9d00      	ldr	r5, [sp, #0]
 8007514:	3c08      	subs	r4, #8
 8007516:	2d01      	cmp	r5, #1
 8007518:	dd00      	ble.n	800751c <__kernel_rem_pio2+0x4f8>
 800751a:	e095      	b.n	8007648 <__kernel_rem_pio2+0x624>
 800751c:	2000      	movs	r0, #0
 800751e:	2100      	movs	r1, #0
 8007520:	9b00      	ldr	r3, [sp, #0]
 8007522:	2b01      	cmp	r3, #1
 8007524:	dd00      	ble.n	8007528 <__kernel_rem_pio2+0x504>
 8007526:	e0ad      	b.n	8007684 <__kernel_rem_pio2+0x660>
 8007528:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 800752a:	9c4f      	ldr	r4, [sp, #316]	@ 0x13c
 800752c:	9e50      	ldr	r6, [sp, #320]	@ 0x140
 800752e:	9f51      	ldr	r7, [sp, #324]	@ 0x144
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	9401      	str	r4, [sp, #4]
 8007534:	9b06      	ldr	r3, [sp, #24]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d000      	beq.n	800753c <__kernel_rem_pio2+0x518>
 800753a:	e0af      	b.n	800769c <__kernel_rem_pio2+0x678>
 800753c:	9c00      	ldr	r4, [sp, #0]
 800753e:	9d01      	ldr	r5, [sp, #4]
 8007540:	9b05      	ldr	r3, [sp, #20]
 8007542:	601c      	str	r4, [r3, #0]
 8007544:	605d      	str	r5, [r3, #4]
 8007546:	609e      	str	r6, [r3, #8]
 8007548:	60df      	str	r7, [r3, #12]
 800754a:	6118      	str	r0, [r3, #16]
 800754c:	6159      	str	r1, [r3, #20]
 800754e:	e7c9      	b.n	80074e4 <__kernel_rem_pio2+0x4c0>
 8007550:	9b00      	ldr	r3, [sp, #0]
 8007552:	aa4e      	add	r2, sp, #312	@ 0x138
 8007554:	00db      	lsls	r3, r3, #3
 8007556:	18d3      	adds	r3, r2, r3
 8007558:	0020      	movs	r0, r4
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	0029      	movs	r1, r5
 8007560:	f7f8 ffac 	bl	80004bc <__aeabi_dadd>
 8007564:	0004      	movs	r4, r0
 8007566:	000d      	movs	r5, r1
 8007568:	9b00      	ldr	r3, [sp, #0]
 800756a:	3b01      	subs	r3, #1
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	9b00      	ldr	r3, [sp, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	daed      	bge.n	8007550 <__kernel_rem_pio2+0x52c>
 8007574:	9b06      	ldr	r3, [sp, #24]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <__kernel_rem_pio2+0x55e>
 800757a:	2180      	movs	r1, #128	@ 0x80
 800757c:	0609      	lsls	r1, r1, #24
 800757e:	186b      	adds	r3, r5, r1
 8007580:	001d      	movs	r5, r3
 8007582:	9b05      	ldr	r3, [sp, #20]
 8007584:	601c      	str	r4, [r3, #0]
 8007586:	605d      	str	r5, [r3, #4]
 8007588:	e7ac      	b.n	80074e4 <__kernel_rem_pio2+0x4c0>
 800758a:	2400      	movs	r4, #0
 800758c:	2500      	movs	r5, #0
 800758e:	e7ee      	b.n	800756e <__kernel_rem_pio2+0x54a>
 8007590:	00e3      	lsls	r3, r4, #3
 8007592:	aa4e      	add	r2, sp, #312	@ 0x138
 8007594:	18d3      	adds	r3, r2, r3
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f7f8 ff8f 	bl	80004bc <__aeabi_dadd>
 800759e:	3c01      	subs	r4, #1
 80075a0:	2c00      	cmp	r4, #0
 80075a2:	daf5      	bge.n	8007590 <__kernel_rem_pio2+0x56c>
 80075a4:	9c06      	ldr	r4, [sp, #24]
 80075a6:	0002      	movs	r2, r0
 80075a8:	000b      	movs	r3, r1
 80075aa:	2c00      	cmp	r4, #0
 80075ac:	d002      	beq.n	80075b4 <__kernel_rem_pio2+0x590>
 80075ae:	2480      	movs	r4, #128	@ 0x80
 80075b0:	0624      	lsls	r4, r4, #24
 80075b2:	190b      	adds	r3, r1, r4
 80075b4:	9c05      	ldr	r4, [sp, #20]
 80075b6:	2501      	movs	r5, #1
 80075b8:	6022      	str	r2, [r4, #0]
 80075ba:	6063      	str	r3, [r4, #4]
 80075bc:	0002      	movs	r2, r0
 80075be:	000b      	movs	r3, r1
 80075c0:	984e      	ldr	r0, [sp, #312]	@ 0x138
 80075c2:	994f      	ldr	r1, [sp, #316]	@ 0x13c
 80075c4:	f7fa f9ea 	bl	800199c <__aeabi_dsub>
 80075c8:	0006      	movs	r6, r0
 80075ca:	000f      	movs	r7, r1
 80075cc:	ac4e      	add	r4, sp, #312	@ 0x138
 80075ce:	9b00      	ldr	r3, [sp, #0]
 80075d0:	3408      	adds	r4, #8
 80075d2:	42ab      	cmp	r3, r5
 80075d4:	da0e      	bge.n	80075f4 <__kernel_rem_pio2+0x5d0>
 80075d6:	9b06      	ldr	r3, [sp, #24]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <__kernel_rem_pio2+0x5c0>
 80075dc:	2180      	movs	r1, #128	@ 0x80
 80075de:	0609      	lsls	r1, r1, #24
 80075e0:	187b      	adds	r3, r7, r1
 80075e2:	001f      	movs	r7, r3
 80075e4:	9b05      	ldr	r3, [sp, #20]
 80075e6:	609e      	str	r6, [r3, #8]
 80075e8:	60df      	str	r7, [r3, #12]
 80075ea:	e77b      	b.n	80074e4 <__kernel_rem_pio2+0x4c0>
 80075ec:	2000      	movs	r0, #0
 80075ee:	2100      	movs	r1, #0
 80075f0:	9c00      	ldr	r4, [sp, #0]
 80075f2:	e7d5      	b.n	80075a0 <__kernel_rem_pio2+0x57c>
 80075f4:	0030      	movs	r0, r6
 80075f6:	6822      	ldr	r2, [r4, #0]
 80075f8:	6863      	ldr	r3, [r4, #4]
 80075fa:	0039      	movs	r1, r7
 80075fc:	f7f8 ff5e 	bl	80004bc <__aeabi_dadd>
 8007600:	3501      	adds	r5, #1
 8007602:	0006      	movs	r6, r0
 8007604:	000f      	movs	r7, r1
 8007606:	e7e2      	b.n	80075ce <__kernel_rem_pio2+0x5aa>
 8007608:	9b02      	ldr	r3, [sp, #8]
 800760a:	3b01      	subs	r3, #1
 800760c:	9302      	str	r3, [sp, #8]
 800760e:	682a      	ldr	r2, [r5, #0]
 8007610:	686b      	ldr	r3, [r5, #4]
 8007612:	9208      	str	r2, [sp, #32]
 8007614:	9309      	str	r3, [sp, #36]	@ 0x24
 8007616:	9808      	ldr	r0, [sp, #32]
 8007618:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800761a:	68aa      	ldr	r2, [r5, #8]
 800761c:	68eb      	ldr	r3, [r5, #12]
 800761e:	920a      	str	r2, [sp, #40]	@ 0x28
 8007620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007622:	f7f8 ff4b 	bl	80004bc <__aeabi_dadd>
 8007626:	0002      	movs	r2, r0
 8007628:	000b      	movs	r3, r1
 800762a:	0006      	movs	r6, r0
 800762c:	000f      	movs	r7, r1
 800762e:	9808      	ldr	r0, [sp, #32]
 8007630:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007632:	f7fa f9b3 	bl	800199c <__aeabi_dsub>
 8007636:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007638:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800763a:	f7f8 ff3f 	bl	80004bc <__aeabi_dadd>
 800763e:	602e      	str	r6, [r5, #0]
 8007640:	606f      	str	r7, [r5, #4]
 8007642:	60a8      	str	r0, [r5, #8]
 8007644:	60e9      	str	r1, [r5, #12]
 8007646:	e75f      	b.n	8007508 <__kernel_rem_pio2+0x4e4>
 8007648:	6822      	ldr	r2, [r4, #0]
 800764a:	6863      	ldr	r3, [r4, #4]
 800764c:	9202      	str	r2, [sp, #8]
 800764e:	9303      	str	r3, [sp, #12]
 8007650:	9802      	ldr	r0, [sp, #8]
 8007652:	9903      	ldr	r1, [sp, #12]
 8007654:	68a2      	ldr	r2, [r4, #8]
 8007656:	68e3      	ldr	r3, [r4, #12]
 8007658:	9208      	str	r2, [sp, #32]
 800765a:	9309      	str	r3, [sp, #36]	@ 0x24
 800765c:	f7f8 ff2e 	bl	80004bc <__aeabi_dadd>
 8007660:	0002      	movs	r2, r0
 8007662:	000b      	movs	r3, r1
 8007664:	0006      	movs	r6, r0
 8007666:	000f      	movs	r7, r1
 8007668:	9802      	ldr	r0, [sp, #8]
 800766a:	9903      	ldr	r1, [sp, #12]
 800766c:	f7fa f996 	bl	800199c <__aeabi_dsub>
 8007670:	9a08      	ldr	r2, [sp, #32]
 8007672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007674:	f7f8 ff22 	bl	80004bc <__aeabi_dadd>
 8007678:	3d01      	subs	r5, #1
 800767a:	60a0      	str	r0, [r4, #8]
 800767c:	60e1      	str	r1, [r4, #12]
 800767e:	6026      	str	r6, [r4, #0]
 8007680:	6067      	str	r7, [r4, #4]
 8007682:	e747      	b.n	8007514 <__kernel_rem_pio2+0x4f0>
 8007684:	9b00      	ldr	r3, [sp, #0]
 8007686:	aa4e      	add	r2, sp, #312	@ 0x138
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	18d3      	adds	r3, r2, r3
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f7f8 ff14 	bl	80004bc <__aeabi_dadd>
 8007694:	9b00      	ldr	r3, [sp, #0]
 8007696:	3b01      	subs	r3, #1
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	e741      	b.n	8007520 <__kernel_rem_pio2+0x4fc>
 800769c:	9c00      	ldr	r4, [sp, #0]
 800769e:	9b05      	ldr	r3, [sp, #20]
 80076a0:	9a01      	ldr	r2, [sp, #4]
 80076a2:	601c      	str	r4, [r3, #0]
 80076a4:	2380      	movs	r3, #128	@ 0x80
 80076a6:	061b      	lsls	r3, r3, #24
 80076a8:	18d4      	adds	r4, r2, r3
 80076aa:	9a05      	ldr	r2, [sp, #20]
 80076ac:	6054      	str	r4, [r2, #4]
 80076ae:	001a      	movs	r2, r3
 80076b0:	9c05      	ldr	r4, [sp, #20]
 80076b2:	18fb      	adds	r3, r7, r3
 80076b4:	60e3      	str	r3, [r4, #12]
 80076b6:	188b      	adds	r3, r1, r2
 80076b8:	60a6      	str	r6, [r4, #8]
 80076ba:	6120      	str	r0, [r4, #16]
 80076bc:	6163      	str	r3, [r4, #20]
 80076be:	e711      	b.n	80074e4 <__kernel_rem_pio2+0x4c0>
 80076c0:	41700000 	.word	0x41700000
 80076c4:	3e700000 	.word	0x3e700000

080076c8 <scalbn>:
 80076c8:	004b      	lsls	r3, r1, #1
 80076ca:	b570      	push	{r4, r5, r6, lr}
 80076cc:	0d5b      	lsrs	r3, r3, #21
 80076ce:	0014      	movs	r4, r2
 80076d0:	000d      	movs	r5, r1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10f      	bne.n	80076f6 <scalbn+0x2e>
 80076d6:	004b      	lsls	r3, r1, #1
 80076d8:	085b      	lsrs	r3, r3, #1
 80076da:	4303      	orrs	r3, r0
 80076dc:	d012      	beq.n	8007704 <scalbn+0x3c>
 80076de:	4b23      	ldr	r3, [pc, #140]	@ (800776c <scalbn+0xa4>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	f7f9 fe93 	bl	800140c <__aeabi_dmul>
 80076e6:	4b22      	ldr	r3, [pc, #136]	@ (8007770 <scalbn+0xa8>)
 80076e8:	429c      	cmp	r4, r3
 80076ea:	da0c      	bge.n	8007706 <scalbn+0x3e>
 80076ec:	4a21      	ldr	r2, [pc, #132]	@ (8007774 <scalbn+0xac>)
 80076ee:	4b22      	ldr	r3, [pc, #136]	@ (8007778 <scalbn+0xb0>)
 80076f0:	f7f9 fe8c 	bl	800140c <__aeabi_dmul>
 80076f4:	e006      	b.n	8007704 <scalbn+0x3c>
 80076f6:	4a21      	ldr	r2, [pc, #132]	@ (800777c <scalbn+0xb4>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d108      	bne.n	800770e <scalbn+0x46>
 80076fc:	0002      	movs	r2, r0
 80076fe:	000b      	movs	r3, r1
 8007700:	f7f8 fedc 	bl	80004bc <__aeabi_dadd>
 8007704:	bd70      	pop	{r4, r5, r6, pc}
 8007706:	000d      	movs	r5, r1
 8007708:	004b      	lsls	r3, r1, #1
 800770a:	0d5b      	lsrs	r3, r3, #21
 800770c:	3b36      	subs	r3, #54	@ 0x36
 800770e:	4a1c      	ldr	r2, [pc, #112]	@ (8007780 <scalbn+0xb8>)
 8007710:	4294      	cmp	r4, r2
 8007712:	dd0a      	ble.n	800772a <scalbn+0x62>
 8007714:	4c1b      	ldr	r4, [pc, #108]	@ (8007784 <scalbn+0xbc>)
 8007716:	4d1c      	ldr	r5, [pc, #112]	@ (8007788 <scalbn+0xc0>)
 8007718:	2900      	cmp	r1, #0
 800771a:	da01      	bge.n	8007720 <scalbn+0x58>
 800771c:	4c19      	ldr	r4, [pc, #100]	@ (8007784 <scalbn+0xbc>)
 800771e:	4d1b      	ldr	r5, [pc, #108]	@ (800778c <scalbn+0xc4>)
 8007720:	4a18      	ldr	r2, [pc, #96]	@ (8007784 <scalbn+0xbc>)
 8007722:	4b19      	ldr	r3, [pc, #100]	@ (8007788 <scalbn+0xc0>)
 8007724:	0020      	movs	r0, r4
 8007726:	0029      	movs	r1, r5
 8007728:	e7e2      	b.n	80076f0 <scalbn+0x28>
 800772a:	18e2      	adds	r2, r4, r3
 800772c:	4b18      	ldr	r3, [pc, #96]	@ (8007790 <scalbn+0xc8>)
 800772e:	429a      	cmp	r2, r3
 8007730:	dcf0      	bgt.n	8007714 <scalbn+0x4c>
 8007732:	2a00      	cmp	r2, #0
 8007734:	dd05      	ble.n	8007742 <scalbn+0x7a>
 8007736:	4b17      	ldr	r3, [pc, #92]	@ (8007794 <scalbn+0xcc>)
 8007738:	0512      	lsls	r2, r2, #20
 800773a:	402b      	ands	r3, r5
 800773c:	431a      	orrs	r2, r3
 800773e:	0011      	movs	r1, r2
 8007740:	e7e0      	b.n	8007704 <scalbn+0x3c>
 8007742:	0013      	movs	r3, r2
 8007744:	3335      	adds	r3, #53	@ 0x35
 8007746:	da08      	bge.n	800775a <scalbn+0x92>
 8007748:	4c0a      	ldr	r4, [pc, #40]	@ (8007774 <scalbn+0xac>)
 800774a:	4d0b      	ldr	r5, [pc, #44]	@ (8007778 <scalbn+0xb0>)
 800774c:	2900      	cmp	r1, #0
 800774e:	da01      	bge.n	8007754 <scalbn+0x8c>
 8007750:	4c08      	ldr	r4, [pc, #32]	@ (8007774 <scalbn+0xac>)
 8007752:	4d11      	ldr	r5, [pc, #68]	@ (8007798 <scalbn+0xd0>)
 8007754:	4a07      	ldr	r2, [pc, #28]	@ (8007774 <scalbn+0xac>)
 8007756:	4b08      	ldr	r3, [pc, #32]	@ (8007778 <scalbn+0xb0>)
 8007758:	e7e4      	b.n	8007724 <scalbn+0x5c>
 800775a:	4b0e      	ldr	r3, [pc, #56]	@ (8007794 <scalbn+0xcc>)
 800775c:	3236      	adds	r2, #54	@ 0x36
 800775e:	401d      	ands	r5, r3
 8007760:	0512      	lsls	r2, r2, #20
 8007762:	432a      	orrs	r2, r5
 8007764:	0011      	movs	r1, r2
 8007766:	4b0d      	ldr	r3, [pc, #52]	@ (800779c <scalbn+0xd4>)
 8007768:	2200      	movs	r2, #0
 800776a:	e7c1      	b.n	80076f0 <scalbn+0x28>
 800776c:	43500000 	.word	0x43500000
 8007770:	ffff3cb0 	.word	0xffff3cb0
 8007774:	c2f8f359 	.word	0xc2f8f359
 8007778:	01a56e1f 	.word	0x01a56e1f
 800777c:	000007ff 	.word	0x000007ff
 8007780:	0000c350 	.word	0x0000c350
 8007784:	8800759c 	.word	0x8800759c
 8007788:	7e37e43c 	.word	0x7e37e43c
 800778c:	fe37e43c 	.word	0xfe37e43c
 8007790:	000007fe 	.word	0x000007fe
 8007794:	800fffff 	.word	0x800fffff
 8007798:	81a56e1f 	.word	0x81a56e1f
 800779c:	3c900000 	.word	0x3c900000

080077a0 <floor>:
 80077a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077a2:	004b      	lsls	r3, r1, #1
 80077a4:	4a36      	ldr	r2, [pc, #216]	@ (8007880 <floor+0xe0>)
 80077a6:	0d5b      	lsrs	r3, r3, #21
 80077a8:	189e      	adds	r6, r3, r2
 80077aa:	000c      	movs	r4, r1
 80077ac:	0005      	movs	r5, r0
 80077ae:	9001      	str	r0, [sp, #4]
 80077b0:	2e13      	cmp	r6, #19
 80077b2:	dc2f      	bgt.n	8007814 <floor+0x74>
 80077b4:	2e00      	cmp	r6, #0
 80077b6:	da14      	bge.n	80077e2 <floor+0x42>
 80077b8:	4a32      	ldr	r2, [pc, #200]	@ (8007884 <floor+0xe4>)
 80077ba:	4b33      	ldr	r3, [pc, #204]	@ (8007888 <floor+0xe8>)
 80077bc:	f7f8 fe7e 	bl	80004bc <__aeabi_dadd>
 80077c0:	2200      	movs	r2, #0
 80077c2:	2300      	movs	r3, #0
 80077c4:	f7f8 fe48 	bl	8000458 <__aeabi_dcmpgt>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d007      	beq.n	80077dc <floor+0x3c>
 80077cc:	2c00      	cmp	r4, #0
 80077ce:	da50      	bge.n	8007872 <floor+0xd2>
 80077d0:	0064      	lsls	r4, r4, #1
 80077d2:	0864      	lsrs	r4, r4, #1
 80077d4:	4325      	orrs	r5, r4
 80077d6:	d14f      	bne.n	8007878 <floor+0xd8>
 80077d8:	2480      	movs	r4, #128	@ 0x80
 80077da:	0624      	lsls	r4, r4, #24
 80077dc:	0021      	movs	r1, r4
 80077de:	0028      	movs	r0, r5
 80077e0:	e022      	b.n	8007828 <floor+0x88>
 80077e2:	4f2a      	ldr	r7, [pc, #168]	@ (800788c <floor+0xec>)
 80077e4:	4137      	asrs	r7, r6
 80077e6:	003b      	movs	r3, r7
 80077e8:	400b      	ands	r3, r1
 80077ea:	4303      	orrs	r3, r0
 80077ec:	d01c      	beq.n	8007828 <floor+0x88>
 80077ee:	4a25      	ldr	r2, [pc, #148]	@ (8007884 <floor+0xe4>)
 80077f0:	4b25      	ldr	r3, [pc, #148]	@ (8007888 <floor+0xe8>)
 80077f2:	f7f8 fe63 	bl	80004bc <__aeabi_dadd>
 80077f6:	2200      	movs	r2, #0
 80077f8:	2300      	movs	r3, #0
 80077fa:	f7f8 fe2d 	bl	8000458 <__aeabi_dcmpgt>
 80077fe:	2800      	cmp	r0, #0
 8007800:	d0ec      	beq.n	80077dc <floor+0x3c>
 8007802:	2c00      	cmp	r4, #0
 8007804:	da03      	bge.n	800780e <floor+0x6e>
 8007806:	2380      	movs	r3, #128	@ 0x80
 8007808:	035b      	lsls	r3, r3, #13
 800780a:	4133      	asrs	r3, r6
 800780c:	18e4      	adds	r4, r4, r3
 800780e:	2500      	movs	r5, #0
 8007810:	43bc      	bics	r4, r7
 8007812:	e7e3      	b.n	80077dc <floor+0x3c>
 8007814:	2e33      	cmp	r6, #51	@ 0x33
 8007816:	dd09      	ble.n	800782c <floor+0x8c>
 8007818:	2380      	movs	r3, #128	@ 0x80
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	429e      	cmp	r6, r3
 800781e:	d103      	bne.n	8007828 <floor+0x88>
 8007820:	0002      	movs	r2, r0
 8007822:	000b      	movs	r3, r1
 8007824:	f7f8 fe4a 	bl	80004bc <__aeabi_dadd>
 8007828:	b003      	add	sp, #12
 800782a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800782c:	2701      	movs	r7, #1
 800782e:	4a18      	ldr	r2, [pc, #96]	@ (8007890 <floor+0xf0>)
 8007830:	427f      	negs	r7, r7
 8007832:	189b      	adds	r3, r3, r2
 8007834:	40df      	lsrs	r7, r3
 8007836:	4238      	tst	r0, r7
 8007838:	d0f6      	beq.n	8007828 <floor+0x88>
 800783a:	4a12      	ldr	r2, [pc, #72]	@ (8007884 <floor+0xe4>)
 800783c:	4b12      	ldr	r3, [pc, #72]	@ (8007888 <floor+0xe8>)
 800783e:	f7f8 fe3d 	bl	80004bc <__aeabi_dadd>
 8007842:	2200      	movs	r2, #0
 8007844:	2300      	movs	r3, #0
 8007846:	f7f8 fe07 	bl	8000458 <__aeabi_dcmpgt>
 800784a:	2800      	cmp	r0, #0
 800784c:	d0c6      	beq.n	80077dc <floor+0x3c>
 800784e:	2c00      	cmp	r4, #0
 8007850:	da02      	bge.n	8007858 <floor+0xb8>
 8007852:	2e14      	cmp	r6, #20
 8007854:	d102      	bne.n	800785c <floor+0xbc>
 8007856:	3401      	adds	r4, #1
 8007858:	43bd      	bics	r5, r7
 800785a:	e7bf      	b.n	80077dc <floor+0x3c>
 800785c:	2234      	movs	r2, #52	@ 0x34
 800785e:	2301      	movs	r3, #1
 8007860:	1b92      	subs	r2, r2, r6
 8007862:	4093      	lsls	r3, r2
 8007864:	18ed      	adds	r5, r5, r3
 8007866:	9b01      	ldr	r3, [sp, #4]
 8007868:	429d      	cmp	r5, r3
 800786a:	419b      	sbcs	r3, r3
 800786c:	425b      	negs	r3, r3
 800786e:	18e4      	adds	r4, r4, r3
 8007870:	e7f2      	b.n	8007858 <floor+0xb8>
 8007872:	2500      	movs	r5, #0
 8007874:	002c      	movs	r4, r5
 8007876:	e7b1      	b.n	80077dc <floor+0x3c>
 8007878:	2500      	movs	r5, #0
 800787a:	4c06      	ldr	r4, [pc, #24]	@ (8007894 <floor+0xf4>)
 800787c:	e7ae      	b.n	80077dc <floor+0x3c>
 800787e:	46c0      	nop			@ (mov r8, r8)
 8007880:	fffffc01 	.word	0xfffffc01
 8007884:	8800759c 	.word	0x8800759c
 8007888:	7e37e43c 	.word	0x7e37e43c
 800788c:	000fffff 	.word	0x000fffff
 8007890:	fffffbed 	.word	0xfffffbed
 8007894:	bff00000 	.word	0xbff00000

08007898 <_init>:
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	46c0      	nop			@ (mov r8, r8)
 800789c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789e:	bc08      	pop	{r3}
 80078a0:	469e      	mov	lr, r3
 80078a2:	4770      	bx	lr

080078a4 <_fini>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	46c0      	nop			@ (mov r8, r8)
 80078a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078aa:	bc08      	pop	{r3}
 80078ac:	469e      	mov	lr, r3
 80078ae:	4770      	bx	lr
