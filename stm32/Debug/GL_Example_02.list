
GL_Example_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a6c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002b2c  08002b2c  00003b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b64  08002b64  00004024  2**0
                  CONTENTS
  4 .ARM          00000000  08002b64  08002b64  00004024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b64  08002b64  00004024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b64  08002b64  00003b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b68  08002b68  00003b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08002b6c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000024  08002b90  00004024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002b90  00004118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d89  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000197d  00000000  00000000  0000cdd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0000e758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000545  00000000  00000000  0000ee38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000118a5  00000000  00000000  0000f37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009db2  00000000  00000000  00020c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000689ce  00000000  00000000  0002a9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000933a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016f4  00000000  00000000  000933e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00094adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002b14 	.word	0x08002b14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08002b14 	.word	0x08002b14

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <UART_Transmit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART_Transmit (uint16_t byte_count, uint8_t *data_buffer_ptr)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	1dbb      	adds	r3, r7, #6
 800022c:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, data_buffer_ptr, byte_count, HAL_MAX_DELAY);
 800022e:	2301      	movs	r3, #1
 8000230:	425c      	negs	r4, r3
 8000232:	1dbb      	adds	r3, r7, #6
 8000234:	881a      	ldrh	r2, [r3, #0]
 8000236:	6839      	ldr	r1, [r7, #0]
 8000238:	4803      	ldr	r0, [pc, #12]	@ (8000248 <UART_Transmit+0x28>)
 800023a:	0023      	movs	r3, r4
 800023c:	f001 fc14 	bl	8001a68 <HAL_UART_Transmit>
}
 8000240:	46c0      	nop			@ (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	b003      	add	sp, #12
 8000246:	bd90      	pop	{r4, r7, pc}
 8000248:	20000040 	.word	0x20000040

0800024c <UART_Receive>:

void UART_Receive(uint16_t byte_count, uint8_t *data_buffer_ptr)
{
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	0002      	movs	r2, r0
 8000254:	6039      	str	r1, [r7, #0]
 8000256:	1dbb      	adds	r3, r7, #6
 8000258:	801a      	strh	r2, [r3, #0]
    HAL_UART_Receive(&huart1, data_buffer_ptr, byte_count, HAL_MAX_DELAY);
 800025a:	2301      	movs	r3, #1
 800025c:	425c      	negs	r4, r3
 800025e:	1dbb      	adds	r3, r7, #6
 8000260:	881a      	ldrh	r2, [r3, #0]
 8000262:	6839      	ldr	r1, [r7, #0]
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <UART_Receive+0x28>)
 8000266:	0023      	movs	r3, r4
 8000268:	f001 fc9e 	bl	8001ba8 <HAL_UART_Receive>
}
 800026c:	46c0      	nop			@ (mov r8, r8)
 800026e:	46bd      	mov	sp, r7
 8000270:	b003      	add	sp, #12
 8000272:	bd90      	pop	{r4, r7, pc}
 8000274:	20000040 	.word	0x20000040

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027e:	f000 fa2d 	bl	80006dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000282:	f000 f83d 	bl	8000300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000286:	f000 f8e9 	bl	800045c <MX_GPIO_Init>
  MX_DMA_Init();
 800028a:	f000 f8c9 	bl	8000420 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800028e:	f000 f897 	bl	80003c0 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UART_Receive(sizeof(array_buffer), array_buffer);
 8000292:	4b17      	ldr	r3, [pc, #92]	@ (80002f0 <main+0x78>)
 8000294:	0019      	movs	r1, r3
 8000296:	2005      	movs	r0, #5
 8000298:	f7ff ffd8 	bl	800024c <UART_Receive>

	  uint8_t match = 1;
 800029c:	1dfb      	adds	r3, r7, #7
 800029e:	2201      	movs	r2, #1
 80002a0:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < SIZE_OF_ARRAY; i++)
 80002a2:	2300      	movs	r3, #0
 80002a4:	603b      	str	r3, [r7, #0]
 80002a6:	e010      	b.n	80002ca <main+0x52>
	  {
		  if (array_buffer[i] != array_message[i])
 80002a8:	4a11      	ldr	r2, [pc, #68]	@ (80002f0 <main+0x78>)
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	18d3      	adds	r3, r2, r3
 80002ae:	781a      	ldrb	r2, [r3, #0]
 80002b0:	4910      	ldr	r1, [pc, #64]	@ (80002f4 <main+0x7c>)
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	18cb      	adds	r3, r1, r3
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d003      	beq.n	80002c4 <main+0x4c>
	          { match = 0; break; }
 80002bc:	1dfb      	adds	r3, r7, #7
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
 80002c2:	e005      	b.n	80002d0 <main+0x58>
	  for (int i = 0; i < SIZE_OF_ARRAY; i++)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	3301      	adds	r3, #1
 80002c8:	603b      	str	r3, [r7, #0]
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	2b04      	cmp	r3, #4
 80002ce:	ddeb      	ble.n	80002a8 <main+0x30>
	  }

	  if (match) { UART_Transmit(sizeof(receive), receive); }
 80002d0:	1dfb      	adds	r3, r7, #7
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d005      	beq.n	80002e4 <main+0x6c>
 80002d8:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <main+0x80>)
 80002da:	0019      	movs	r1, r3
 80002dc:	2005      	movs	r0, #5
 80002de:	f7ff ff9f 	bl	8000220 <UART_Transmit>
 80002e2:	e7d6      	b.n	8000292 <main+0x1a>
	  else { UART_Transmit(sizeof(error_receive), error_receive); }
 80002e4:	4b05      	ldr	r3, [pc, #20]	@ (80002fc <main+0x84>)
 80002e6:	0019      	movs	r1, r3
 80002e8:	2005      	movs	r0, #5
 80002ea:	f7ff ff99 	bl	8000220 <UART_Transmit>
  {
 80002ee:	e7d0      	b.n	8000292 <main+0x1a>
 80002f0:	2000010c 	.word	0x2000010c
 80002f4:	20000000 	.word	0x20000000
 80002f8:	20000008 	.word	0x20000008
 80002fc:	20000010 	.word	0x20000010

08000300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000300:	b590      	push	{r4, r7, lr}
 8000302:	b097      	sub	sp, #92	@ 0x5c
 8000304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	2428      	movs	r4, #40	@ 0x28
 8000308:	193b      	adds	r3, r7, r4
 800030a:	0018      	movs	r0, r3
 800030c:	2330      	movs	r3, #48	@ 0x30
 800030e:	001a      	movs	r2, r3
 8000310:	2100      	movs	r1, #0
 8000312:	f002 fbd3 	bl	8002abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000316:	2318      	movs	r3, #24
 8000318:	18fb      	adds	r3, r7, r3
 800031a:	0018      	movs	r0, r3
 800031c:	2310      	movs	r3, #16
 800031e:	001a      	movs	r2, r3
 8000320:	2100      	movs	r1, #0
 8000322:	f002 fbcb 	bl	8002abc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	0018      	movs	r0, r3
 800032a:	2314      	movs	r3, #20
 800032c:	001a      	movs	r2, r3
 800032e:	2100      	movs	r1, #0
 8000330:	f002 fbc4 	bl	8002abc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000334:	0021      	movs	r1, r4
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2201      	movs	r2, #1
 800033a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2201      	movs	r2, #1
 8000340:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2202      	movs	r2, #2
 8000346:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2280      	movs	r2, #128	@ 0x80
 800034c:	0252      	lsls	r2, r2, #9
 800034e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2280      	movs	r2, #128	@ 0x80
 8000354:	0352      	lsls	r2, r2, #13
 8000356:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2200      	movs	r2, #0
 800035c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035e:	187b      	adds	r3, r7, r1
 8000360:	0018      	movs	r0, r3
 8000362:	f000 fdf1 	bl	8000f48 <HAL_RCC_OscConfig>
 8000366:	1e03      	subs	r3, r0, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800036a:	f000 f8ab 	bl	80004c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036e:	2118      	movs	r1, #24
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2207      	movs	r2, #7
 8000374:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000376:	187b      	adds	r3, r7, r1
 8000378:	2202      	movs	r2, #2
 800037a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2200      	movs	r2, #0
 8000386:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000388:	187b      	adds	r3, r7, r1
 800038a:	2101      	movs	r1, #1
 800038c:	0018      	movs	r0, r3
 800038e:	f001 f8f5 	bl	800157c <HAL_RCC_ClockConfig>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000396:	f000 f895 	bl	80004c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2201      	movs	r2, #1
 800039e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	0018      	movs	r0, r3
 80003aa:	f001 fa2b 	bl	8001804 <HAL_RCCEx_PeriphCLKConfig>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003b2:	f000 f887 	bl	80004c4 <Error_Handler>
  }
}
 80003b6:	46c0      	nop			@ (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	b017      	add	sp, #92	@ 0x5c
 80003bc:	bd90      	pop	{r4, r7, pc}
	...

080003c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c4:	4b14      	ldr	r3, [pc, #80]	@ (8000418 <MX_USART1_UART_Init+0x58>)
 80003c6:	4a15      	ldr	r2, [pc, #84]	@ (800041c <MX_USART1_UART_Init+0x5c>)
 80003c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ca:	4b13      	ldr	r3, [pc, #76]	@ (8000418 <MX_USART1_UART_Init+0x58>)
 80003cc:	22e1      	movs	r2, #225	@ 0xe1
 80003ce:	0252      	lsls	r2, r2, #9
 80003d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003d2:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <MX_USART1_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000418 <MX_USART1_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003de:	4b0e      	ldr	r3, [pc, #56]	@ (8000418 <MX_USART1_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <MX_USART1_UART_Init+0x58>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <MX_USART1_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f0:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <MX_USART1_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	@ (8000418 <MX_USART1_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003fc:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <MX_USART1_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000402:	4b05      	ldr	r3, [pc, #20]	@ (8000418 <MX_USART1_UART_Init+0x58>)
 8000404:	0018      	movs	r0, r3
 8000406:	f001 fadb 	bl	80019c0 <HAL_UART_Init>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800040e:	f000 f859 	bl	80004c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000040 	.word	0x20000040
 800041c:	40013800 	.word	0x40013800

08000420 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000426:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <MX_DMA_Init+0x38>)
 8000428:	695a      	ldr	r2, [r3, #20]
 800042a:	4b0b      	ldr	r3, [pc, #44]	@ (8000458 <MX_DMA_Init+0x38>)
 800042c:	2101      	movs	r1, #1
 800042e:	430a      	orrs	r2, r1
 8000430:	615a      	str	r2, [r3, #20]
 8000432:	4b09      	ldr	r3, [pc, #36]	@ (8000458 <MX_DMA_Init+0x38>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	2201      	movs	r2, #1
 8000438:	4013      	ands	r3, r2
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800043e:	2200      	movs	r2, #0
 8000440:	2100      	movs	r1, #0
 8000442:	200b      	movs	r0, #11
 8000444:	f000 fa5a 	bl	80008fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000448:	200b      	movs	r0, #11
 800044a:	f000 fa6c 	bl	8000926 <HAL_NVIC_EnableIRQ>

}
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b002      	add	sp, #8
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	40021000 	.word	0x40021000

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000462:	4b17      	ldr	r3, [pc, #92]	@ (80004c0 <MX_GPIO_Init+0x64>)
 8000464:	695a      	ldr	r2, [r3, #20]
 8000466:	4b16      	ldr	r3, [pc, #88]	@ (80004c0 <MX_GPIO_Init+0x64>)
 8000468:	2180      	movs	r1, #128	@ 0x80
 800046a:	0309      	lsls	r1, r1, #12
 800046c:	430a      	orrs	r2, r1
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	4b13      	ldr	r3, [pc, #76]	@ (80004c0 <MX_GPIO_Init+0x64>)
 8000472:	695a      	ldr	r2, [r3, #20]
 8000474:	2380      	movs	r3, #128	@ 0x80
 8000476:	031b      	lsls	r3, r3, #12
 8000478:	4013      	ands	r3, r2
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800047e:	4b10      	ldr	r3, [pc, #64]	@ (80004c0 <MX_GPIO_Init+0x64>)
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	4b0f      	ldr	r3, [pc, #60]	@ (80004c0 <MX_GPIO_Init+0x64>)
 8000484:	2180      	movs	r1, #128	@ 0x80
 8000486:	03c9      	lsls	r1, r1, #15
 8000488:	430a      	orrs	r2, r1
 800048a:	615a      	str	r2, [r3, #20]
 800048c:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <MX_GPIO_Init+0x64>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	2380      	movs	r3, #128	@ 0x80
 8000492:	03db      	lsls	r3, r3, #15
 8000494:	4013      	ands	r3, r2
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049a:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <MX_GPIO_Init+0x64>)
 800049c:	695a      	ldr	r2, [r3, #20]
 800049e:	4b08      	ldr	r3, [pc, #32]	@ (80004c0 <MX_GPIO_Init+0x64>)
 80004a0:	2180      	movs	r1, #128	@ 0x80
 80004a2:	0289      	lsls	r1, r1, #10
 80004a4:	430a      	orrs	r2, r1
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	4b05      	ldr	r3, [pc, #20]	@ (80004c0 <MX_GPIO_Init+0x64>)
 80004aa:	695a      	ldr	r2, [r3, #20]
 80004ac:	2380      	movs	r3, #128	@ 0x80
 80004ae:	029b      	lsls	r3, r3, #10
 80004b0:	4013      	ands	r3, r2
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b004      	add	sp, #16
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	40021000 	.word	0x40021000

080004c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c8:	b672      	cpsid	i
}
 80004ca:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004cc:	46c0      	nop			@ (mov r8, r8)
 80004ce:	e7fd      	b.n	80004cc <Error_Handler+0x8>

080004d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <HAL_MspInit+0x44>)
 80004d8:	699a      	ldr	r2, [r3, #24]
 80004da:	4b0e      	ldr	r3, [pc, #56]	@ (8000514 <HAL_MspInit+0x44>)
 80004dc:	2101      	movs	r1, #1
 80004de:	430a      	orrs	r2, r1
 80004e0:	619a      	str	r2, [r3, #24]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000514 <HAL_MspInit+0x44>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	2201      	movs	r2, #1
 80004e8:	4013      	ands	r3, r2
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ee:	4b09      	ldr	r3, [pc, #36]	@ (8000514 <HAL_MspInit+0x44>)
 80004f0:	69da      	ldr	r2, [r3, #28]
 80004f2:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <HAL_MspInit+0x44>)
 80004f4:	2180      	movs	r1, #128	@ 0x80
 80004f6:	0549      	lsls	r1, r1, #21
 80004f8:	430a      	orrs	r2, r1
 80004fa:	61da      	str	r2, [r3, #28]
 80004fc:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <HAL_MspInit+0x44>)
 80004fe:	69da      	ldr	r2, [r3, #28]
 8000500:	2380      	movs	r3, #128	@ 0x80
 8000502:	055b      	lsls	r3, r3, #21
 8000504:	4013      	ands	r3, r2
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	b002      	add	sp, #8
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	40021000 	.word	0x40021000

08000518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b08b      	sub	sp, #44	@ 0x2c
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	2414      	movs	r4, #20
 8000522:	193b      	adds	r3, r7, r4
 8000524:	0018      	movs	r0, r3
 8000526:	2314      	movs	r3, #20
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f002 fac6 	bl	8002abc <memset>
  if(huart->Instance==USART1)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a34      	ldr	r2, [pc, #208]	@ (8000608 <HAL_UART_MspInit+0xf0>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d161      	bne.n	80005fe <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800053a:	4b34      	ldr	r3, [pc, #208]	@ (800060c <HAL_UART_MspInit+0xf4>)
 800053c:	699a      	ldr	r2, [r3, #24]
 800053e:	4b33      	ldr	r3, [pc, #204]	@ (800060c <HAL_UART_MspInit+0xf4>)
 8000540:	2180      	movs	r1, #128	@ 0x80
 8000542:	01c9      	lsls	r1, r1, #7
 8000544:	430a      	orrs	r2, r1
 8000546:	619a      	str	r2, [r3, #24]
 8000548:	4b30      	ldr	r3, [pc, #192]	@ (800060c <HAL_UART_MspInit+0xf4>)
 800054a:	699a      	ldr	r2, [r3, #24]
 800054c:	2380      	movs	r3, #128	@ 0x80
 800054e:	01db      	lsls	r3, r3, #7
 8000550:	4013      	ands	r3, r2
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b2d      	ldr	r3, [pc, #180]	@ (800060c <HAL_UART_MspInit+0xf4>)
 8000558:	695a      	ldr	r2, [r3, #20]
 800055a:	4b2c      	ldr	r3, [pc, #176]	@ (800060c <HAL_UART_MspInit+0xf4>)
 800055c:	2180      	movs	r1, #128	@ 0x80
 800055e:	0289      	lsls	r1, r1, #10
 8000560:	430a      	orrs	r2, r1
 8000562:	615a      	str	r2, [r3, #20]
 8000564:	4b29      	ldr	r3, [pc, #164]	@ (800060c <HAL_UART_MspInit+0xf4>)
 8000566:	695a      	ldr	r2, [r3, #20]
 8000568:	2380      	movs	r3, #128	@ 0x80
 800056a:	029b      	lsls	r3, r3, #10
 800056c:	4013      	ands	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	22c0      	movs	r2, #192	@ 0xc0
 8000576:	00d2      	lsls	r2, r2, #3
 8000578:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057a:	0021      	movs	r1, r4
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2202      	movs	r2, #2
 8000580:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2203      	movs	r2, #3
 800058c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2201      	movs	r2, #1
 8000592:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	187a      	adds	r2, r7, r1
 8000596:	2390      	movs	r3, #144	@ 0x90
 8000598:	05db      	lsls	r3, r3, #23
 800059a:	0011      	movs	r1, r2
 800059c:	0018      	movs	r0, r3
 800059e:	f000 fb63 	bl	8000c68 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80005a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000610 <HAL_UART_MspInit+0xf8>)
 80005a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000614 <HAL_UART_MspInit+0xfc>)
 80005a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005a8:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <HAL_UART_MspInit+0xf8>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005ae:	4b18      	ldr	r3, [pc, #96]	@ (8000610 <HAL_UART_MspInit+0xf8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005b4:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <HAL_UART_MspInit+0xf8>)
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005ba:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <HAL_UART_MspInit+0xf8>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005c0:	4b13      	ldr	r3, [pc, #76]	@ (8000610 <HAL_UART_MspInit+0xf8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80005c6:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <HAL_UART_MspInit+0xf8>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005cc:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <HAL_UART_MspInit+0xf8>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80005d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <HAL_UART_MspInit+0xf8>)
 80005d4:	0018      	movs	r0, r3
 80005d6:	f000 f9c3 	bl	8000960 <HAL_DMA_Init>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80005de:	f7ff ff71 	bl	80004c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000610 <HAL_UART_MspInit+0xf8>)
 80005e6:	675a      	str	r2, [r3, #116]	@ 0x74
 80005e8:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <HAL_UART_MspInit+0xf8>)
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	201b      	movs	r0, #27
 80005f4:	f000 f982 	bl	80008fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005f8:	201b      	movs	r0, #27
 80005fa:	f000 f994 	bl	8000926 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80005fe:	46c0      	nop			@ (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	b00b      	add	sp, #44	@ 0x2c
 8000604:	bd90      	pop	{r4, r7, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	40013800 	.word	0x40013800
 800060c:	40021000 	.word	0x40021000
 8000610:	200000c8 	.word	0x200000c8
 8000614:	40020030 	.word	0x40020030

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800061c:	46c0      	nop			@ (mov r8, r8)
 800061e:	e7fd      	b.n	800061c <NMI_Handler+0x4>

08000620 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	e7fd      	b.n	8000624 <HardFault_Handler+0x4>

08000628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000636:	46c0      	nop			@ (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000640:	f000 f894 	bl	800076c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000650:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fa49 	bl	8000aea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000658:	46c0      	nop			@ (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	200000c8 	.word	0x200000c8

08000664 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000668:	4b03      	ldr	r3, [pc, #12]	@ (8000678 <USART1_IRQHandler+0x14>)
 800066a:	0018      	movs	r0, r3
 800066c:	f001 fb70 	bl	8001d50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000670:	46c0      	nop			@ (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	20000040 	.word	0x20000040

0800067c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000680:	46c0      	nop			@ (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000688:	480d      	ldr	r0, [pc, #52]	@ (80006c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800068a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 800068c:	f7ff fff6 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000692:	490d      	ldr	r1, [pc, #52]	@ (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000694:	4a0d      	ldr	r2, [pc, #52]	@ (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a0a      	ldr	r2, [pc, #40]	@ (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a8:	4c0a      	ldr	r4, [pc, #40]	@ (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006b6:	f002 fa09 	bl	8002acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ba:	f7ff fddd 	bl	8000278 <main>

080006be <LoopForever>:

LoopForever:
    b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
  ldr   r0, =_estack
 80006c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80006cc:	08002b6c 	.word	0x08002b6c
  ldr r2, =_sbss
 80006d0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80006d4:	20000118 	.word	0x20000118

080006d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_COMP_IRQHandler>
	...

080006dc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <HAL_Init+0x24>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <HAL_Init+0x24>)
 80006e6:	2110      	movs	r1, #16
 80006e8:	430a      	orrs	r2, r1
 80006ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006ec:	2003      	movs	r0, #3
 80006ee:	f000 f809 	bl	8000704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f2:	f7ff feed 	bl	80004d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	0018      	movs	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	40022000 	.word	0x40022000

08000704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800070c:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <HAL_InitTick+0x5c>)
 800070e:	681c      	ldr	r4, [r3, #0]
 8000710:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <HAL_InitTick+0x60>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	0019      	movs	r1, r3
 8000716:	23fa      	movs	r3, #250	@ 0xfa
 8000718:	0098      	lsls	r0, r3, #2
 800071a:	f7ff fcf5 	bl	8000108 <__udivsi3>
 800071e:	0003      	movs	r3, r0
 8000720:	0019      	movs	r1, r3
 8000722:	0020      	movs	r0, r4
 8000724:	f7ff fcf0 	bl	8000108 <__udivsi3>
 8000728:	0003      	movs	r3, r0
 800072a:	0018      	movs	r0, r3
 800072c:	f000 f90b 	bl	8000946 <HAL_SYSTICK_Config>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000734:	2301      	movs	r3, #1
 8000736:	e00f      	b.n	8000758 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b03      	cmp	r3, #3
 800073c:	d80b      	bhi.n	8000756 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	2301      	movs	r3, #1
 8000742:	425b      	negs	r3, r3
 8000744:	2200      	movs	r2, #0
 8000746:	0018      	movs	r0, r3
 8000748:	f000 f8d8 	bl	80008fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <HAL_InitTick+0x64>)
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	e000      	b.n	8000758 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	b003      	add	sp, #12
 800075e:	bd90      	pop	{r4, r7, pc}
 8000760:	20000018 	.word	0x20000018
 8000764:	20000020 	.word	0x20000020
 8000768:	2000001c 	.word	0x2000001c

0800076c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000770:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <HAL_IncTick+0x1c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	001a      	movs	r2, r3
 8000776:	4b05      	ldr	r3, [pc, #20]	@ (800078c <HAL_IncTick+0x20>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	18d2      	adds	r2, r2, r3
 800077c:	4b03      	ldr	r3, [pc, #12]	@ (800078c <HAL_IncTick+0x20>)
 800077e:	601a      	str	r2, [r3, #0]
}
 8000780:	46c0      	nop			@ (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	20000020 	.word	0x20000020
 800078c:	20000114 	.word	0x20000114

08000790 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;
 8000794:	4b02      	ldr	r3, [pc, #8]	@ (80007a0 <HAL_GetTick+0x10>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	0018      	movs	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	20000114 	.word	0x20000114

080007a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	0002      	movs	r2, r0
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80007b6:	d809      	bhi.n	80007cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007b8:	1dfb      	adds	r3, r7, #7
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	001a      	movs	r2, r3
 80007be:	231f      	movs	r3, #31
 80007c0:	401a      	ands	r2, r3
 80007c2:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <__NVIC_EnableIRQ+0x30>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	4091      	lsls	r1, r2
 80007c8:	000a      	movs	r2, r1
 80007ca:	601a      	str	r2, [r3, #0]
  }
}
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b002      	add	sp, #8
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	0002      	movs	r2, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80007ec:	d828      	bhi.n	8000840 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ee:	4a2f      	ldr	r2, [pc, #188]	@ (80008ac <__NVIC_SetPriority+0xd4>)
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	089b      	lsrs	r3, r3, #2
 80007f8:	33c0      	adds	r3, #192	@ 0xc0
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	589b      	ldr	r3, [r3, r2]
 80007fe:	1dfa      	adds	r2, r7, #7
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	0011      	movs	r1, r2
 8000804:	2203      	movs	r2, #3
 8000806:	400a      	ands	r2, r1
 8000808:	00d2      	lsls	r2, r2, #3
 800080a:	21ff      	movs	r1, #255	@ 0xff
 800080c:	4091      	lsls	r1, r2
 800080e:	000a      	movs	r2, r1
 8000810:	43d2      	mvns	r2, r2
 8000812:	401a      	ands	r2, r3
 8000814:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	019b      	lsls	r3, r3, #6
 800081a:	22ff      	movs	r2, #255	@ 0xff
 800081c:	401a      	ands	r2, r3
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	0018      	movs	r0, r3
 8000824:	2303      	movs	r3, #3
 8000826:	4003      	ands	r3, r0
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800082c:	481f      	ldr	r0, [pc, #124]	@ (80008ac <__NVIC_SetPriority+0xd4>)
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b25b      	sxtb	r3, r3
 8000834:	089b      	lsrs	r3, r3, #2
 8000836:	430a      	orrs	r2, r1
 8000838:	33c0      	adds	r3, #192	@ 0xc0
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800083e:	e031      	b.n	80008a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000840:	4a1b      	ldr	r2, [pc, #108]	@ (80008b0 <__NVIC_SetPriority+0xd8>)
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	0019      	movs	r1, r3
 8000848:	230f      	movs	r3, #15
 800084a:	400b      	ands	r3, r1
 800084c:	3b08      	subs	r3, #8
 800084e:	089b      	lsrs	r3, r3, #2
 8000850:	3306      	adds	r3, #6
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	18d3      	adds	r3, r2, r3
 8000856:	3304      	adds	r3, #4
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	1dfa      	adds	r2, r7, #7
 800085c:	7812      	ldrb	r2, [r2, #0]
 800085e:	0011      	movs	r1, r2
 8000860:	2203      	movs	r2, #3
 8000862:	400a      	ands	r2, r1
 8000864:	00d2      	lsls	r2, r2, #3
 8000866:	21ff      	movs	r1, #255	@ 0xff
 8000868:	4091      	lsls	r1, r2
 800086a:	000a      	movs	r2, r1
 800086c:	43d2      	mvns	r2, r2
 800086e:	401a      	ands	r2, r3
 8000870:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	019b      	lsls	r3, r3, #6
 8000876:	22ff      	movs	r2, #255	@ 0xff
 8000878:	401a      	ands	r2, r3
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	0018      	movs	r0, r3
 8000880:	2303      	movs	r3, #3
 8000882:	4003      	ands	r3, r0
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000888:	4809      	ldr	r0, [pc, #36]	@ (80008b0 <__NVIC_SetPriority+0xd8>)
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	001c      	movs	r4, r3
 8000890:	230f      	movs	r3, #15
 8000892:	4023      	ands	r3, r4
 8000894:	3b08      	subs	r3, #8
 8000896:	089b      	lsrs	r3, r3, #2
 8000898:	430a      	orrs	r2, r1
 800089a:	3306      	adds	r3, #6
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	18c3      	adds	r3, r0, r3
 80008a0:	3304      	adds	r3, #4
 80008a2:	601a      	str	r2, [r3, #0]
}
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b003      	add	sp, #12
 80008aa:	bd90      	pop	{r4, r7, pc}
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	1e5a      	subs	r2, r3, #1
 80008c0:	2380      	movs	r3, #128	@ 0x80
 80008c2:	045b      	lsls	r3, r3, #17
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d301      	bcc.n	80008cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c8:	2301      	movs	r3, #1
 80008ca:	e010      	b.n	80008ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008cc:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <SysTick_Config+0x44>)
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	3a01      	subs	r2, #1
 80008d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d4:	2301      	movs	r3, #1
 80008d6:	425b      	negs	r3, r3
 80008d8:	2103      	movs	r1, #3
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff ff7c 	bl	80007d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <SysTick_Config+0x44>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e6:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <SysTick_Config+0x44>)
 80008e8:	2207      	movs	r2, #7
 80008ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	0018      	movs	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	e000e010 	.word	0xe000e010

080008fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	210f      	movs	r1, #15
 8000908:	187b      	adds	r3, r7, r1
 800090a:	1c02      	adds	r2, r0, #0
 800090c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	187b      	adds	r3, r7, r1
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b25b      	sxtb	r3, r3
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f7ff ff5d 	bl	80007d8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b004      	add	sp, #16
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	0002      	movs	r2, r0
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b25b      	sxtb	r3, r3
 8000938:	0018      	movs	r0, r3
 800093a:	f7ff ff33 	bl	80007a4 <__NVIC_EnableIRQ>
}
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff ffaf 	bl	80008b4 <SysTick_Config>
 8000956:	0003      	movs	r3, r0
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b002      	add	sp, #8
 800095e:	bd80      	pop	{r7, pc}

08000960 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e036      	b.n	80009e4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2221      	movs	r2, #33	@ 0x21
 800097a:	2102      	movs	r1, #2
 800097c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4a18      	ldr	r2, [pc, #96]	@ (80009ec <HAL_DMA_Init+0x8c>)
 800098a:	4013      	ands	r3, r2
 800098c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000996:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	69db      	ldr	r3, [r3, #28]
 80009b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 f932 	bl	8000c30 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2221      	movs	r2, #33	@ 0x21
 80009d6:	2101      	movs	r1, #1
 80009d8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2220      	movs	r2, #32
 80009de:	2100      	movs	r1, #0
 80009e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	0018      	movs	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b004      	add	sp, #16
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	ffffc00f 	.word	0xffffc00f

080009f0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2221      	movs	r2, #33	@ 0x21
 80009fc:	5c9b      	ldrb	r3, [r3, r2]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d008      	beq.n	8000a16 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2204      	movs	r2, #4
 8000a08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	2100      	movs	r1, #0
 8000a10:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e020      	b.n	8000a58 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	210e      	movs	r1, #14
 8000a22:	438a      	bics	r2, r1
 8000a24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2101      	movs	r1, #1
 8000a32:	438a      	bics	r2, r1
 8000a34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a3e:	2101      	movs	r1, #1
 8000a40:	4091      	lsls	r1, r2
 8000a42:	000a      	movs	r2, r1
 8000a44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2221      	movs	r2, #33	@ 0x21
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2220      	movs	r2, #32
 8000a52:	2100      	movs	r1, #0
 8000a54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	0018      	movs	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b002      	add	sp, #8
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a68:	210f      	movs	r1, #15
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2221      	movs	r2, #33	@ 0x21
 8000a74:	5c9b      	ldrb	r3, [r3, r2]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d006      	beq.n	8000a8a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2204      	movs	r2, #4
 8000a80:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
 8000a88:	e028      	b.n	8000adc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	210e      	movs	r1, #14
 8000a96:	438a      	bics	r2, r1
 8000a98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	438a      	bics	r2, r1
 8000aa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	4091      	lsls	r1, r2
 8000ab6:	000a      	movs	r2, r1
 8000ab8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2221      	movs	r2, #33	@ 0x21
 8000abe:	2101      	movs	r1, #1
 8000ac0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2220      	movs	r2, #32
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d004      	beq.n	8000adc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	0010      	movs	r0, r2
 8000ada:	4798      	blx	r3
    }
  }
  return status;
 8000adc:	230f      	movs	r3, #15
 8000ade:	18fb      	adds	r3, r7, r3
 8000ae0:	781b      	ldrb	r3, [r3, #0]
}
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b004      	add	sp, #16
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b084      	sub	sp, #16
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	2204      	movs	r2, #4
 8000b08:	409a      	lsls	r2, r3
 8000b0a:	0013      	movs	r3, r2
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	d024      	beq.n	8000b5c <HAL_DMA_IRQHandler+0x72>
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	2204      	movs	r2, #4
 8000b16:	4013      	ands	r3, r2
 8000b18:	d020      	beq.n	8000b5c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2220      	movs	r2, #32
 8000b22:	4013      	ands	r3, r2
 8000b24:	d107      	bne.n	8000b36 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2104      	movs	r1, #4
 8000b32:	438a      	bics	r2, r1
 8000b34:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b3e:	2104      	movs	r1, #4
 8000b40:	4091      	lsls	r1, r2
 8000b42:	000a      	movs	r2, r1
 8000b44:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d100      	bne.n	8000b50 <HAL_DMA_IRQHandler+0x66>
 8000b4e:	e06a      	b.n	8000c26 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	0010      	movs	r0, r2
 8000b58:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000b5a:	e064      	b.n	8000c26 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b60:	2202      	movs	r2, #2
 8000b62:	409a      	lsls	r2, r3
 8000b64:	0013      	movs	r3, r2
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	d02b      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0xda>
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	2202      	movs	r2, #2
 8000b70:	4013      	ands	r3, r2
 8000b72:	d027      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2220      	movs	r2, #32
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	d10b      	bne.n	8000b98 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	210a      	movs	r1, #10
 8000b8c:	438a      	bics	r2, r1
 8000b8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2221      	movs	r2, #33	@ 0x21
 8000b94:	2101      	movs	r1, #1
 8000b96:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	4091      	lsls	r1, r2
 8000ba4:	000a      	movs	r2, r1
 8000ba6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2220      	movs	r2, #32
 8000bac:	2100      	movs	r1, #0
 8000bae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d036      	beq.n	8000c26 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	0010      	movs	r0, r2
 8000bc0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000bc2:	e030      	b.n	8000c26 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc8:	2208      	movs	r2, #8
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	0013      	movs	r3, r2
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	d028      	beq.n	8000c26 <HAL_DMA_IRQHandler+0x13c>
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	4013      	ands	r3, r2
 8000bda:	d024      	beq.n	8000c26 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	210e      	movs	r1, #14
 8000be8:	438a      	bics	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	000a      	movs	r2, r1
 8000bfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2221      	movs	r2, #33	@ 0x21
 8000c06:	2101      	movs	r1, #1
 8000c08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	2100      	movs	r1, #0
 8000c10:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d005      	beq.n	8000c26 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	0010      	movs	r0, r2
 8000c22:	4798      	blx	r3
    }
  }
}
 8000c24:	e7ff      	b.n	8000c26 <HAL_DMA_IRQHandler+0x13c>
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b004      	add	sp, #16
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a08      	ldr	r2, [pc, #32]	@ (8000c60 <DMA_CalcBaseAndBitshift+0x30>)
 8000c3e:	4694      	mov	ip, r2
 8000c40:	4463      	add	r3, ip
 8000c42:	2114      	movs	r1, #20
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fa5f 	bl	8000108 <__udivsi3>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	009a      	lsls	r2, r3, #2
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a03      	ldr	r2, [pc, #12]	@ (8000c64 <DMA_CalcBaseAndBitshift+0x34>)
 8000c56:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8000c58:	46c0      	nop			@ (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	bffdfff8 	.word	0xbffdfff8
 8000c64:	40020000 	.word	0x40020000

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c76:	e14f      	b.n	8000f18 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	4091      	lsls	r1, r2
 8000c82:	000a      	movs	r2, r1
 8000c84:	4013      	ands	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d100      	bne.n	8000c90 <HAL_GPIO_Init+0x28>
 8000c8e:	e140      	b.n	8000f12 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2203      	movs	r2, #3
 8000c96:	4013      	ands	r3, r2
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d005      	beq.n	8000ca8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d130      	bne.n	8000d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	0013      	movs	r3, r2
 8000cb8:	43da      	mvns	r2, r3
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68da      	ldr	r2, [r3, #12]
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	409a      	lsls	r2, r3
 8000cca:	0013      	movs	r3, r2
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cde:	2201      	movs	r2, #1
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2203      	movs	r2, #3
 8000d10:	4013      	ands	r3, r2
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d017      	beq.n	8000d46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2203      	movs	r2, #3
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	43da      	mvns	r2, r3
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	409a      	lsls	r2, r3
 8000d38:	0013      	movs	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d123      	bne.n	8000d9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	08da      	lsrs	r2, r3, #3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3208      	adds	r2, #8
 8000d5a:	0092      	lsls	r2, r2, #2
 8000d5c:	58d3      	ldr	r3, [r2, r3]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	2207      	movs	r2, #7
 8000d64:	4013      	ands	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	220f      	movs	r2, #15
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	0013      	movs	r3, r2
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	691a      	ldr	r2, [r3, #16]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	2107      	movs	r1, #7
 8000d7e:	400b      	ands	r3, r1
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	409a      	lsls	r2, r3
 8000d84:	0013      	movs	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	08da      	lsrs	r2, r3, #3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3208      	adds	r2, #8
 8000d94:	0092      	lsls	r2, r2, #2
 8000d96:	6939      	ldr	r1, [r7, #16]
 8000d98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	409a      	lsls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	43da      	mvns	r2, r3
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2203      	movs	r2, #3
 8000db8:	401a      	ands	r2, r3
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	23c0      	movs	r3, #192	@ 0xc0
 8000dd4:	029b      	lsls	r3, r3, #10
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d100      	bne.n	8000ddc <HAL_GPIO_Init+0x174>
 8000dda:	e09a      	b.n	8000f12 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ddc:	4b54      	ldr	r3, [pc, #336]	@ (8000f30 <HAL_GPIO_Init+0x2c8>)
 8000dde:	699a      	ldr	r2, [r3, #24]
 8000de0:	4b53      	ldr	r3, [pc, #332]	@ (8000f30 <HAL_GPIO_Init+0x2c8>)
 8000de2:	2101      	movs	r1, #1
 8000de4:	430a      	orrs	r2, r1
 8000de6:	619a      	str	r2, [r3, #24]
 8000de8:	4b51      	ldr	r3, [pc, #324]	@ (8000f30 <HAL_GPIO_Init+0x2c8>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	2201      	movs	r2, #1
 8000dee:	4013      	ands	r3, r2
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000df4:	4a4f      	ldr	r2, [pc, #316]	@ (8000f34 <HAL_GPIO_Init+0x2cc>)
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	589b      	ldr	r3, [r3, r2]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	2203      	movs	r2, #3
 8000e06:	4013      	ands	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	220f      	movs	r2, #15
 8000e0c:	409a      	lsls	r2, r3
 8000e0e:	0013      	movs	r3, r2
 8000e10:	43da      	mvns	r2, r3
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	2390      	movs	r3, #144	@ 0x90
 8000e1c:	05db      	lsls	r3, r3, #23
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d013      	beq.n	8000e4a <HAL_GPIO_Init+0x1e2>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a44      	ldr	r2, [pc, #272]	@ (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d00d      	beq.n	8000e46 <HAL_GPIO_Init+0x1de>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a43      	ldr	r2, [pc, #268]	@ (8000f3c <HAL_GPIO_Init+0x2d4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d007      	beq.n	8000e42 <HAL_GPIO_Init+0x1da>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a42      	ldr	r2, [pc, #264]	@ (8000f40 <HAL_GPIO_Init+0x2d8>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d101      	bne.n	8000e3e <HAL_GPIO_Init+0x1d6>
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e006      	b.n	8000e4c <HAL_GPIO_Init+0x1e4>
 8000e3e:	2305      	movs	r3, #5
 8000e40:	e004      	b.n	8000e4c <HAL_GPIO_Init+0x1e4>
 8000e42:	2302      	movs	r3, #2
 8000e44:	e002      	b.n	8000e4c <HAL_GPIO_Init+0x1e4>
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <HAL_GPIO_Init+0x1e4>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	2103      	movs	r1, #3
 8000e50:	400a      	ands	r2, r1
 8000e52:	0092      	lsls	r2, r2, #2
 8000e54:	4093      	lsls	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e5c:	4935      	ldr	r1, [pc, #212]	@ (8000f34 <HAL_GPIO_Init+0x2cc>)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	089b      	lsrs	r3, r3, #2
 8000e62:	3302      	adds	r3, #2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6a:	4b36      	ldr	r3, [pc, #216]	@ (8000f44 <HAL_GPIO_Init+0x2dc>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	43da      	mvns	r2, r3
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	2380      	movs	r3, #128	@ 0x80
 8000e80:	035b      	lsls	r3, r3, #13
 8000e82:	4013      	ands	r3, r2
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f44 <HAL_GPIO_Init+0x2dc>)
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e94:	4b2b      	ldr	r3, [pc, #172]	@ (8000f44 <HAL_GPIO_Init+0x2dc>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	43da      	mvns	r2, r3
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	2380      	movs	r3, #128	@ 0x80
 8000eaa:	039b      	lsls	r3, r3, #14
 8000eac:	4013      	ands	r3, r2
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eb8:	4b22      	ldr	r3, [pc, #136]	@ (8000f44 <HAL_GPIO_Init+0x2dc>)
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000ebe:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <HAL_GPIO_Init+0x2dc>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	2380      	movs	r3, #128	@ 0x80
 8000ed4:	029b      	lsls	r3, r3, #10
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <HAL_GPIO_Init+0x2dc>)
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <HAL_GPIO_Init+0x2dc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	43da      	mvns	r2, r3
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	2380      	movs	r3, #128	@ 0x80
 8000efe:	025b      	lsls	r3, r3, #9
 8000f00:	4013      	ands	r3, r2
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <HAL_GPIO_Init+0x2dc>)
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	40da      	lsrs	r2, r3
 8000f20:	1e13      	subs	r3, r2, #0
 8000f22:	d000      	beq.n	8000f26 <HAL_GPIO_Init+0x2be>
 8000f24:	e6a8      	b.n	8000c78 <HAL_GPIO_Init+0x10>
  } 
}
 8000f26:	46c0      	nop			@ (mov r8, r8)
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b006      	add	sp, #24
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40010000 	.word	0x40010000
 8000f38:	48000400 	.word	0x48000400
 8000f3c:	48000800 	.word	0x48000800
 8000f40:	48000c00 	.word	0x48000c00
 8000f44:	40010400 	.word	0x40010400

08000f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e301      	b.n	800155e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4013      	ands	r3, r2
 8000f62:	d100      	bne.n	8000f66 <HAL_RCC_OscConfig+0x1e>
 8000f64:	e08d      	b.n	8001082 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f66:	4bc3      	ldr	r3, [pc, #780]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	d00e      	beq.n	8000f90 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f72:	4bc0      	ldr	r3, [pc, #768]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	220c      	movs	r2, #12
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b08      	cmp	r3, #8
 8000f7c:	d116      	bne.n	8000fac <HAL_RCC_OscConfig+0x64>
 8000f7e:	4bbd      	ldr	r3, [pc, #756]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	2380      	movs	r3, #128	@ 0x80
 8000f84:	025b      	lsls	r3, r3, #9
 8000f86:	401a      	ands	r2, r3
 8000f88:	2380      	movs	r3, #128	@ 0x80
 8000f8a:	025b      	lsls	r3, r3, #9
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d10d      	bne.n	8000fac <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f90:	4bb8      	ldr	r3, [pc, #736]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2380      	movs	r3, #128	@ 0x80
 8000f96:	029b      	lsls	r3, r3, #10
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d100      	bne.n	8000f9e <HAL_RCC_OscConfig+0x56>
 8000f9c:	e070      	b.n	8001080 <HAL_RCC_OscConfig+0x138>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d000      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x60>
 8000fa6:	e06b      	b.n	8001080 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e2d8      	b.n	800155e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d107      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x7c>
 8000fb4:	4baf      	ldr	r3, [pc, #700]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4bae      	ldr	r3, [pc, #696]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8000fba:	2180      	movs	r1, #128	@ 0x80
 8000fbc:	0249      	lsls	r1, r1, #9
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	e02f      	b.n	8001024 <HAL_RCC_OscConfig+0xdc>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10c      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x9e>
 8000fcc:	4ba9      	ldr	r3, [pc, #676]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4ba8      	ldr	r3, [pc, #672]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8000fd2:	49a9      	ldr	r1, [pc, #676]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	4ba6      	ldr	r3, [pc, #664]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4ba5      	ldr	r3, [pc, #660]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8000fde:	49a7      	ldr	r1, [pc, #668]	@ (800127c <HAL_RCC_OscConfig+0x334>)
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	e01e      	b.n	8001024 <HAL_RCC_OscConfig+0xdc>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	d10e      	bne.n	800100c <HAL_RCC_OscConfig+0xc4>
 8000fee:	4ba1      	ldr	r3, [pc, #644]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4ba0      	ldr	r3, [pc, #640]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8000ff4:	2180      	movs	r1, #128	@ 0x80
 8000ff6:	02c9      	lsls	r1, r1, #11
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	4b9d      	ldr	r3, [pc, #628]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b9c      	ldr	r3, [pc, #624]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8001002:	2180      	movs	r1, #128	@ 0x80
 8001004:	0249      	lsls	r1, r1, #9
 8001006:	430a      	orrs	r2, r1
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	e00b      	b.n	8001024 <HAL_RCC_OscConfig+0xdc>
 800100c:	4b99      	ldr	r3, [pc, #612]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b98      	ldr	r3, [pc, #608]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8001012:	4999      	ldr	r1, [pc, #612]	@ (8001278 <HAL_RCC_OscConfig+0x330>)
 8001014:	400a      	ands	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	4b96      	ldr	r3, [pc, #600]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b95      	ldr	r3, [pc, #596]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 800101e:	4997      	ldr	r1, [pc, #604]	@ (800127c <HAL_RCC_OscConfig+0x334>)
 8001020:	400a      	ands	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d014      	beq.n	8001056 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fbb0 	bl	8000790 <HAL_GetTick>
 8001030:	0003      	movs	r3, r0
 8001032:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001036:	f7ff fbab 	bl	8000790 <HAL_GetTick>
 800103a:	0002      	movs	r2, r0
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b64      	cmp	r3, #100	@ 0x64
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e28a      	b.n	800155e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001048:	4b8a      	ldr	r3, [pc, #552]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	2380      	movs	r3, #128	@ 0x80
 800104e:	029b      	lsls	r3, r3, #10
 8001050:	4013      	ands	r3, r2
 8001052:	d0f0      	beq.n	8001036 <HAL_RCC_OscConfig+0xee>
 8001054:	e015      	b.n	8001082 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001056:	f7ff fb9b 	bl	8000790 <HAL_GetTick>
 800105a:	0003      	movs	r3, r0
 800105c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001060:	f7ff fb96 	bl	8000790 <HAL_GetTick>
 8001064:	0002      	movs	r2, r0
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b64      	cmp	r3, #100	@ 0x64
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e275      	b.n	800155e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001072:	4b80      	ldr	r3, [pc, #512]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	2380      	movs	r3, #128	@ 0x80
 8001078:	029b      	lsls	r3, r3, #10
 800107a:	4013      	ands	r3, r2
 800107c:	d1f0      	bne.n	8001060 <HAL_RCC_OscConfig+0x118>
 800107e:	e000      	b.n	8001082 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001080:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2202      	movs	r2, #2
 8001088:	4013      	ands	r3, r2
 800108a:	d100      	bne.n	800108e <HAL_RCC_OscConfig+0x146>
 800108c:	e069      	b.n	8001162 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800108e:	4b79      	ldr	r3, [pc, #484]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	220c      	movs	r2, #12
 8001094:	4013      	ands	r3, r2
 8001096:	d00b      	beq.n	80010b0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001098:	4b76      	ldr	r3, [pc, #472]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	220c      	movs	r2, #12
 800109e:	4013      	ands	r3, r2
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d11c      	bne.n	80010de <HAL_RCC_OscConfig+0x196>
 80010a4:	4b73      	ldr	r3, [pc, #460]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	2380      	movs	r3, #128	@ 0x80
 80010aa:	025b      	lsls	r3, r3, #9
 80010ac:	4013      	ands	r3, r2
 80010ae:	d116      	bne.n	80010de <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b0:	4b70      	ldr	r3, [pc, #448]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2202      	movs	r2, #2
 80010b6:	4013      	ands	r3, r2
 80010b8:	d005      	beq.n	80010c6 <HAL_RCC_OscConfig+0x17e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d001      	beq.n	80010c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e24b      	b.n	800155e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c6:	4b6b      	ldr	r3, [pc, #428]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	22f8      	movs	r2, #248	@ 0xf8
 80010cc:	4393      	bics	r3, r2
 80010ce:	0019      	movs	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	00da      	lsls	r2, r3, #3
 80010d6:	4b67      	ldr	r3, [pc, #412]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 80010d8:	430a      	orrs	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010dc:	e041      	b.n	8001162 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d024      	beq.n	8001130 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e6:	4b63      	ldr	r3, [pc, #396]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4b62      	ldr	r3, [pc, #392]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 80010ec:	2101      	movs	r1, #1
 80010ee:	430a      	orrs	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f2:	f7ff fb4d 	bl	8000790 <HAL_GetTick>
 80010f6:	0003      	movs	r3, r0
 80010f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010fc:	f7ff fb48 	bl	8000790 <HAL_GetTick>
 8001100:	0002      	movs	r2, r0
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e227      	b.n	800155e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110e:	4b59      	ldr	r3, [pc, #356]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2202      	movs	r2, #2
 8001114:	4013      	ands	r3, r2
 8001116:	d0f1      	beq.n	80010fc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001118:	4b56      	ldr	r3, [pc, #344]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	22f8      	movs	r2, #248	@ 0xf8
 800111e:	4393      	bics	r3, r2
 8001120:	0019      	movs	r1, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	00da      	lsls	r2, r3, #3
 8001128:	4b52      	ldr	r3, [pc, #328]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 800112a:	430a      	orrs	r2, r1
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e018      	b.n	8001162 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001130:	4b50      	ldr	r3, [pc, #320]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b4f      	ldr	r3, [pc, #316]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8001136:	2101      	movs	r1, #1
 8001138:	438a      	bics	r2, r1
 800113a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fb28 	bl	8000790 <HAL_GetTick>
 8001140:	0003      	movs	r3, r0
 8001142:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001146:	f7ff fb23 	bl	8000790 <HAL_GetTick>
 800114a:	0002      	movs	r2, r0
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e202      	b.n	800155e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001158:	4b46      	ldr	r3, [pc, #280]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2202      	movs	r2, #2
 800115e:	4013      	ands	r3, r2
 8001160:	d1f1      	bne.n	8001146 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2208      	movs	r2, #8
 8001168:	4013      	ands	r3, r2
 800116a:	d036      	beq.n	80011da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d019      	beq.n	80011a8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001174:	4b3f      	ldr	r3, [pc, #252]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8001176:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001178:	4b3e      	ldr	r3, [pc, #248]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 800117a:	2101      	movs	r1, #1
 800117c:	430a      	orrs	r2, r1
 800117e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001180:	f7ff fb06 	bl	8000790 <HAL_GetTick>
 8001184:	0003      	movs	r3, r0
 8001186:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800118a:	f7ff fb01 	bl	8000790 <HAL_GetTick>
 800118e:	0002      	movs	r2, r0
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e1e0      	b.n	800155e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119c:	4b35      	ldr	r3, [pc, #212]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 800119e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a0:	2202      	movs	r2, #2
 80011a2:	4013      	ands	r3, r2
 80011a4:	d0f1      	beq.n	800118a <HAL_RCC_OscConfig+0x242>
 80011a6:	e018      	b.n	80011da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011a8:	4b32      	ldr	r3, [pc, #200]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 80011aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011ac:	4b31      	ldr	r3, [pc, #196]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 80011ae:	2101      	movs	r1, #1
 80011b0:	438a      	bics	r2, r1
 80011b2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b4:	f7ff faec 	bl	8000790 <HAL_GetTick>
 80011b8:	0003      	movs	r3, r0
 80011ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011be:	f7ff fae7 	bl	8000790 <HAL_GetTick>
 80011c2:	0002      	movs	r2, r0
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e1c6      	b.n	800155e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d0:	4b28      	ldr	r3, [pc, #160]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d4:	2202      	movs	r2, #2
 80011d6:	4013      	ands	r3, r2
 80011d8:	d1f1      	bne.n	80011be <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2204      	movs	r2, #4
 80011e0:	4013      	ands	r3, r2
 80011e2:	d100      	bne.n	80011e6 <HAL_RCC_OscConfig+0x29e>
 80011e4:	e0b4      	b.n	8001350 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011e6:	201f      	movs	r0, #31
 80011e8:	183b      	adds	r3, r7, r0
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ee:	4b21      	ldr	r3, [pc, #132]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 80011f0:	69da      	ldr	r2, [r3, #28]
 80011f2:	2380      	movs	r3, #128	@ 0x80
 80011f4:	055b      	lsls	r3, r3, #21
 80011f6:	4013      	ands	r3, r2
 80011f8:	d110      	bne.n	800121c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 80011fc:	69da      	ldr	r2, [r3, #28]
 80011fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8001200:	2180      	movs	r1, #128	@ 0x80
 8001202:	0549      	lsls	r1, r1, #21
 8001204:	430a      	orrs	r2, r1
 8001206:	61da      	str	r2, [r3, #28]
 8001208:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 800120a:	69da      	ldr	r2, [r3, #28]
 800120c:	2380      	movs	r3, #128	@ 0x80
 800120e:	055b      	lsls	r3, r3, #21
 8001210:	4013      	ands	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001216:	183b      	adds	r3, r7, r0
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121c:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <HAL_RCC_OscConfig+0x338>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4013      	ands	r3, r2
 8001226:	d11a      	bne.n	800125e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001228:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <HAL_RCC_OscConfig+0x338>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <HAL_RCC_OscConfig+0x338>)
 800122e:	2180      	movs	r1, #128	@ 0x80
 8001230:	0049      	lsls	r1, r1, #1
 8001232:	430a      	orrs	r2, r1
 8001234:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001236:	f7ff faab 	bl	8000790 <HAL_GetTick>
 800123a:	0003      	movs	r3, r0
 800123c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001240:	f7ff faa6 	bl	8000790 <HAL_GetTick>
 8001244:	0002      	movs	r2, r0
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	@ 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e185      	b.n	800155e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <HAL_RCC_OscConfig+0x338>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	2380      	movs	r3, #128	@ 0x80
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4013      	ands	r3, r2
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d10e      	bne.n	8001284 <HAL_RCC_OscConfig+0x33c>
 8001266:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 8001268:	6a1a      	ldr	r2, [r3, #32]
 800126a:	4b02      	ldr	r3, [pc, #8]	@ (8001274 <HAL_RCC_OscConfig+0x32c>)
 800126c:	2101      	movs	r1, #1
 800126e:	430a      	orrs	r2, r1
 8001270:	621a      	str	r2, [r3, #32]
 8001272:	e035      	b.n	80012e0 <HAL_RCC_OscConfig+0x398>
 8001274:	40021000 	.word	0x40021000
 8001278:	fffeffff 	.word	0xfffeffff
 800127c:	fffbffff 	.word	0xfffbffff
 8001280:	40007000 	.word	0x40007000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10c      	bne.n	80012a6 <HAL_RCC_OscConfig+0x35e>
 800128c:	4bb6      	ldr	r3, [pc, #728]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 800128e:	6a1a      	ldr	r2, [r3, #32]
 8001290:	4bb5      	ldr	r3, [pc, #724]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 8001292:	2101      	movs	r1, #1
 8001294:	438a      	bics	r2, r1
 8001296:	621a      	str	r2, [r3, #32]
 8001298:	4bb3      	ldr	r3, [pc, #716]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 800129a:	6a1a      	ldr	r2, [r3, #32]
 800129c:	4bb2      	ldr	r3, [pc, #712]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 800129e:	2104      	movs	r1, #4
 80012a0:	438a      	bics	r2, r1
 80012a2:	621a      	str	r2, [r3, #32]
 80012a4:	e01c      	b.n	80012e0 <HAL_RCC_OscConfig+0x398>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b05      	cmp	r3, #5
 80012ac:	d10c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x380>
 80012ae:	4bae      	ldr	r3, [pc, #696]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80012b0:	6a1a      	ldr	r2, [r3, #32]
 80012b2:	4bad      	ldr	r3, [pc, #692]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80012b4:	2104      	movs	r1, #4
 80012b6:	430a      	orrs	r2, r1
 80012b8:	621a      	str	r2, [r3, #32]
 80012ba:	4bab      	ldr	r3, [pc, #684]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80012bc:	6a1a      	ldr	r2, [r3, #32]
 80012be:	4baa      	ldr	r3, [pc, #680]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80012c0:	2101      	movs	r1, #1
 80012c2:	430a      	orrs	r2, r1
 80012c4:	621a      	str	r2, [r3, #32]
 80012c6:	e00b      	b.n	80012e0 <HAL_RCC_OscConfig+0x398>
 80012c8:	4ba7      	ldr	r3, [pc, #668]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80012ca:	6a1a      	ldr	r2, [r3, #32]
 80012cc:	4ba6      	ldr	r3, [pc, #664]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80012ce:	2101      	movs	r1, #1
 80012d0:	438a      	bics	r2, r1
 80012d2:	621a      	str	r2, [r3, #32]
 80012d4:	4ba4      	ldr	r3, [pc, #656]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80012d6:	6a1a      	ldr	r2, [r3, #32]
 80012d8:	4ba3      	ldr	r3, [pc, #652]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80012da:	2104      	movs	r1, #4
 80012dc:	438a      	bics	r2, r1
 80012de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d014      	beq.n	8001312 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e8:	f7ff fa52 	bl	8000790 <HAL_GetTick>
 80012ec:	0003      	movs	r3, r0
 80012ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f0:	e009      	b.n	8001306 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	f7ff fa4d 	bl	8000790 <HAL_GetTick>
 80012f6:	0002      	movs	r2, r0
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	4a9b      	ldr	r2, [pc, #620]	@ (800156c <HAL_RCC_OscConfig+0x624>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e12b      	b.n	800155e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001306:	4b98      	ldr	r3, [pc, #608]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	2202      	movs	r2, #2
 800130c:	4013      	ands	r3, r2
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x3aa>
 8001310:	e013      	b.n	800133a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001312:	f7ff fa3d 	bl	8000790 <HAL_GetTick>
 8001316:	0003      	movs	r3, r0
 8001318:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800131a:	e009      	b.n	8001330 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800131c:	f7ff fa38 	bl	8000790 <HAL_GetTick>
 8001320:	0002      	movs	r2, r0
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	4a91      	ldr	r2, [pc, #580]	@ (800156c <HAL_RCC_OscConfig+0x624>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e116      	b.n	800155e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001330:	4b8d      	ldr	r3, [pc, #564]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	2202      	movs	r2, #2
 8001336:	4013      	ands	r3, r2
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800133a:	231f      	movs	r3, #31
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d105      	bne.n	8001350 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001344:	4b88      	ldr	r3, [pc, #544]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 8001346:	69da      	ldr	r2, [r3, #28]
 8001348:	4b87      	ldr	r3, [pc, #540]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 800134a:	4989      	ldr	r1, [pc, #548]	@ (8001570 <HAL_RCC_OscConfig+0x628>)
 800134c:	400a      	ands	r2, r1
 800134e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2210      	movs	r2, #16
 8001356:	4013      	ands	r3, r2
 8001358:	d063      	beq.n	8001422 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d12a      	bne.n	80013b8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001362:	4b81      	ldr	r3, [pc, #516]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 8001364:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001366:	4b80      	ldr	r3, [pc, #512]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 8001368:	2104      	movs	r1, #4
 800136a:	430a      	orrs	r2, r1
 800136c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800136e:	4b7e      	ldr	r3, [pc, #504]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 8001370:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001372:	4b7d      	ldr	r3, [pc, #500]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 8001374:	2101      	movs	r1, #1
 8001376:	430a      	orrs	r2, r1
 8001378:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137a:	f7ff fa09 	bl	8000790 <HAL_GetTick>
 800137e:	0003      	movs	r3, r0
 8001380:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001384:	f7ff fa04 	bl	8000790 <HAL_GetTick>
 8001388:	0002      	movs	r2, r0
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e0e3      	b.n	800155e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001396:	4b74      	ldr	r3, [pc, #464]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 8001398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800139a:	2202      	movs	r2, #2
 800139c:	4013      	ands	r3, r2
 800139e:	d0f1      	beq.n	8001384 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013a0:	4b71      	ldr	r3, [pc, #452]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80013a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a4:	22f8      	movs	r2, #248	@ 0xf8
 80013a6:	4393      	bics	r3, r2
 80013a8:	0019      	movs	r1, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	00da      	lsls	r2, r3, #3
 80013b0:	4b6d      	ldr	r3, [pc, #436]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80013b2:	430a      	orrs	r2, r1
 80013b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80013b6:	e034      	b.n	8001422 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	3305      	adds	r3, #5
 80013be:	d111      	bne.n	80013e4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80013c0:	4b69      	ldr	r3, [pc, #420]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80013c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013c4:	4b68      	ldr	r3, [pc, #416]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80013c6:	2104      	movs	r1, #4
 80013c8:	438a      	bics	r2, r1
 80013ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013cc:	4b66      	ldr	r3, [pc, #408]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80013ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d0:	22f8      	movs	r2, #248	@ 0xf8
 80013d2:	4393      	bics	r3, r2
 80013d4:	0019      	movs	r1, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	00da      	lsls	r2, r3, #3
 80013dc:	4b62      	ldr	r3, [pc, #392]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80013de:	430a      	orrs	r2, r1
 80013e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013e2:	e01e      	b.n	8001422 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013e4:	4b60      	ldr	r3, [pc, #384]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80013e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80013ea:	2104      	movs	r1, #4
 80013ec:	430a      	orrs	r2, r1
 80013ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80013f0:	4b5d      	ldr	r3, [pc, #372]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80013f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80013f6:	2101      	movs	r1, #1
 80013f8:	438a      	bics	r2, r1
 80013fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fc:	f7ff f9c8 	bl	8000790 <HAL_GetTick>
 8001400:	0003      	movs	r3, r0
 8001402:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001406:	f7ff f9c3 	bl	8000790 <HAL_GetTick>
 800140a:	0002      	movs	r2, r0
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e0a2      	b.n	800155e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001418:	4b53      	ldr	r3, [pc, #332]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 800141a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800141c:	2202      	movs	r2, #2
 800141e:	4013      	ands	r3, r2
 8001420:	d1f1      	bne.n	8001406 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d100      	bne.n	800142c <HAL_RCC_OscConfig+0x4e4>
 800142a:	e097      	b.n	800155c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800142c:	4b4e      	ldr	r3, [pc, #312]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	220c      	movs	r2, #12
 8001432:	4013      	ands	r3, r2
 8001434:	2b08      	cmp	r3, #8
 8001436:	d100      	bne.n	800143a <HAL_RCC_OscConfig+0x4f2>
 8001438:	e06b      	b.n	8001512 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d14c      	bne.n	80014dc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001442:	4b49      	ldr	r3, [pc, #292]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b48      	ldr	r3, [pc, #288]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 8001448:	494a      	ldr	r1, [pc, #296]	@ (8001574 <HAL_RCC_OscConfig+0x62c>)
 800144a:	400a      	ands	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144e:	f7ff f99f 	bl	8000790 <HAL_GetTick>
 8001452:	0003      	movs	r3, r0
 8001454:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff f99a 	bl	8000790 <HAL_GetTick>
 800145c:	0002      	movs	r2, r0
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e079      	b.n	800155e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146a:	4b3f      	ldr	r3, [pc, #252]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	2380      	movs	r3, #128	@ 0x80
 8001470:	049b      	lsls	r3, r3, #18
 8001472:	4013      	ands	r3, r2
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001476:	4b3c      	ldr	r3, [pc, #240]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 8001478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800147a:	220f      	movs	r2, #15
 800147c:	4393      	bics	r3, r2
 800147e:	0019      	movs	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001484:	4b38      	ldr	r3, [pc, #224]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 8001486:	430a      	orrs	r2, r1
 8001488:	62da      	str	r2, [r3, #44]	@ 0x2c
 800148a:	4b37      	ldr	r3, [pc, #220]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4a3a      	ldr	r2, [pc, #232]	@ (8001578 <HAL_RCC_OscConfig+0x630>)
 8001490:	4013      	ands	r3, r2
 8001492:	0019      	movs	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149c:	431a      	orrs	r2, r3
 800149e:	4b32      	ldr	r3, [pc, #200]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80014a0:	430a      	orrs	r2, r1
 80014a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a4:	4b30      	ldr	r3, [pc, #192]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80014aa:	2180      	movs	r1, #128	@ 0x80
 80014ac:	0449      	lsls	r1, r1, #17
 80014ae:	430a      	orrs	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff f96d 	bl	8000790 <HAL_GetTick>
 80014b6:	0003      	movs	r3, r0
 80014b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014bc:	f7ff f968 	bl	8000790 <HAL_GetTick>
 80014c0:	0002      	movs	r2, r0
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e047      	b.n	800155e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ce:	4b26      	ldr	r3, [pc, #152]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	2380      	movs	r3, #128	@ 0x80
 80014d4:	049b      	lsls	r3, r3, #18
 80014d6:	4013      	ands	r3, r2
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x574>
 80014da:	e03f      	b.n	800155c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014dc:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 80014e2:	4924      	ldr	r1, [pc, #144]	@ (8001574 <HAL_RCC_OscConfig+0x62c>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff f952 	bl	8000790 <HAL_GetTick>
 80014ec:	0003      	movs	r3, r0
 80014ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f2:	f7ff f94d 	bl	8000790 <HAL_GetTick>
 80014f6:	0002      	movs	r2, r0
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e02c      	b.n	800155e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001504:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2380      	movs	r3, #128	@ 0x80
 800150a:	049b      	lsls	r3, r3, #18
 800150c:	4013      	ands	r3, r2
 800150e:	d1f0      	bne.n	80014f2 <HAL_RCC_OscConfig+0x5aa>
 8001510:	e024      	b.n	800155c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d101      	bne.n	800151e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e01f      	b.n	800155e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800151e:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001524:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <HAL_RCC_OscConfig+0x620>)
 8001526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001528:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	2380      	movs	r3, #128	@ 0x80
 800152e:	025b      	lsls	r3, r3, #9
 8001530:	401a      	ands	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001536:	429a      	cmp	r2, r3
 8001538:	d10e      	bne.n	8001558 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	220f      	movs	r2, #15
 800153e:	401a      	ands	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001544:	429a      	cmp	r2, r3
 8001546:	d107      	bne.n	8001558 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	23f0      	movs	r3, #240	@ 0xf0
 800154c:	039b      	lsls	r3, r3, #14
 800154e:	401a      	ands	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001554:	429a      	cmp	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	0018      	movs	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	b008      	add	sp, #32
 8001564:	bd80      	pop	{r7, pc}
 8001566:	46c0      	nop			@ (mov r8, r8)
 8001568:	40021000 	.word	0x40021000
 800156c:	00001388 	.word	0x00001388
 8001570:	efffffff 	.word	0xefffffff
 8001574:	feffffff 	.word	0xfeffffff
 8001578:	ffc2ffff 	.word	0xffc2ffff

0800157c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0b3      	b.n	80016f8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001590:	4b5b      	ldr	r3, [pc, #364]	@ (8001700 <HAL_RCC_ClockConfig+0x184>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2201      	movs	r2, #1
 8001596:	4013      	ands	r3, r2
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d911      	bls.n	80015c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159e:	4b58      	ldr	r3, [pc, #352]	@ (8001700 <HAL_RCC_ClockConfig+0x184>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2201      	movs	r2, #1
 80015a4:	4393      	bics	r3, r2
 80015a6:	0019      	movs	r1, r3
 80015a8:	4b55      	ldr	r3, [pc, #340]	@ (8001700 <HAL_RCC_ClockConfig+0x184>)
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b0:	4b53      	ldr	r3, [pc, #332]	@ (8001700 <HAL_RCC_ClockConfig+0x184>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2201      	movs	r2, #1
 80015b6:	4013      	ands	r3, r2
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e09a      	b.n	80016f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2202      	movs	r2, #2
 80015c8:	4013      	ands	r3, r2
 80015ca:	d015      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2204      	movs	r2, #4
 80015d2:	4013      	ands	r3, r2
 80015d4:	d006      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001704 <HAL_RCC_ClockConfig+0x188>)
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	4b4a      	ldr	r3, [pc, #296]	@ (8001704 <HAL_RCC_ClockConfig+0x188>)
 80015dc:	21e0      	movs	r1, #224	@ 0xe0
 80015de:	00c9      	lsls	r1, r1, #3
 80015e0:	430a      	orrs	r2, r1
 80015e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e4:	4b47      	ldr	r3, [pc, #284]	@ (8001704 <HAL_RCC_ClockConfig+0x188>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	22f0      	movs	r2, #240	@ 0xf0
 80015ea:	4393      	bics	r3, r2
 80015ec:	0019      	movs	r1, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	4b44      	ldr	r3, [pc, #272]	@ (8001704 <HAL_RCC_ClockConfig+0x188>)
 80015f4:	430a      	orrs	r2, r1
 80015f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2201      	movs	r2, #1
 80015fe:	4013      	ands	r3, r2
 8001600:	d040      	beq.n	8001684 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	4b3e      	ldr	r3, [pc, #248]	@ (8001704 <HAL_RCC_ClockConfig+0x188>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	2380      	movs	r3, #128	@ 0x80
 8001610:	029b      	lsls	r3, r3, #10
 8001612:	4013      	ands	r3, r2
 8001614:	d114      	bne.n	8001640 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e06e      	b.n	80016f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d107      	bne.n	8001632 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001622:	4b38      	ldr	r3, [pc, #224]	@ (8001704 <HAL_RCC_ClockConfig+0x188>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	2380      	movs	r3, #128	@ 0x80
 8001628:	049b      	lsls	r3, r3, #18
 800162a:	4013      	ands	r3, r2
 800162c:	d108      	bne.n	8001640 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e062      	b.n	80016f8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001632:	4b34      	ldr	r3, [pc, #208]	@ (8001704 <HAL_RCC_ClockConfig+0x188>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2202      	movs	r2, #2
 8001638:	4013      	ands	r3, r2
 800163a:	d101      	bne.n	8001640 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e05b      	b.n	80016f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001640:	4b30      	ldr	r3, [pc, #192]	@ (8001704 <HAL_RCC_ClockConfig+0x188>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2203      	movs	r2, #3
 8001646:	4393      	bics	r3, r2
 8001648:	0019      	movs	r1, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	4b2d      	ldr	r3, [pc, #180]	@ (8001704 <HAL_RCC_ClockConfig+0x188>)
 8001650:	430a      	orrs	r2, r1
 8001652:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001654:	f7ff f89c 	bl	8000790 <HAL_GetTick>
 8001658:	0003      	movs	r3, r0
 800165a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165c:	e009      	b.n	8001672 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800165e:	f7ff f897 	bl	8000790 <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	4a27      	ldr	r2, [pc, #156]	@ (8001708 <HAL_RCC_ClockConfig+0x18c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e042      	b.n	80016f8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001672:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <HAL_RCC_ClockConfig+0x188>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	220c      	movs	r2, #12
 8001678:	401a      	ands	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	429a      	cmp	r2, r3
 8001682:	d1ec      	bne.n	800165e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001684:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <HAL_RCC_ClockConfig+0x184>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2201      	movs	r2, #1
 800168a:	4013      	ands	r3, r2
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d211      	bcs.n	80016b6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001692:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <HAL_RCC_ClockConfig+0x184>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2201      	movs	r2, #1
 8001698:	4393      	bics	r3, r2
 800169a:	0019      	movs	r1, r3
 800169c:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <HAL_RCC_ClockConfig+0x184>)
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a4:	4b16      	ldr	r3, [pc, #88]	@ (8001700 <HAL_RCC_ClockConfig+0x184>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2201      	movs	r2, #1
 80016aa:	4013      	ands	r3, r2
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e020      	b.n	80016f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2204      	movs	r2, #4
 80016bc:	4013      	ands	r3, r2
 80016be:	d009      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016c0:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <HAL_RCC_ClockConfig+0x188>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a11      	ldr	r2, [pc, #68]	@ (800170c <HAL_RCC_ClockConfig+0x190>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	0019      	movs	r1, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <HAL_RCC_ClockConfig+0x188>)
 80016d0:	430a      	orrs	r2, r1
 80016d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80016d4:	f000 f820 	bl	8001718 <HAL_RCC_GetSysClockFreq>
 80016d8:	0001      	movs	r1, r0
 80016da:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <HAL_RCC_ClockConfig+0x188>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	091b      	lsrs	r3, r3, #4
 80016e0:	220f      	movs	r2, #15
 80016e2:	4013      	ands	r3, r2
 80016e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <HAL_RCC_ClockConfig+0x194>)
 80016e6:	5cd3      	ldrb	r3, [r2, r3]
 80016e8:	000a      	movs	r2, r1
 80016ea:	40da      	lsrs	r2, r3
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <HAL_RCC_ClockConfig+0x198>)
 80016ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016f0:	2003      	movs	r0, #3
 80016f2:	f7ff f807 	bl	8000704 <HAL_InitTick>
  
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b004      	add	sp, #16
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40022000 	.word	0x40022000
 8001704:	40021000 	.word	0x40021000
 8001708:	00001388 	.word	0x00001388
 800170c:	fffff8ff 	.word	0xfffff8ff
 8001710:	08002b2c 	.word	0x08002b2c
 8001714:	20000018 	.word	0x20000018

08001718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001732:	4b20      	ldr	r3, [pc, #128]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	220c      	movs	r2, #12
 800173c:	4013      	ands	r3, r2
 800173e:	2b04      	cmp	r3, #4
 8001740:	d002      	beq.n	8001748 <HAL_RCC_GetSysClockFreq+0x30>
 8001742:	2b08      	cmp	r3, #8
 8001744:	d003      	beq.n	800174e <HAL_RCC_GetSysClockFreq+0x36>
 8001746:	e02c      	b.n	80017a2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001748:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800174a:	613b      	str	r3, [r7, #16]
      break;
 800174c:	e02c      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	0c9b      	lsrs	r3, r3, #18
 8001752:	220f      	movs	r2, #15
 8001754:	4013      	ands	r3, r2
 8001756:	4a19      	ldr	r2, [pc, #100]	@ (80017bc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800175c:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800175e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001760:	220f      	movs	r2, #15
 8001762:	4013      	ands	r3, r2
 8001764:	4a16      	ldr	r2, [pc, #88]	@ (80017c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001766:	5cd3      	ldrb	r3, [r2, r3]
 8001768:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	2380      	movs	r3, #128	@ 0x80
 800176e:	025b      	lsls	r3, r3, #9
 8001770:	4013      	ands	r3, r2
 8001772:	d009      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	4810      	ldr	r0, [pc, #64]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001778:	f7fe fcc6 	bl	8000108 <__udivsi3>
 800177c:	0003      	movs	r3, r0
 800177e:	001a      	movs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4353      	muls	r3, r2
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e009      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	000a      	movs	r2, r1
 800178c:	0152      	lsls	r2, r2, #5
 800178e:	1a52      	subs	r2, r2, r1
 8001790:	0193      	lsls	r3, r2, #6
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	185b      	adds	r3, r3, r1
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	613b      	str	r3, [r7, #16]
      break;
 80017a0:	e002      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017a2:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017a4:	613b      	str	r3, [r7, #16]
      break;
 80017a6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017a8:	693b      	ldr	r3, [r7, #16]
}
 80017aa:	0018      	movs	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b006      	add	sp, #24
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	40021000 	.word	0x40021000
 80017b8:	007a1200 	.word	0x007a1200
 80017bc:	08002b44 	.word	0x08002b44
 80017c0:	08002b54 	.word	0x08002b54

080017c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017c8:	4b02      	ldr	r3, [pc, #8]	@ (80017d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	0018      	movs	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	20000018 	.word	0x20000018

080017d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80017dc:	f7ff fff2 	bl	80017c4 <HAL_RCC_GetHCLKFreq>
 80017e0:	0001      	movs	r1, r0
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	2207      	movs	r2, #7
 80017ea:	4013      	ands	r3, r2
 80017ec:	4a04      	ldr	r2, [pc, #16]	@ (8001800 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017ee:	5cd3      	ldrb	r3, [r2, r3]
 80017f0:	40d9      	lsrs	r1, r3
 80017f2:	000b      	movs	r3, r1
}    
 80017f4:	0018      	movs	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	40021000 	.word	0x40021000
 8001800:	08002b3c 	.word	0x08002b3c

08001804 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	2380      	movs	r3, #128	@ 0x80
 800181a:	025b      	lsls	r3, r3, #9
 800181c:	4013      	ands	r3, r2
 800181e:	d100      	bne.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001820:	e08e      	b.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001822:	2017      	movs	r0, #23
 8001824:	183b      	adds	r3, r7, r0
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182a:	4b5f      	ldr	r3, [pc, #380]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800182c:	69da      	ldr	r2, [r3, #28]
 800182e:	2380      	movs	r3, #128	@ 0x80
 8001830:	055b      	lsls	r3, r3, #21
 8001832:	4013      	ands	r3, r2
 8001834:	d110      	bne.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b5c      	ldr	r3, [pc, #368]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001838:	69da      	ldr	r2, [r3, #28]
 800183a:	4b5b      	ldr	r3, [pc, #364]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800183c:	2180      	movs	r1, #128	@ 0x80
 800183e:	0549      	lsls	r1, r1, #21
 8001840:	430a      	orrs	r2, r1
 8001842:	61da      	str	r2, [r3, #28]
 8001844:	4b58      	ldr	r3, [pc, #352]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001846:	69da      	ldr	r2, [r3, #28]
 8001848:	2380      	movs	r3, #128	@ 0x80
 800184a:	055b      	lsls	r3, r3, #21
 800184c:	4013      	ands	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001852:	183b      	adds	r3, r7, r0
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	4b54      	ldr	r3, [pc, #336]	@ (80019ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2380      	movs	r3, #128	@ 0x80
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4013      	ands	r3, r2
 8001862:	d11a      	bne.n	800189a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001864:	4b51      	ldr	r3, [pc, #324]	@ (80019ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b50      	ldr	r3, [pc, #320]	@ (80019ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800186a:	2180      	movs	r1, #128	@ 0x80
 800186c:	0049      	lsls	r1, r1, #1
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001872:	f7fe ff8d 	bl	8000790 <HAL_GetTick>
 8001876:	0003      	movs	r3, r0
 8001878:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187a:	e008      	b.n	800188e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187c:	f7fe ff88 	bl	8000790 <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	@ 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e087      	b.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188e:	4b47      	ldr	r3, [pc, #284]	@ (80019ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	2380      	movs	r3, #128	@ 0x80
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4013      	ands	r3, r2
 8001898:	d0f0      	beq.n	800187c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800189a:	4b43      	ldr	r3, [pc, #268]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800189c:	6a1a      	ldr	r2, [r3, #32]
 800189e:	23c0      	movs	r3, #192	@ 0xc0
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4013      	ands	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d034      	beq.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	23c0      	movs	r3, #192	@ 0xc0
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4013      	ands	r3, r2
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d02c      	beq.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018bc:	4b3a      	ldr	r3, [pc, #232]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	4a3b      	ldr	r2, [pc, #236]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018c6:	4b38      	ldr	r3, [pc, #224]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018c8:	6a1a      	ldr	r2, [r3, #32]
 80018ca:	4b37      	ldr	r3, [pc, #220]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018cc:	2180      	movs	r1, #128	@ 0x80
 80018ce:	0249      	lsls	r1, r1, #9
 80018d0:	430a      	orrs	r2, r1
 80018d2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018d4:	4b34      	ldr	r3, [pc, #208]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018d6:	6a1a      	ldr	r2, [r3, #32]
 80018d8:	4b33      	ldr	r3, [pc, #204]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018da:	4936      	ldr	r1, [pc, #216]	@ (80019b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80018dc:	400a      	ands	r2, r1
 80018de:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80018e0:	4b31      	ldr	r3, [pc, #196]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2201      	movs	r2, #1
 80018ea:	4013      	ands	r3, r2
 80018ec:	d013      	beq.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7fe ff4f 	bl	8000790 <HAL_GetTick>
 80018f2:	0003      	movs	r3, r0
 80018f4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f6:	e009      	b.n	800190c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f8:	f7fe ff4a 	bl	8000790 <HAL_GetTick>
 80018fc:	0002      	movs	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	4a2d      	ldr	r2, [pc, #180]	@ (80019b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d901      	bls.n	800190c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e048      	b.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190c:	4b26      	ldr	r3, [pc, #152]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	2202      	movs	r2, #2
 8001912:	4013      	ands	r3, r2
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001916:	4b24      	ldr	r3, [pc, #144]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4a25      	ldr	r2, [pc, #148]	@ (80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800191c:	4013      	ands	r3, r2
 800191e:	0019      	movs	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	4b20      	ldr	r3, [pc, #128]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001926:	430a      	orrs	r2, r1
 8001928:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800192a:	2317      	movs	r3, #23
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d105      	bne.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001934:	4b1c      	ldr	r3, [pc, #112]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001936:	69da      	ldr	r2, [r3, #28]
 8001938:	4b1b      	ldr	r3, [pc, #108]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800193a:	4920      	ldr	r1, [pc, #128]	@ (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800193c:	400a      	ands	r2, r1
 800193e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2201      	movs	r2, #1
 8001946:	4013      	ands	r3, r2
 8001948:	d009      	beq.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800194a:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	2203      	movs	r2, #3
 8001950:	4393      	bics	r3, r2
 8001952:	0019      	movs	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800195a:	430a      	orrs	r2, r1
 800195c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2220      	movs	r2, #32
 8001964:	4013      	ands	r3, r2
 8001966:	d009      	beq.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001968:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196c:	2210      	movs	r2, #16
 800196e:	4393      	bics	r3, r2
 8001970:	0019      	movs	r1, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001978:	430a      	orrs	r2, r1
 800197a:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2380      	movs	r3, #128	@ 0x80
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4013      	ands	r3, r2
 8001986:	d009      	beq.n	800199c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001988:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198c:	2240      	movs	r2, #64	@ 0x40
 800198e:	4393      	bics	r3, r2
 8001990:	0019      	movs	r1, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	4b04      	ldr	r3, [pc, #16]	@ (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001998:	430a      	orrs	r2, r1
 800199a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b006      	add	sp, #24
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			@ (mov r8, r8)
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40007000 	.word	0x40007000
 80019b0:	fffffcff 	.word	0xfffffcff
 80019b4:	fffeffff 	.word	0xfffeffff
 80019b8:	00001388 	.word	0x00001388
 80019bc:	efffffff 	.word	0xefffffff

080019c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e044      	b.n	8001a5c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d107      	bne.n	80019ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2278      	movs	r2, #120	@ 0x78
 80019de:	2100      	movs	r1, #0
 80019e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	0018      	movs	r0, r3
 80019e6:	f7fe fd97 	bl	8000518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2224      	movs	r2, #36	@ 0x24
 80019ee:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2101      	movs	r1, #1
 80019fc:	438a      	bics	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f000 fddc 	bl	80025c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	0018      	movs	r0, r3
 8001a14:	f000 fc98 	bl	8002348 <UART_SetConfig>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e01c      	b.n	8001a5c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	490d      	ldr	r1, [pc, #52]	@ (8001a64 <HAL_UART_Init+0xa4>)
 8001a2e:	400a      	ands	r2, r1
 8001a30:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	212a      	movs	r1, #42	@ 0x2a
 8001a3e:	438a      	bics	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	0018      	movs	r0, r3
 8001a56:	f000 fe6b 	bl	8002730 <UART_CheckIdleState>
 8001a5a:	0003      	movs	r3, r0
}
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	b002      	add	sp, #8
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	ffffb7ff 	.word	0xffffb7ff

08001a68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	@ 0x28
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	1dbb      	adds	r3, r7, #6
 8001a76:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	d000      	beq.n	8001a82 <HAL_UART_Transmit+0x1a>
 8001a80:	e08c      	b.n	8001b9c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_UART_Transmit+0x28>
 8001a88:	1dbb      	adds	r3, r7, #6
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e084      	b.n	8001b9e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	2380      	movs	r3, #128	@ 0x80
 8001a9a:	015b      	lsls	r3, r3, #5
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d109      	bne.n	8001ab4 <HAL_UART_Transmit+0x4c>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d105      	bne.n	8001ab4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4013      	ands	r3, r2
 8001aae:	d001      	beq.n	8001ab4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e074      	b.n	8001b9e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2284      	movs	r2, #132	@ 0x84
 8001ab8:	2100      	movs	r1, #0
 8001aba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2221      	movs	r2, #33	@ 0x21
 8001ac0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ac2:	f7fe fe65 	bl	8000790 <HAL_GetTick>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1dba      	adds	r2, r7, #6
 8001ace:	2150      	movs	r1, #80	@ 0x50
 8001ad0:	8812      	ldrh	r2, [r2, #0]
 8001ad2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	1dba      	adds	r2, r7, #6
 8001ad8:	2152      	movs	r1, #82	@ 0x52
 8001ada:	8812      	ldrh	r2, [r2, #0]
 8001adc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	2380      	movs	r3, #128	@ 0x80
 8001ae4:	015b      	lsls	r3, r3, #5
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d108      	bne.n	8001afc <HAL_UART_Transmit+0x94>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d104      	bne.n	8001afc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	e003      	b.n	8001b04 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b04:	e02f      	b.n	8001b66 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	0013      	movs	r3, r2
 8001b10:	2200      	movs	r2, #0
 8001b12:	2180      	movs	r1, #128	@ 0x80
 8001b14:	f000 feb4 	bl	8002880 <UART_WaitOnFlagUntilTimeout>
 8001b18:	1e03      	subs	r3, r0, #0
 8001b1a:	d004      	beq.n	8001b26 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e03b      	b.n	8001b9e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10b      	bne.n	8001b44 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	881a      	ldrh	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	05d2      	lsls	r2, r2, #23
 8001b36:	0dd2      	lsrs	r2, r2, #23
 8001b38:	b292      	uxth	r2, r2
 8001b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	3302      	adds	r3, #2
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	e007      	b.n	8001b54 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3301      	adds	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2252      	movs	r2, #82	@ 0x52
 8001b58:	5a9b      	ldrh	r3, [r3, r2]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b299      	uxth	r1, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2252      	movs	r2, #82	@ 0x52
 8001b64:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2252      	movs	r2, #82	@ 0x52
 8001b6a:	5a9b      	ldrh	r3, [r3, r2]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1c9      	bne.n	8001b06 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	0013      	movs	r3, r2
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2140      	movs	r1, #64	@ 0x40
 8001b80:	f000 fe7e 	bl	8002880 <UART_WaitOnFlagUntilTimeout>
 8001b84:	1e03      	subs	r3, r0, #0
 8001b86:	d004      	beq.n	8001b92 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e005      	b.n	8001b9e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2220      	movs	r2, #32
 8001b96:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e000      	b.n	8001b9e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001b9c:	2302      	movs	r3, #2
  }
}
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b008      	add	sp, #32
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	@ 0x28
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	1dbb      	adds	r3, r7, #6
 8001bb6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2280      	movs	r2, #128	@ 0x80
 8001bbc:	589b      	ldr	r3, [r3, r2]
 8001bbe:	2b20      	cmp	r3, #32
 8001bc0:	d000      	beq.n	8001bc4 <HAL_UART_Receive+0x1c>
 8001bc2:	e0bd      	b.n	8001d40 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_UART_Receive+0x2a>
 8001bca:	1dbb      	adds	r3, r7, #6
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e0b5      	b.n	8001d42 <HAL_UART_Receive+0x19a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	2380      	movs	r3, #128	@ 0x80
 8001bdc:	015b      	lsls	r3, r3, #5
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d109      	bne.n	8001bf6 <HAL_UART_Receive+0x4e>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d105      	bne.n	8001bf6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2201      	movs	r2, #1
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d001      	beq.n	8001bf6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0a5      	b.n	8001d42 <HAL_UART_Receive+0x19a>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2284      	movs	r2, #132	@ 0x84
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2280      	movs	r2, #128	@ 0x80
 8001c02:	2122      	movs	r1, #34	@ 0x22
 8001c04:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c0c:	f7fe fdc0 	bl	8000790 <HAL_GetTick>
 8001c10:	0003      	movs	r3, r0
 8001c12:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1dba      	adds	r2, r7, #6
 8001c18:	2158      	movs	r1, #88	@ 0x58
 8001c1a:	8812      	ldrh	r2, [r2, #0]
 8001c1c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1dba      	adds	r2, r7, #6
 8001c22:	215a      	movs	r1, #90	@ 0x5a
 8001c24:	8812      	ldrh	r2, [r2, #0]
 8001c26:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	2380      	movs	r3, #128	@ 0x80
 8001c2e:	015b      	lsls	r3, r3, #5
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d10d      	bne.n	8001c50 <HAL_UART_Receive+0xa8>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d104      	bne.n	8001c46 <HAL_UART_Receive+0x9e>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	225c      	movs	r2, #92	@ 0x5c
 8001c40:	4942      	ldr	r1, [pc, #264]	@ (8001d4c <HAL_UART_Receive+0x1a4>)
 8001c42:	5299      	strh	r1, [r3, r2]
 8001c44:	e01a      	b.n	8001c7c <HAL_UART_Receive+0xd4>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	225c      	movs	r2, #92	@ 0x5c
 8001c4a:	21ff      	movs	r1, #255	@ 0xff
 8001c4c:	5299      	strh	r1, [r3, r2]
 8001c4e:	e015      	b.n	8001c7c <HAL_UART_Receive+0xd4>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10d      	bne.n	8001c74 <HAL_UART_Receive+0xcc>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d104      	bne.n	8001c6a <HAL_UART_Receive+0xc2>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	225c      	movs	r2, #92	@ 0x5c
 8001c64:	21ff      	movs	r1, #255	@ 0xff
 8001c66:	5299      	strh	r1, [r3, r2]
 8001c68:	e008      	b.n	8001c7c <HAL_UART_Receive+0xd4>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	225c      	movs	r2, #92	@ 0x5c
 8001c6e:	217f      	movs	r1, #127	@ 0x7f
 8001c70:	5299      	strh	r1, [r3, r2]
 8001c72:	e003      	b.n	8001c7c <HAL_UART_Receive+0xd4>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	225c      	movs	r2, #92	@ 0x5c
 8001c78:	2100      	movs	r1, #0
 8001c7a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001c7c:	2312      	movs	r3, #18
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	215c      	movs	r1, #92	@ 0x5c
 8001c84:	5a52      	ldrh	r2, [r2, r1]
 8001c86:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	2380      	movs	r3, #128	@ 0x80
 8001c8e:	015b      	lsls	r3, r3, #5
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d108      	bne.n	8001ca6 <HAL_UART_Receive+0xfe>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d104      	bne.n	8001ca6 <HAL_UART_Receive+0xfe>
    {
      pdata8bits  = NULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	e003      	b.n	8001cae <HAL_UART_Receive+0x106>
    }
    else
    {
      pdata8bits  = pData;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001cae:	e03b      	b.n	8001d28 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	0013      	movs	r3, r2
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2120      	movs	r1, #32
 8001cbe:	f000 fddf 	bl	8002880 <UART_WaitOnFlagUntilTimeout>
 8001cc2:	1e03      	subs	r3, r0, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_UART_Receive+0x12a>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2280      	movs	r2, #128	@ 0x80
 8001cca:	2120      	movs	r1, #32
 8001ccc:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e037      	b.n	8001d42 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10e      	bne.n	8001cf6 <HAL_UART_Receive+0x14e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	2212      	movs	r2, #18
 8001ce2:	18ba      	adds	r2, r7, r2
 8001ce4:	8812      	ldrh	r2, [r2, #0]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	e00f      	b.n	8001d16 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2212      	movs	r2, #18
 8001d02:	18ba      	adds	r2, r7, r2
 8001d04:	8812      	ldrh	r2, [r2, #0]
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	3301      	adds	r3, #1
 8001d14:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	225a      	movs	r2, #90	@ 0x5a
 8001d1a:	5a9b      	ldrh	r3, [r3, r2]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b299      	uxth	r1, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	225a      	movs	r2, #90	@ 0x5a
 8001d26:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	225a      	movs	r2, #90	@ 0x5a
 8001d2c:	5a9b      	ldrh	r3, [r3, r2]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1bd      	bne.n	8001cb0 <HAL_UART_Receive+0x108>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2280      	movs	r2, #128	@ 0x80
 8001d38:	2120      	movs	r1, #32
 8001d3a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e000      	b.n	8001d42 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8001d40:	2302      	movs	r3, #2
  }
}
 8001d42:	0018      	movs	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b008      	add	sp, #32
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			@ (mov r8, r8)
 8001d4c:	000001ff 	.word	0x000001ff

08001d50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b0ab      	sub	sp, #172	@ 0xac
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	22a4      	movs	r2, #164	@ 0xa4
 8001d60:	18b9      	adds	r1, r7, r2
 8001d62:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	20a0      	movs	r0, #160	@ 0xa0
 8001d6c:	1839      	adds	r1, r7, r0
 8001d6e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	219c      	movs	r1, #156	@ 0x9c
 8001d78:	1879      	adds	r1, r7, r1
 8001d7a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001d7c:	0011      	movs	r1, r2
 8001d7e:	18bb      	adds	r3, r7, r2
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a99      	ldr	r2, [pc, #612]	@ (8001fe8 <HAL_UART_IRQHandler+0x298>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	2298      	movs	r2, #152	@ 0x98
 8001d88:	18bc      	adds	r4, r7, r2
 8001d8a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001d8c:	18bb      	adds	r3, r7, r2
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d114      	bne.n	8001dbe <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001d94:	187b      	adds	r3, r7, r1
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d00f      	beq.n	8001dbe <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d9e:	183b      	adds	r3, r7, r0
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2220      	movs	r2, #32
 8001da4:	4013      	ands	r3, r2
 8001da6:	d00a      	beq.n	8001dbe <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d100      	bne.n	8001db2 <HAL_UART_IRQHandler+0x62>
 8001db0:	e29e      	b.n	80022f0 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	0010      	movs	r0, r2
 8001dba:	4798      	blx	r3
      }
      return;
 8001dbc:	e298      	b.n	80022f0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001dbe:	2398      	movs	r3, #152	@ 0x98
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d100      	bne.n	8001dca <HAL_UART_IRQHandler+0x7a>
 8001dc8:	e114      	b.n	8001ff4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001dca:	239c      	movs	r3, #156	@ 0x9c
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d106      	bne.n	8001de4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001dd6:	23a0      	movs	r3, #160	@ 0xa0
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a83      	ldr	r2, [pc, #524]	@ (8001fec <HAL_UART_IRQHandler+0x29c>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	d100      	bne.n	8001de4 <HAL_UART_IRQHandler+0x94>
 8001de2:	e107      	b.n	8001ff4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001de4:	23a4      	movs	r3, #164	@ 0xa4
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2201      	movs	r2, #1
 8001dec:	4013      	ands	r3, r2
 8001dee:	d012      	beq.n	8001e16 <HAL_UART_IRQHandler+0xc6>
 8001df0:	23a0      	movs	r3, #160	@ 0xa0
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	2380      	movs	r3, #128	@ 0x80
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d00b      	beq.n	8001e16 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2201      	movs	r2, #1
 8001e04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2284      	movs	r2, #132	@ 0x84
 8001e0a:	589b      	ldr	r3, [r3, r2]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2184      	movs	r1, #132	@ 0x84
 8001e14:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e16:	23a4      	movs	r3, #164	@ 0xa4
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d011      	beq.n	8001e46 <HAL_UART_IRQHandler+0xf6>
 8001e22:	239c      	movs	r3, #156	@ 0x9c
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d00b      	beq.n	8001e46 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2202      	movs	r2, #2
 8001e34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2284      	movs	r2, #132	@ 0x84
 8001e3a:	589b      	ldr	r3, [r3, r2]
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2184      	movs	r1, #132	@ 0x84
 8001e44:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e46:	23a4      	movs	r3, #164	@ 0xa4
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d011      	beq.n	8001e76 <HAL_UART_IRQHandler+0x126>
 8001e52:	239c      	movs	r3, #156	@ 0x9c
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d00b      	beq.n	8001e76 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2204      	movs	r2, #4
 8001e64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2284      	movs	r2, #132	@ 0x84
 8001e6a:	589b      	ldr	r3, [r3, r2]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2184      	movs	r1, #132	@ 0x84
 8001e74:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001e76:	23a4      	movs	r3, #164	@ 0xa4
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d017      	beq.n	8001eb2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001e82:	23a0      	movs	r3, #160	@ 0xa0
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d105      	bne.n	8001e9a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001e8e:	239c      	movs	r3, #156	@ 0x9c
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2201      	movs	r2, #1
 8001e96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001e98:	d00b      	beq.n	8001eb2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2208      	movs	r2, #8
 8001ea0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2284      	movs	r2, #132	@ 0x84
 8001ea6:	589b      	ldr	r3, [r3, r2]
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2184      	movs	r1, #132	@ 0x84
 8001eb0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001eb2:	23a4      	movs	r3, #164	@ 0xa4
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2380      	movs	r3, #128	@ 0x80
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d013      	beq.n	8001ee8 <HAL_UART_IRQHandler+0x198>
 8001ec0:	23a0      	movs	r3, #160	@ 0xa0
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	2380      	movs	r3, #128	@ 0x80
 8001ec8:	04db      	lsls	r3, r3, #19
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d00c      	beq.n	8001ee8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2280      	movs	r2, #128	@ 0x80
 8001ed4:	0112      	lsls	r2, r2, #4
 8001ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2284      	movs	r2, #132	@ 0x84
 8001edc:	589b      	ldr	r3, [r3, r2]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2184      	movs	r1, #132	@ 0x84
 8001ee6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2284      	movs	r2, #132	@ 0x84
 8001eec:	589b      	ldr	r3, [r3, r2]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d100      	bne.n	8001ef4 <HAL_UART_IRQHandler+0x1a4>
 8001ef2:	e1ff      	b.n	80022f4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001ef4:	23a4      	movs	r3, #164	@ 0xa4
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2220      	movs	r2, #32
 8001efc:	4013      	ands	r3, r2
 8001efe:	d00e      	beq.n	8001f1e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001f00:	23a0      	movs	r3, #160	@ 0xa0
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2220      	movs	r2, #32
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d008      	beq.n	8001f1e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d004      	beq.n	8001f1e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	0010      	movs	r0, r2
 8001f1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2284      	movs	r2, #132	@ 0x84
 8001f22:	589b      	ldr	r3, [r3, r2]
 8001f24:	2194      	movs	r1, #148	@ 0x94
 8001f26:	187a      	adds	r2, r7, r1
 8001f28:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2240      	movs	r2, #64	@ 0x40
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b40      	cmp	r3, #64	@ 0x40
 8001f36:	d004      	beq.n	8001f42 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001f38:	187b      	adds	r3, r7, r1
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2228      	movs	r2, #40	@ 0x28
 8001f3e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f40:	d047      	beq.n	8001fd2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 fd0b 	bl	8002960 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2240      	movs	r2, #64	@ 0x40
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b40      	cmp	r3, #64	@ 0x40
 8001f56:	d137      	bne.n	8001fc8 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f58:	f3ef 8310 	mrs	r3, PRIMASK
 8001f5c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8001f5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f60:	2090      	movs	r0, #144	@ 0x90
 8001f62:	183a      	adds	r2, r7, r0
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	2301      	movs	r3, #1
 8001f68:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f6c:	f383 8810 	msr	PRIMASK, r3
}
 8001f70:	46c0      	nop			@ (mov r8, r8)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2140      	movs	r1, #64	@ 0x40
 8001f7e:	438a      	bics	r2, r1
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	183b      	adds	r3, r7, r0
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f8a:	f383 8810 	msr	PRIMASK, r3
}
 8001f8e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d012      	beq.n	8001fbe <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f9c:	4a14      	ldr	r2, [pc, #80]	@ (8001ff0 <HAL_UART_IRQHandler+0x2a0>)
 8001f9e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f7fe fd5b 	bl	8000a60 <HAL_DMA_Abort_IT>
 8001faa:	1e03      	subs	r3, r0, #0
 8001fac:	d01a      	beq.n	8001fe4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fb8:	0018      	movs	r0, r3
 8001fba:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fbc:	e012      	b.n	8001fe4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f000 f9ad 	bl	8002320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc6:	e00d      	b.n	8001fe4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f000 f9a8 	bl	8002320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fd0:	e008      	b.n	8001fe4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f000 f9a3 	bl	8002320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2284      	movs	r2, #132	@ 0x84
 8001fde:	2100      	movs	r1, #0
 8001fe0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001fe2:	e187      	b.n	80022f4 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fe4:	46c0      	nop			@ (mov r8, r8)
    return;
 8001fe6:	e185      	b.n	80022f4 <HAL_UART_IRQHandler+0x5a4>
 8001fe8:	0000080f 	.word	0x0000080f
 8001fec:	04000120 	.word	0x04000120
 8001ff0:	08002a29 	.word	0x08002a29

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d000      	beq.n	8001ffe <HAL_UART_IRQHandler+0x2ae>
 8001ffc:	e139      	b.n	8002272 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001ffe:	23a4      	movs	r3, #164	@ 0xa4
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2210      	movs	r2, #16
 8002006:	4013      	ands	r3, r2
 8002008:	d100      	bne.n	800200c <HAL_UART_IRQHandler+0x2bc>
 800200a:	e132      	b.n	8002272 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800200c:	23a0      	movs	r3, #160	@ 0xa0
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2210      	movs	r2, #16
 8002014:	4013      	ands	r3, r2
 8002016:	d100      	bne.n	800201a <HAL_UART_IRQHandler+0x2ca>
 8002018:	e12b      	b.n	8002272 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2210      	movs	r2, #16
 8002020:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2240      	movs	r2, #64	@ 0x40
 800202a:	4013      	ands	r3, r2
 800202c:	2b40      	cmp	r3, #64	@ 0x40
 800202e:	d000      	beq.n	8002032 <HAL_UART_IRQHandler+0x2e2>
 8002030:	e09f      	b.n	8002172 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	217e      	movs	r1, #126	@ 0x7e
 800203c:	187b      	adds	r3, r7, r1
 800203e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002040:	187b      	adds	r3, r7, r1
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d100      	bne.n	800204a <HAL_UART_IRQHandler+0x2fa>
 8002048:	e156      	b.n	80022f8 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2258      	movs	r2, #88	@ 0x58
 800204e:	5a9b      	ldrh	r3, [r3, r2]
 8002050:	187a      	adds	r2, r7, r1
 8002052:	8812      	ldrh	r2, [r2, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d300      	bcc.n	800205a <HAL_UART_IRQHandler+0x30a>
 8002058:	e14e      	b.n	80022f8 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	187a      	adds	r2, r7, r1
 800205e:	215a      	movs	r1, #90	@ 0x5a
 8002060:	8812      	ldrh	r2, [r2, #0]
 8002062:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b20      	cmp	r3, #32
 800206c:	d06f      	beq.n	800214e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800206e:	f3ef 8310 	mrs	r3, PRIMASK
 8002072:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002076:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002078:	2301      	movs	r3, #1
 800207a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800207c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800207e:	f383 8810 	msr	PRIMASK, r3
}
 8002082:	46c0      	nop			@ (mov r8, r8)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	499e      	ldr	r1, [pc, #632]	@ (8002308 <HAL_UART_IRQHandler+0x5b8>)
 8002090:	400a      	ands	r2, r1
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002096:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800209a:	f383 8810 	msr	PRIMASK, r3
}
 800209e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020a0:	f3ef 8310 	mrs	r3, PRIMASK
 80020a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80020a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80020aa:	2301      	movs	r3, #1
 80020ac:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020b0:	f383 8810 	msr	PRIMASK, r3
}
 80020b4:	46c0      	nop			@ (mov r8, r8)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2101      	movs	r1, #1
 80020c2:	438a      	bics	r2, r1
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020c8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020cc:	f383 8810 	msr	PRIMASK, r3
}
 80020d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020d2:	f3ef 8310 	mrs	r3, PRIMASK
 80020d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80020d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020da:	673b      	str	r3, [r7, #112]	@ 0x70
 80020dc:	2301      	movs	r3, #1
 80020de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020e2:	f383 8810 	msr	PRIMASK, r3
}
 80020e6:	46c0      	nop			@ (mov r8, r8)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2140      	movs	r1, #64	@ 0x40
 80020f4:	438a      	bics	r2, r1
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020fa:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020fe:	f383 8810 	msr	PRIMASK, r3
}
 8002102:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2280      	movs	r2, #128	@ 0x80
 8002108:	2120      	movs	r1, #32
 800210a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002112:	f3ef 8310 	mrs	r3, PRIMASK
 8002116:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800211a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800211c:	2301      	movs	r3, #1
 800211e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002120:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002122:	f383 8810 	msr	PRIMASK, r3
}
 8002126:	46c0      	nop			@ (mov r8, r8)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2110      	movs	r1, #16
 8002134:	438a      	bics	r2, r1
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800213a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800213c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800213e:	f383 8810 	msr	PRIMASK, r3
}
 8002142:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002148:	0018      	movs	r0, r3
 800214a:	f7fe fc51 	bl	80009f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2202      	movs	r2, #2
 8002152:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2258      	movs	r2, #88	@ 0x58
 8002158:	5a9a      	ldrh	r2, [r3, r2]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	215a      	movs	r1, #90	@ 0x5a
 800215e:	5a5b      	ldrh	r3, [r3, r1]
 8002160:	b29b      	uxth	r3, r3
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	b29a      	uxth	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	0011      	movs	r1, r2
 800216a:	0018      	movs	r0, r3
 800216c:	f000 f8e0 	bl	8002330 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002170:	e0c2      	b.n	80022f8 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2258      	movs	r2, #88	@ 0x58
 8002176:	5a99      	ldrh	r1, [r3, r2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	225a      	movs	r2, #90	@ 0x5a
 800217c:	5a9b      	ldrh	r3, [r3, r2]
 800217e:	b29a      	uxth	r2, r3
 8002180:	208e      	movs	r0, #142	@ 0x8e
 8002182:	183b      	adds	r3, r7, r0
 8002184:	1a8a      	subs	r2, r1, r2
 8002186:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	225a      	movs	r2, #90	@ 0x5a
 800218c:	5a9b      	ldrh	r3, [r3, r2]
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d100      	bne.n	8002196 <HAL_UART_IRQHandler+0x446>
 8002194:	e0b2      	b.n	80022fc <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002196:	183b      	adds	r3, r7, r0
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d100      	bne.n	80021a0 <HAL_UART_IRQHandler+0x450>
 800219e:	e0ad      	b.n	80022fc <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021a0:	f3ef 8310 	mrs	r3, PRIMASK
 80021a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80021a6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021a8:	2488      	movs	r4, #136	@ 0x88
 80021aa:	193a      	adds	r2, r7, r4
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	2301      	movs	r3, #1
 80021b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f383 8810 	msr	PRIMASK, r3
}
 80021b8:	46c0      	nop			@ (mov r8, r8)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4951      	ldr	r1, [pc, #324]	@ (800230c <HAL_UART_IRQHandler+0x5bc>)
 80021c6:	400a      	ands	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	193b      	adds	r3, r7, r4
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f383 8810 	msr	PRIMASK, r3
}
 80021d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021d8:	f3ef 8310 	mrs	r3, PRIMASK
 80021dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80021de:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e0:	2484      	movs	r4, #132	@ 0x84
 80021e2:	193a      	adds	r2, r7, r4
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	2301      	movs	r3, #1
 80021e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f383 8810 	msr	PRIMASK, r3
}
 80021f0:	46c0      	nop			@ (mov r8, r8)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2101      	movs	r1, #1
 80021fe:	438a      	bics	r2, r1
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	193b      	adds	r3, r7, r4
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	f383 8810 	msr	PRIMASK, r3
}
 800220e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2280      	movs	r2, #128	@ 0x80
 8002214:	2120      	movs	r1, #32
 8002216:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002224:	f3ef 8310 	mrs	r3, PRIMASK
 8002228:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800222c:	2480      	movs	r4, #128	@ 0x80
 800222e:	193a      	adds	r2, r7, r4
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	2301      	movs	r3, #1
 8002234:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002238:	f383 8810 	msr	PRIMASK, r3
}
 800223c:	46c0      	nop			@ (mov r8, r8)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2110      	movs	r1, #16
 800224a:	438a      	bics	r2, r1
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	193b      	adds	r3, r7, r4
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002256:	f383 8810 	msr	PRIMASK, r3
}
 800225a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002262:	183b      	adds	r3, r7, r0
 8002264:	881a      	ldrh	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	0011      	movs	r1, r2
 800226a:	0018      	movs	r0, r3
 800226c:	f000 f860 	bl	8002330 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002270:	e044      	b.n	80022fc <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002272:	23a4      	movs	r3, #164	@ 0xa4
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	2380      	movs	r3, #128	@ 0x80
 800227a:	035b      	lsls	r3, r3, #13
 800227c:	4013      	ands	r3, r2
 800227e:	d010      	beq.n	80022a2 <HAL_UART_IRQHandler+0x552>
 8002280:	239c      	movs	r3, #156	@ 0x9c
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	2380      	movs	r3, #128	@ 0x80
 8002288:	03db      	lsls	r3, r3, #15
 800228a:	4013      	ands	r3, r2
 800228c:	d009      	beq.n	80022a2 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2280      	movs	r2, #128	@ 0x80
 8002294:	0352      	lsls	r2, r2, #13
 8002296:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	0018      	movs	r0, r3
 800229c:	f000 fc06 	bl	8002aac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80022a0:	e02f      	b.n	8002302 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80022a2:	23a4      	movs	r3, #164	@ 0xa4
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2280      	movs	r2, #128	@ 0x80
 80022aa:	4013      	ands	r3, r2
 80022ac:	d00f      	beq.n	80022ce <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80022ae:	23a0      	movs	r3, #160	@ 0xa0
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2280      	movs	r2, #128	@ 0x80
 80022b6:	4013      	ands	r3, r2
 80022b8:	d009      	beq.n	80022ce <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d01e      	beq.n	8002300 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	0010      	movs	r0, r2
 80022ca:	4798      	blx	r3
    }
    return;
 80022cc:	e018      	b.n	8002300 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80022ce:	23a4      	movs	r3, #164	@ 0xa4
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2240      	movs	r2, #64	@ 0x40
 80022d6:	4013      	ands	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_UART_IRQHandler+0x5b2>
 80022da:	23a0      	movs	r3, #160	@ 0xa0
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2240      	movs	r2, #64	@ 0x40
 80022e2:	4013      	ands	r3, r2
 80022e4:	d00d      	beq.n	8002302 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	0018      	movs	r0, r3
 80022ea:	f000 fbb4 	bl	8002a56 <UART_EndTransmit_IT>
    return;
 80022ee:	e008      	b.n	8002302 <HAL_UART_IRQHandler+0x5b2>
      return;
 80022f0:	46c0      	nop			@ (mov r8, r8)
 80022f2:	e006      	b.n	8002302 <HAL_UART_IRQHandler+0x5b2>
    return;
 80022f4:	46c0      	nop			@ (mov r8, r8)
 80022f6:	e004      	b.n	8002302 <HAL_UART_IRQHandler+0x5b2>
      return;
 80022f8:	46c0      	nop			@ (mov r8, r8)
 80022fa:	e002      	b.n	8002302 <HAL_UART_IRQHandler+0x5b2>
      return;
 80022fc:	46c0      	nop			@ (mov r8, r8)
 80022fe:	e000      	b.n	8002302 <HAL_UART_IRQHandler+0x5b2>
    return;
 8002300:	46c0      	nop			@ (mov r8, r8)
  }

}
 8002302:	46bd      	mov	sp, r7
 8002304:	b02b      	add	sp, #172	@ 0xac
 8002306:	bd90      	pop	{r4, r7, pc}
 8002308:	fffffeff 	.word	0xfffffeff
 800230c:	fffffedf 	.word	0xfffffedf

08002310 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002318:	46c0      	nop			@ (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	b002      	add	sp, #8
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002328:	46c0      	nop			@ (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b002      	add	sp, #8
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	000a      	movs	r2, r1
 800233a:	1cbb      	adds	r3, r7, #2
 800233c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800233e:	46c0      	nop			@ (mov r8, r8)
 8002340:	46bd      	mov	sp, r7
 8002342:	b002      	add	sp, #8
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002350:	231e      	movs	r3, #30
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	4313      	orrs	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a8d      	ldr	r2, [pc, #564]	@ (80025ac <UART_SetConfig+0x264>)
 8002378:	4013      	ands	r3, r2
 800237a:	0019      	movs	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	430a      	orrs	r2, r1
 8002384:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4a88      	ldr	r2, [pc, #544]	@ (80025b0 <UART_SetConfig+0x268>)
 800238e:	4013      	ands	r3, r2
 8002390:	0019      	movs	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4a7f      	ldr	r2, [pc, #508]	@ (80025b4 <UART_SetConfig+0x26c>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	0019      	movs	r1, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a7b      	ldr	r2, [pc, #492]	@ (80025b8 <UART_SetConfig+0x270>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d127      	bne.n	800241e <UART_SetConfig+0xd6>
 80023ce:	4b7b      	ldr	r3, [pc, #492]	@ (80025bc <UART_SetConfig+0x274>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	2203      	movs	r2, #3
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d00d      	beq.n	80023f6 <UART_SetConfig+0xae>
 80023da:	d81b      	bhi.n	8002414 <UART_SetConfig+0xcc>
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d014      	beq.n	800240a <UART_SetConfig+0xc2>
 80023e0:	d818      	bhi.n	8002414 <UART_SetConfig+0xcc>
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <UART_SetConfig+0xa4>
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d00a      	beq.n	8002400 <UART_SetConfig+0xb8>
 80023ea:	e013      	b.n	8002414 <UART_SetConfig+0xcc>
 80023ec:	231f      	movs	r3, #31
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
 80023f4:	e021      	b.n	800243a <UART_SetConfig+0xf2>
 80023f6:	231f      	movs	r3, #31
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	2202      	movs	r2, #2
 80023fc:	701a      	strb	r2, [r3, #0]
 80023fe:	e01c      	b.n	800243a <UART_SetConfig+0xf2>
 8002400:	231f      	movs	r3, #31
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	2204      	movs	r2, #4
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e017      	b.n	800243a <UART_SetConfig+0xf2>
 800240a:	231f      	movs	r3, #31
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	2208      	movs	r2, #8
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	e012      	b.n	800243a <UART_SetConfig+0xf2>
 8002414:	231f      	movs	r3, #31
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	2210      	movs	r2, #16
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	e00d      	b.n	800243a <UART_SetConfig+0xf2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a67      	ldr	r2, [pc, #412]	@ (80025c0 <UART_SetConfig+0x278>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d104      	bne.n	8002432 <UART_SetConfig+0xea>
 8002428:	231f      	movs	r3, #31
 800242a:	18fb      	adds	r3, r7, r3
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	e003      	b.n	800243a <UART_SetConfig+0xf2>
 8002432:	231f      	movs	r3, #31
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	2210      	movs	r2, #16
 8002438:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69da      	ldr	r2, [r3, #28]
 800243e:	2380      	movs	r3, #128	@ 0x80
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	429a      	cmp	r2, r3
 8002444:	d15c      	bne.n	8002500 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002446:	231f      	movs	r3, #31
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b08      	cmp	r3, #8
 800244e:	d015      	beq.n	800247c <UART_SetConfig+0x134>
 8002450:	dc18      	bgt.n	8002484 <UART_SetConfig+0x13c>
 8002452:	2b04      	cmp	r3, #4
 8002454:	d00d      	beq.n	8002472 <UART_SetConfig+0x12a>
 8002456:	dc15      	bgt.n	8002484 <UART_SetConfig+0x13c>
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <UART_SetConfig+0x11a>
 800245c:	2b02      	cmp	r3, #2
 800245e:	d005      	beq.n	800246c <UART_SetConfig+0x124>
 8002460:	e010      	b.n	8002484 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002462:	f7ff f9b9 	bl	80017d8 <HAL_RCC_GetPCLK1Freq>
 8002466:	0003      	movs	r3, r0
 8002468:	61bb      	str	r3, [r7, #24]
        break;
 800246a:	e012      	b.n	8002492 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800246c:	4b55      	ldr	r3, [pc, #340]	@ (80025c4 <UART_SetConfig+0x27c>)
 800246e:	61bb      	str	r3, [r7, #24]
        break;
 8002470:	e00f      	b.n	8002492 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002472:	f7ff f951 	bl	8001718 <HAL_RCC_GetSysClockFreq>
 8002476:	0003      	movs	r3, r0
 8002478:	61bb      	str	r3, [r7, #24]
        break;
 800247a:	e00a      	b.n	8002492 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800247c:	2380      	movs	r3, #128	@ 0x80
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	61bb      	str	r3, [r7, #24]
        break;
 8002482:	e006      	b.n	8002492 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002488:	231e      	movs	r3, #30
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
        break;
 8002490:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d100      	bne.n	800249a <UART_SetConfig+0x152>
 8002498:	e07a      	b.n	8002590 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	005a      	lsls	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	085b      	lsrs	r3, r3, #1
 80024a4:	18d2      	adds	r2, r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	0019      	movs	r1, r3
 80024ac:	0010      	movs	r0, r2
 80024ae:	f7fd fe2b 	bl	8000108 <__udivsi3>
 80024b2:	0003      	movs	r3, r0
 80024b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b0f      	cmp	r3, #15
 80024ba:	d91c      	bls.n	80024f6 <UART_SetConfig+0x1ae>
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	2380      	movs	r3, #128	@ 0x80
 80024c0:	025b      	lsls	r3, r3, #9
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d217      	bcs.n	80024f6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	200e      	movs	r0, #14
 80024cc:	183b      	adds	r3, r7, r0
 80024ce:	210f      	movs	r1, #15
 80024d0:	438a      	bics	r2, r1
 80024d2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	085b      	lsrs	r3, r3, #1
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2207      	movs	r2, #7
 80024dc:	4013      	ands	r3, r2
 80024de:	b299      	uxth	r1, r3
 80024e0:	183b      	adds	r3, r7, r0
 80024e2:	183a      	adds	r2, r7, r0
 80024e4:	8812      	ldrh	r2, [r2, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	183a      	adds	r2, r7, r0
 80024f0:	8812      	ldrh	r2, [r2, #0]
 80024f2:	60da      	str	r2, [r3, #12]
 80024f4:	e04c      	b.n	8002590 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80024f6:	231e      	movs	r3, #30
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	e047      	b.n	8002590 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002500:	231f      	movs	r3, #31
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b08      	cmp	r3, #8
 8002508:	d015      	beq.n	8002536 <UART_SetConfig+0x1ee>
 800250a:	dc18      	bgt.n	800253e <UART_SetConfig+0x1f6>
 800250c:	2b04      	cmp	r3, #4
 800250e:	d00d      	beq.n	800252c <UART_SetConfig+0x1e4>
 8002510:	dc15      	bgt.n	800253e <UART_SetConfig+0x1f6>
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <UART_SetConfig+0x1d4>
 8002516:	2b02      	cmp	r3, #2
 8002518:	d005      	beq.n	8002526 <UART_SetConfig+0x1de>
 800251a:	e010      	b.n	800253e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800251c:	f7ff f95c 	bl	80017d8 <HAL_RCC_GetPCLK1Freq>
 8002520:	0003      	movs	r3, r0
 8002522:	61bb      	str	r3, [r7, #24]
        break;
 8002524:	e012      	b.n	800254c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002526:	4b27      	ldr	r3, [pc, #156]	@ (80025c4 <UART_SetConfig+0x27c>)
 8002528:	61bb      	str	r3, [r7, #24]
        break;
 800252a:	e00f      	b.n	800254c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800252c:	f7ff f8f4 	bl	8001718 <HAL_RCC_GetSysClockFreq>
 8002530:	0003      	movs	r3, r0
 8002532:	61bb      	str	r3, [r7, #24]
        break;
 8002534:	e00a      	b.n	800254c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002536:	2380      	movs	r3, #128	@ 0x80
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	61bb      	str	r3, [r7, #24]
        break;
 800253c:	e006      	b.n	800254c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002542:	231e      	movs	r3, #30
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	2201      	movs	r2, #1
 8002548:	701a      	strb	r2, [r3, #0]
        break;
 800254a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d01e      	beq.n	8002590 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	085a      	lsrs	r2, r3, #1
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	18d2      	adds	r2, r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	0019      	movs	r1, r3
 8002562:	0010      	movs	r0, r2
 8002564:	f7fd fdd0 	bl	8000108 <__udivsi3>
 8002568:	0003      	movs	r3, r0
 800256a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	2b0f      	cmp	r3, #15
 8002570:	d90a      	bls.n	8002588 <UART_SetConfig+0x240>
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	2380      	movs	r3, #128	@ 0x80
 8002576:	025b      	lsls	r3, r3, #9
 8002578:	429a      	cmp	r2, r3
 800257a:	d205      	bcs.n	8002588 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	b29a      	uxth	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	e003      	b.n	8002590 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002588:	231e      	movs	r3, #30
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800259c:	231e      	movs	r3, #30
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	781b      	ldrb	r3, [r3, #0]
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b008      	add	sp, #32
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	ffff69f3 	.word	0xffff69f3
 80025b0:	ffffcfff 	.word	0xffffcfff
 80025b4:	fffff4ff 	.word	0xfffff4ff
 80025b8:	40013800 	.word	0x40013800
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40004400 	.word	0x40004400
 80025c4:	007a1200 	.word	0x007a1200

080025c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d4:	2208      	movs	r2, #8
 80025d6:	4013      	ands	r3, r2
 80025d8:	d00b      	beq.n	80025f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a4a      	ldr	r2, [pc, #296]	@ (800270c <UART_AdvFeatureConfig+0x144>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	0019      	movs	r1, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f6:	2201      	movs	r2, #1
 80025f8:	4013      	ands	r3, r2
 80025fa:	d00b      	beq.n	8002614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4a43      	ldr	r2, [pc, #268]	@ (8002710 <UART_AdvFeatureConfig+0x148>)
 8002604:	4013      	ands	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002618:	2202      	movs	r2, #2
 800261a:	4013      	ands	r3, r2
 800261c:	d00b      	beq.n	8002636 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4a3b      	ldr	r2, [pc, #236]	@ (8002714 <UART_AdvFeatureConfig+0x14c>)
 8002626:	4013      	ands	r3, r2
 8002628:	0019      	movs	r1, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	2204      	movs	r2, #4
 800263c:	4013      	ands	r3, r2
 800263e:	d00b      	beq.n	8002658 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4a34      	ldr	r2, [pc, #208]	@ (8002718 <UART_AdvFeatureConfig+0x150>)
 8002648:	4013      	ands	r3, r2
 800264a:	0019      	movs	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265c:	2210      	movs	r2, #16
 800265e:	4013      	ands	r3, r2
 8002660:	d00b      	beq.n	800267a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a2c      	ldr	r2, [pc, #176]	@ (800271c <UART_AdvFeatureConfig+0x154>)
 800266a:	4013      	ands	r3, r2
 800266c:	0019      	movs	r1, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	2220      	movs	r2, #32
 8002680:	4013      	ands	r3, r2
 8002682:	d00b      	beq.n	800269c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	4a25      	ldr	r2, [pc, #148]	@ (8002720 <UART_AdvFeatureConfig+0x158>)
 800268c:	4013      	ands	r3, r2
 800268e:	0019      	movs	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a0:	2240      	movs	r2, #64	@ 0x40
 80026a2:	4013      	ands	r3, r2
 80026a4:	d01d      	beq.n	80026e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002724 <UART_AdvFeatureConfig+0x15c>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026c2:	2380      	movs	r3, #128	@ 0x80
 80026c4:	035b      	lsls	r3, r3, #13
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d10b      	bne.n	80026e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4a15      	ldr	r2, [pc, #84]	@ (8002728 <UART_AdvFeatureConfig+0x160>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	0019      	movs	r1, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e6:	2280      	movs	r2, #128	@ 0x80
 80026e8:	4013      	ands	r3, r2
 80026ea:	d00b      	beq.n	8002704 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4a0e      	ldr	r2, [pc, #56]	@ (800272c <UART_AdvFeatureConfig+0x164>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	605a      	str	r2, [r3, #4]
  }
}
 8002704:	46c0      	nop			@ (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	b002      	add	sp, #8
 800270a:	bd80      	pop	{r7, pc}
 800270c:	ffff7fff 	.word	0xffff7fff
 8002710:	fffdffff 	.word	0xfffdffff
 8002714:	fffeffff 	.word	0xfffeffff
 8002718:	fffbffff 	.word	0xfffbffff
 800271c:	ffffefff 	.word	0xffffefff
 8002720:	ffffdfff 	.word	0xffffdfff
 8002724:	ffefffff 	.word	0xffefffff
 8002728:	ff9fffff 	.word	0xff9fffff
 800272c:	fff7ffff 	.word	0xfff7ffff

08002730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b092      	sub	sp, #72	@ 0x48
 8002734:	af02      	add	r7, sp, #8
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2284      	movs	r2, #132	@ 0x84
 800273c:	2100      	movs	r1, #0
 800273e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002740:	f7fe f826 	bl	8000790 <HAL_GetTick>
 8002744:	0003      	movs	r3, r0
 8002746:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2208      	movs	r2, #8
 8002750:	4013      	ands	r3, r2
 8002752:	2b08      	cmp	r3, #8
 8002754:	d12c      	bne.n	80027b0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002758:	2280      	movs	r2, #128	@ 0x80
 800275a:	0391      	lsls	r1, r2, #14
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4a46      	ldr	r2, [pc, #280]	@ (8002878 <UART_CheckIdleState+0x148>)
 8002760:	9200      	str	r2, [sp, #0]
 8002762:	2200      	movs	r2, #0
 8002764:	f000 f88c 	bl	8002880 <UART_WaitOnFlagUntilTimeout>
 8002768:	1e03      	subs	r3, r0, #0
 800276a:	d021      	beq.n	80027b0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800276c:	f3ef 8310 	mrs	r3, PRIMASK
 8002770:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002774:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002776:	2301      	movs	r3, #1
 8002778:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277c:	f383 8810 	msr	PRIMASK, r3
}
 8002780:	46c0      	nop			@ (mov r8, r8)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2180      	movs	r1, #128	@ 0x80
 800278e:	438a      	bics	r2, r1
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002798:	f383 8810 	msr	PRIMASK, r3
}
 800279c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2220      	movs	r2, #32
 80027a2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2278      	movs	r2, #120	@ 0x78
 80027a8:	2100      	movs	r1, #0
 80027aa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e05f      	b.n	8002870 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2204      	movs	r2, #4
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d146      	bne.n	800284c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027c0:	2280      	movs	r2, #128	@ 0x80
 80027c2:	03d1      	lsls	r1, r2, #15
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002878 <UART_CheckIdleState+0x148>)
 80027c8:	9200      	str	r2, [sp, #0]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f000 f858 	bl	8002880 <UART_WaitOnFlagUntilTimeout>
 80027d0:	1e03      	subs	r3, r0, #0
 80027d2:	d03b      	beq.n	800284c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d4:	f3ef 8310 	mrs	r3, PRIMASK
 80027d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80027da:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80027de:	2301      	movs	r3, #1
 80027e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f383 8810 	msr	PRIMASK, r3
}
 80027e8:	46c0      	nop			@ (mov r8, r8)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4921      	ldr	r1, [pc, #132]	@ (800287c <UART_CheckIdleState+0x14c>)
 80027f6:	400a      	ands	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f383 8810 	msr	PRIMASK, r3
}
 8002804:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002806:	f3ef 8310 	mrs	r3, PRIMASK
 800280a:	61bb      	str	r3, [r7, #24]
  return(result);
 800280c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800280e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002810:	2301      	movs	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f383 8810 	msr	PRIMASK, r3
}
 800281a:	46c0      	nop			@ (mov r8, r8)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2101      	movs	r1, #1
 8002828:	438a      	bics	r2, r1
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	f383 8810 	msr	PRIMASK, r3
}
 8002836:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2280      	movs	r2, #128	@ 0x80
 800283c:	2120      	movs	r1, #32
 800283e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2278      	movs	r2, #120	@ 0x78
 8002844:	2100      	movs	r1, #0
 8002846:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e011      	b.n	8002870 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2220      	movs	r2, #32
 8002850:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2280      	movs	r2, #128	@ 0x80
 8002856:	2120      	movs	r1, #32
 8002858:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2278      	movs	r2, #120	@ 0x78
 800286a:	2100      	movs	r1, #0
 800286c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	0018      	movs	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	b010      	add	sp, #64	@ 0x40
 8002876:	bd80      	pop	{r7, pc}
 8002878:	01ffffff 	.word	0x01ffffff
 800287c:	fffffedf 	.word	0xfffffedf

08002880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	1dfb      	adds	r3, r7, #7
 800288e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002890:	e051      	b.n	8002936 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	3301      	adds	r3, #1
 8002896:	d04e      	beq.n	8002936 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002898:	f7fd ff7a 	bl	8000790 <HAL_GetTick>
 800289c:	0002      	movs	r2, r0
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d302      	bcc.n	80028ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e051      	b.n	8002956 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2204      	movs	r2, #4
 80028ba:	4013      	ands	r3, r2
 80028bc:	d03b      	beq.n	8002936 <UART_WaitOnFlagUntilTimeout+0xb6>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b80      	cmp	r3, #128	@ 0x80
 80028c2:	d038      	beq.n	8002936 <UART_WaitOnFlagUntilTimeout+0xb6>
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b40      	cmp	r3, #64	@ 0x40
 80028c8:	d035      	beq.n	8002936 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	2208      	movs	r2, #8
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d111      	bne.n	80028fc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2208      	movs	r2, #8
 80028de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 f83c 	bl	8002960 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2284      	movs	r2, #132	@ 0x84
 80028ec:	2108      	movs	r1, #8
 80028ee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2278      	movs	r2, #120	@ 0x78
 80028f4:	2100      	movs	r1, #0
 80028f6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e02c      	b.n	8002956 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	69da      	ldr	r2, [r3, #28]
 8002902:	2380      	movs	r3, #128	@ 0x80
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	401a      	ands	r2, r3
 8002908:	2380      	movs	r3, #128	@ 0x80
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	429a      	cmp	r2, r3
 800290e:	d112      	bne.n	8002936 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2280      	movs	r2, #128	@ 0x80
 8002916:	0112      	lsls	r2, r2, #4
 8002918:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	0018      	movs	r0, r3
 800291e:	f000 f81f 	bl	8002960 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2284      	movs	r2, #132	@ 0x84
 8002926:	2120      	movs	r1, #32
 8002928:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2278      	movs	r2, #120	@ 0x78
 800292e:	2100      	movs	r1, #0
 8002930:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e00f      	b.n	8002956 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	4013      	ands	r3, r2
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	425a      	negs	r2, r3
 8002946:	4153      	adcs	r3, r2
 8002948:	b2db      	uxtb	r3, r3
 800294a:	001a      	movs	r2, r3
 800294c:	1dfb      	adds	r3, r7, #7
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d09e      	beq.n	8002892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	b004      	add	sp, #16
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08e      	sub	sp, #56	@ 0x38
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002968:	f3ef 8310 	mrs	r3, PRIMASK
 800296c:	617b      	str	r3, [r7, #20]
  return(result);
 800296e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002970:	637b      	str	r3, [r7, #52]	@ 0x34
 8002972:	2301      	movs	r3, #1
 8002974:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f383 8810 	msr	PRIMASK, r3
}
 800297c:	46c0      	nop			@ (mov r8, r8)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4926      	ldr	r1, [pc, #152]	@ (8002a24 <UART_EndRxTransfer+0xc4>)
 800298a:	400a      	ands	r2, r1
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002990:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f383 8810 	msr	PRIMASK, r3
}
 8002998:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800299a:	f3ef 8310 	mrs	r3, PRIMASK
 800299e:	623b      	str	r3, [r7, #32]
  return(result);
 80029a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80029a4:	2301      	movs	r3, #1
 80029a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	f383 8810 	msr	PRIMASK, r3
}
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2101      	movs	r1, #1
 80029bc:	438a      	bics	r2, r1
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c6:	f383 8810 	msr	PRIMASK, r3
}
 80029ca:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d118      	bne.n	8002a06 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029d4:	f3ef 8310 	mrs	r3, PRIMASK
 80029d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80029da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029de:	2301      	movs	r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f383 8810 	msr	PRIMASK, r3
}
 80029e8:	46c0      	nop			@ (mov r8, r8)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2110      	movs	r1, #16
 80029f6:	438a      	bics	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f383 8810 	msr	PRIMASK, r3
}
 8002a04:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2280      	movs	r2, #128	@ 0x80
 8002a0a:	2120      	movs	r1, #32
 8002a0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002a1a:	46c0      	nop			@ (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b00e      	add	sp, #56	@ 0x38
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	fffffedf 	.word	0xfffffedf

08002a28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	225a      	movs	r2, #90	@ 0x5a
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2252      	movs	r2, #82	@ 0x52
 8002a42:	2100      	movs	r1, #0
 8002a44:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f7ff fc69 	bl	8002320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b004      	add	sp, #16
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b086      	sub	sp, #24
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a62:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a64:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f383 8810 	msr	PRIMASK, r3
}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2140      	movs	r1, #64	@ 0x40
 8002a80:	438a      	bics	r2, r1
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f383 8810 	msr	PRIMASK, r3
}
 8002a8e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f7ff fc36 	bl	8002310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002aa4:	46c0      	nop			@ (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b006      	add	sp, #24
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002ab4:	46c0      	nop			@ (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b002      	add	sp, #8
 8002aba:	bd80      	pop	{r7, pc}

08002abc <memset>:
 8002abc:	0003      	movs	r3, r0
 8002abe:	1882      	adds	r2, r0, r2
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d100      	bne.n	8002ac6 <memset+0xa>
 8002ac4:	4770      	bx	lr
 8002ac6:	7019      	strb	r1, [r3, #0]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	e7f9      	b.n	8002ac0 <memset+0x4>

08002acc <__libc_init_array>:
 8002acc:	b570      	push	{r4, r5, r6, lr}
 8002ace:	2600      	movs	r6, #0
 8002ad0:	4c0c      	ldr	r4, [pc, #48]	@ (8002b04 <__libc_init_array+0x38>)
 8002ad2:	4d0d      	ldr	r5, [pc, #52]	@ (8002b08 <__libc_init_array+0x3c>)
 8002ad4:	1b64      	subs	r4, r4, r5
 8002ad6:	10a4      	asrs	r4, r4, #2
 8002ad8:	42a6      	cmp	r6, r4
 8002ada:	d109      	bne.n	8002af0 <__libc_init_array+0x24>
 8002adc:	2600      	movs	r6, #0
 8002ade:	f000 f819 	bl	8002b14 <_init>
 8002ae2:	4c0a      	ldr	r4, [pc, #40]	@ (8002b0c <__libc_init_array+0x40>)
 8002ae4:	4d0a      	ldr	r5, [pc, #40]	@ (8002b10 <__libc_init_array+0x44>)
 8002ae6:	1b64      	subs	r4, r4, r5
 8002ae8:	10a4      	asrs	r4, r4, #2
 8002aea:	42a6      	cmp	r6, r4
 8002aec:	d105      	bne.n	8002afa <__libc_init_array+0x2e>
 8002aee:	bd70      	pop	{r4, r5, r6, pc}
 8002af0:	00b3      	lsls	r3, r6, #2
 8002af2:	58eb      	ldr	r3, [r5, r3]
 8002af4:	4798      	blx	r3
 8002af6:	3601      	adds	r6, #1
 8002af8:	e7ee      	b.n	8002ad8 <__libc_init_array+0xc>
 8002afa:	00b3      	lsls	r3, r6, #2
 8002afc:	58eb      	ldr	r3, [r5, r3]
 8002afe:	4798      	blx	r3
 8002b00:	3601      	adds	r6, #1
 8002b02:	e7f2      	b.n	8002aea <__libc_init_array+0x1e>
 8002b04:	08002b64 	.word	0x08002b64
 8002b08:	08002b64 	.word	0x08002b64
 8002b0c:	08002b68 	.word	0x08002b68
 8002b10:	08002b64 	.word	0x08002b64

08002b14 <_init>:
 8002b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b16:	46c0      	nop			@ (mov r8, r8)
 8002b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1a:	bc08      	pop	{r3}
 8002b1c:	469e      	mov	lr, r3
 8002b1e:	4770      	bx	lr

08002b20 <_fini>:
 8002b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b26:	bc08      	pop	{r3}
 8002b28:	469e      	mov	lr, r3
 8002b2a:	4770      	bx	lr
